//TEST(compute):COMPARE_COMPUTE_EX(filecheck-buffer=CHECK): -mesh -output-using-type -dx12 -use-dxil -profile sm_6_6 -render-features mesh-shader
//TEST(compute):COMPARE_COMPUTE_EX(filecheck-buffer=CHECK): -mesh -output-using-type -vk -profile glsl_450+spirv_1_4 -render-features mesh-shader

// See https://github.com/shader-slang/slang/issues/3401

// CHECK:      0
// CHECK-NEXT: 1
// CHECK-NEXT: 4
// CHECK-NEXT: 9

//TEST_INPUT: ubuffer(data=[0 0 0 0], stride=4):out,name outputBuffer

RWStructuredBuffer<float> outputBuffer;

cbuffer Uniforms
{
	float4x4 modelViewProjection;
}

const static float2 positions[3] = {
  float2(0.0, -0.5),
  float2(0.5, 0.5),
  float2(-0.5, 0.5)
};

const static float3 colors[3] = {
  float3(1.0, 1.0, 0.0),
  float3(0.0, 1.0, 1.0),
  float3(1.0, 0.0, 1.0)
};
struct Vertex
{
  float4 pos : SV_Position;
  float3 color : Color;
  int index : Index;
  int value : Value;
};

const static uint MAX_VERTS = 12;
const static uint MAX_PRIMS = 4;

[outputtopology("triangle")]
[shader("mesh")]
[numthreads(3, 1, 1)]
void meshMain(
    in uint tig : SV_GroupIndex,
    OutputVertices<Vertex, MAX_VERTS> verts,
    OutputIndices<uint3, MAX_PRIMS> triangles)
{
    const uint numVertices = 12;
    const uint numPrimitives = 4;
    SetMeshOutputCounts(numVertices, numPrimitives);

    for(uint i = tig; i < numVertices; ++i)
    {
        const int tri = i / 3;
        verts[i] = {float4(positions[i % 3], 0, 1), colors[i % 3], tri, tri*tri};
    }

    for(uint i = tig; i < numPrimitives; ++i)
    {
        triangles[i] = i * 3 + uint3(0,1,2);
    }
}

//
// Fragment Shader
//

struct Fragment
{
    float4 color : SV_Target;
};

Fragment fragmentMain(Vertex input)
{
	outputBuffer[input.index] = input.value;

	Fragment output;
	output.color = float4(input.color, 1.0);
	return output;
}
