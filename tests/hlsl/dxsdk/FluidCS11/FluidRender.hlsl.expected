result code = 0
standard error = {
}
standard output = {
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for ParticlesRO_0
// {
//
//   struct
//   {
//       
//       float2 position_0;             // Offset:    0
//       float2 velocity_0;             // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
// Resource bind info for ParticleDensityRO_0
// {
//
//   struct
//   {
//       
//       float density_0;               // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ParticlesRO_0                     texture  struct         r/o             t0      1 
// ParticleDensityRO_0               texture  struct         r/o             t1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VERTEXID              0   x           0   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
vs_4_0
dcl_globalFlags refactoringAllowed | enableRawAndStructuredBuffers
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 1.000000},
                              { 1.000000, 1.000000, 0, 1.000000},
                              { 0, 1.000000, 0, 1.000000},
                              { 0, 1.000000, 1.000000, 1.000000},
                              { 0, 0, 1.000000, 1.000000} }
dcl_resource_structured t0, 16
dcl_resource_structured t1, 4
dcl_input_sgv v0.x, vertex_id
dcl_output o0.xy
dcl_output o1.xyzw
dcl_temps 3
ld_structured o0.xy, v0.x, l(0), t0.xyxx
ld_structured r0.x, v0.x, l(0), t1.xxxx
add r0.x, r0.x, l(-1000.000000)
mul_sat r0.x, r0.x, l(0.001000)
mul r0.x, r0.x, l(4.000000)
round_pi r0.y, r0.x
ftoi r0.y, r0.y
mov r1.xyz, icb[r0.y + 0].xyzx
round_ni r0.y, r0.x
frc r0.x, r0.x
ftoi r0.y, r0.y
mov r2.xyz, icb[r0.y + 0].xyzx
mov r1.w, l(1.000000)
mov r2.w, l(1.000000)
add r1.xyzw, r1.xyzw, -r2.xyzw
mad o1.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
ret 
// Approximately 17 instruction slots used
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbRenderConstants_0
// {
//
//   float4x4 g_mViewProjection_0;      // Offset:    0 Size:    64
//   float g_fParticleSize_0;           // Offset:   64 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbRenderConstants_0               cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
gs_4_0
dcl_constantbuffer CB0[5], immediateIndexed
dcl_input v[1][0].xy
dcl_input v[1][1].xyzw
dcl_temps 2
dcl_inputprimitive point 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_maxout 4
mov r0.xy, v[0][0].xyxx
mov r0.z, l(1.000000)
mad r1.xyz, cb0[4].xxxx, l(-1.000000, 1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(0,1.000000,0,0)
emit 
mad r1.xyz, cb0[4].xxxx, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(1.000000,1.000000,0,0)
emit 
mad r1.xyz, cb0[4].xxxx, l(-1.000000, -1.000000, 0.000000, 0.000000), r0.xyzx
mad r0.xyz, cb0[4].xxxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.xyzx
dp3 r0.w, r1.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r1.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r1.xyzx, cb0[2].xywx
dp3 r1.x, r1.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r1.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(0,0,0,0)
emit 
dp3 r0.w, r0.xyzx, cb0[0].xywx
mov o0.x, r0.w
dp3 r0.w, r0.xyzx, cb0[1].xywx
mov o0.y, r0.w
dp3 r0.w, r0.xyzx, cb0[2].xywx
dp3 r0.x, r0.xyzx, cb0[3].xywx
mov o0.z, r0.w
mov o0.w, r0.x
mov o1.xyzw, v[0][1].xyzw
mov o2.xy, l(1.000000,0,0,0)
emit 
cut 
ret 
// Approximately 52 instruction slots used
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
mov o0.xyzw, v1.xyzw
ret 
// Approximately 2 instruction slots used
}
