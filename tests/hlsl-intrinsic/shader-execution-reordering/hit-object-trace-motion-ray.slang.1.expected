result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
#extension GL_NV_ray_tracing_motion_blur : require
layout(row_major) uniform;
layout(row_major) buffer;
struct SomeValues_0
{
    int a_0;
    float b_0;
};

layout(location = 0)
hitObjectAttributeNV
SomeValues_0 t_0;

layout(location = 0)
rayPayloadEXT
SomeValues_0 p_0;

layout(binding = 0)
uniform accelerationStructureEXT scene_0;

SomeValues_0 HitObject_GetAttributes_0(hitObjectNV this_0)
{
    hitObjectGetAttributesNV((this_0), ((0)));
    return t_0;
}

uint calcValue_0(hitObjectNV hit_0)
{
    bool _S1 = (hitObjectIsHitNV((hit_0)));
    uint r_0;
    if(_S1)
    {
        uint instanceIndex_0 = (hitObjectGetInstanceCustomIndexNV((hit_0)));
        uint instanceID_0 = (hitObjectGetInstanceIdNV((hit_0)));
        uint geometryIndex_0 = (hitObjectGetGeometryIndexNV((hit_0)));
        uint primitiveIndex_0 = (hitObjectGetPrimitiveIndexNV((hit_0)));
        SomeValues_0 objSomeValues_0 = HitObject_GetAttributes_0(hit_0);
        r_0 = instanceIndex_0 + instanceID_0 + geometryIndex_0 + primitiveIndex_0 + uint(objSomeValues_0.a_0);
    }
    else
    {
        r_0 = 0U;
    }
    return r_0;
}

layout(std430, binding = 1) buffer _S2 {
    uint _data[];
} outputBuffer_0;
struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

void main()
{
    uvec3 _S3 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S3.xy);
    uvec3 _S4 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    int _S5 = idx_0 / 4;
    float currentTime_0 = float(_S5);
    float _S6 = float(idx_0);
    float _S7 = _S6 * 2.0;
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(_S6, 0.0, 0.0);
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    RayDesc_0 _S8 = ray_0;
    p_0.a_0 = idx_0;
    p_0.b_0 = _S7;
    hitObjectNV hitObj_0;
    hitObjectTraceRayMotionNV(hitObj_0, scene_0, 20U, 255U, 0U, 4U, 0U, _S8.Origin_0, _S8.TMin_0, _S8.Direction_0, _S8.TMax_0, currentTime_0, (0));
    uint _S9 = uint(idx_0);
    uint _S10 = calcValue_0(hitObj_0);
    ((outputBuffer_0)._data[(_S9)]) = _S10;
    return;
}

}
