result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
layout(row_major) uniform;
layout(row_major) buffer;
struct SomeValues_0
{
    int a_0;
    float b_0;
};

layout(location = 0)
hitObjectAttributeNV
SomeValues_0 t_0;

layout(binding = 0)
uniform accelerationStructureEXT scene_0;

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

RayDesc_0 HitObject_GetRayDesc_0(hitObjectNV this_0)
{
    vec3 _S1 = (hitObjectGetWorldRayOriginNV((this_0)));
    float _S2 = (hitObjectGetRayTMinNV((this_0)));
    vec3 _S3 = (hitObjectGetObjectRayDirectionNV((this_0)));
    float _S4 = (hitObjectGetRayTMaxNV((this_0)));
    RayDesc_0 ray_0 = { _S1, _S2, _S3, _S4 };
    return ray_0;
}

SomeValues_0 HitObject_GetAttributes_0(hitObjectNV this_1)
{
    hitObjectGetAttributesNV((this_1), ((0)));
    return t_0;
}

uint calcValue_0(hitObjectNV hit_0)
{
    bool _S5 = (hitObjectIsHitNV((hit_0)));
    uint r_0;
    if(_S5)
    {
        uint instanceIndex_0 = (hitObjectGetInstanceCustomIndexNV((hit_0)));
        uint instanceID_0 = (hitObjectGetInstanceIdNV((hit_0)));
        uint geometryIndex_0 = (hitObjectGetGeometryIndexNV((hit_0)));
        uint primitiveIndex_0 = (hitObjectGetPrimitiveIndexNV((hit_0)));
        uint hitKind_0 = (hitObjectGetHitKindNV((hit_0)));
        uint r_1 = 0U + hitKind_0 + instanceIndex_0 + instanceID_0 + geometryIndex_0 + primitiveIndex_0;
        RayDesc_0 ray_1 = HitObject_GetRayDesc_0(hit_0);
        uint r_2 = r_1 + uint(ray_1.TMin_0 > 0.00000000000000000000) + uint(ray_1.TMax_0 < ray_1.TMin_0);
        SomeValues_0 objSomeValues_0 = HitObject_GetAttributes_0(hit_0);
        r_0 = r_2 + uint(objSomeValues_0.a_0);
    }
    else
    {
        bool _S6 = (hitObjectIsMissNV((hit_0)));
        uint r_3;
        if(_S6)
        {
            r_3 = 1U;
        }
        else
        {
            r_3 = 0U;
        }
        r_0 = r_3;
    }
    return r_0;
}

layout(std430, binding = 1) buffer _S7 {
    uint _data[];
} outputBuffer_0;
void main()
{
    uvec3 _S8 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S8.xy);
    uvec3 _S9 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    RayDesc_0 ray_2;
    ray_2.Origin_0 = vec3(float(idx_0), 0.00000000000000000000, 0.00000000000000000000);
    ray_2.TMin_0 = 0.00999999977648258209;
    ray_2.Direction_0 = vec3(0.00000000000000000000, 1.00000000000000000000, 0.00000000000000000000);
    ray_2.TMax_0 = 10000.00000000000000000000;
    RayDesc_0 _S10 = ray_2;
    hitObjectNV hitObj_0;
    hitObjectRecordHitWithIndexNV(hitObj_0, scene_0, int(uint(idx_0)), int(uint(idx_0 * 2)), int(uint(idx_0 * 3)), 0U, 0U, _S10.Origin_0, _S10.TMin_0, _S10.Direction_0, _S10.TMax_0, (0));
    uint r_4 = calcValue_0(hitObj_0);
    RayDesc_0 _S11 = ray_2;
    hitObjectNV hitObj_1;
    hitObjectRecordHitNV(hitObj_1, scene_0, int(uint(idx_0)), int(uint(idx_0 * 3)), int(uint(idx_0 * 2)), 0U, 0U, 4U, _S11.Origin_0, _S11.TMin_0, _S11.Direction_0, _S11.TMax_0, (0));
    uint _S12 = calcValue_0(hitObj_1);
    uint r_5 = r_4 + _S12;
    ((outputBuffer_0)._data[(uint(idx_0))]) = r_5;
    return;
}

}
