result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
#extension GL_EXT_spirv_intrinsics : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(binding = 0)
uniform accelerationStructureEXT scene_0;

layout(std430, binding = 1) buffer StructuredBuffer_uint_t_0 {
    uint _data[];
} outputBuffer_0;
struct MyAttributes_0
{
    uint value_0;
};

layout(location = 0)
hitObjectAttributeNV
MyAttributes_0 t_0;

struct MyRayPayload_0
{
    uint value_1;
};

layout(location = 0)
rayPayloadEXT
MyRayPayload_0 p_0;

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

RayDesc_0 makeRay_0(uint idx_0, uint variation_0)
{
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(float(idx_0), 0.0, float(variation_0));
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    return ray_0;
}

hitObjectNV myTraceRay_0(uint idx_1)
{
    RayDesc_0 ray_1 = makeRay_0(idx_1, 0U);
    hitObjectNV hitObj_0;
    p_0.value_1 = idx_1;
    hitObjectTraceRayNV(hitObj_0, scene_0, 20U, 255U, 0U, 4U, 0U, ray_1.Origin_0, ray_1.TMin_0, ray_1.Direction_0, ray_1.TMax_0, (0));
    return hitObj_0;
}

MyAttributes_0 HitObject_GetAttributes_0(hitObjectNV this_0)
{
    hitObjectGetAttributesNV((this_0), ((0)));
    return t_0;
}

void accumulate_0(inout uint value_2, spirv_by_reference hitObjectNV hit_0)
{
    value_2 = value_2 * 256U;
    bool _S1 = (hitObjectIsHitNV((hit_0)));
    if(_S1)
    {
        MyAttributes_0 _S2 = HitObject_GetAttributes_0(hit_0);
        value_2 = value_2 + (16U + _S2.value_0);
    }
    return;
}

void copyHitObjectHandle_0(spirv_by_reference hitObjectNV dst_0, spirv_by_reference hitObjectNV src_0)
{
    dst_0 = src_0;
    return;
}

void myMakeMiss_0(uint idx_2, spirv_by_reference hitObjectNV h_0)
{
    RayDesc_0 ray_2 = makeRay_0(idx_2, 1U);
    hitObjectNV hitObj_1;
    hitObjectRecordMissNV(hitObj_1, idx_2, ray_2.Origin_0, ray_2.TMin_0, ray_2.Direction_0, ray_2.TMax_0);
    h_0 = hitObj_1;
    return;
}

void main()
{
    uvec3 _S3 = ((gl_LaunchIDEXT));
    uint idx_3 = _S3.x;
    uint r_0 = 0U;
    hitObjectNV hit_1 = myTraceRay_0(idx_3);
    accumulate_0(r_0, hit_1);
    hitObjectNV hit2_0;
    copyHitObjectHandle_0(hit2_0, hit_1);
    accumulate_0(r_0, hit2_0);
    hitObjectNV hitBackup_0 = hit_1;
    myMakeMiss_0(idx_3, hit_1);
    accumulate_0(r_0, hit_1);
    accumulate_0(r_0, hitBackup_0);
    outputBuffer_0._data[idx_3] = r_0;
    return;
}

}
