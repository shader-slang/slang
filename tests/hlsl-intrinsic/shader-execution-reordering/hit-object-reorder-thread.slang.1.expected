result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
#extension GL_EXT_spirv_intrinsics : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(binding = 0)
uniform accelerationStructureEXT scene_0;

layout(std430, binding = 1) buffer StructuredBuffer_uint_t_0 {
    uint _data[];
} outputBuffer_0;
struct SomeValues_0
{
    int a_0;
    float b_0;
};

layout(location = 0)
rayPayloadEXT
SomeValues_0 p_0;

layout(location = 0)
hitObjectAttributeNV
SomeValues_0 t_0;

layout(location = 1)
rayPayloadEXT
SomeValues_0 p_1;

SomeValues_0 HitObject_GetAttributes_0(hitObjectNV this_0)
{
    hitObjectGetAttributesNV((this_0), ((0)));
    return t_0;
}

uint calcValue_0(spirv_by_reference hitObjectNV hit_0)
{
    bool _S1 = (hitObjectIsHitNV((hit_0)));
    uint r_0;
    if(_S1)
    {
        uint instanceIndex_0 = (hitObjectGetInstanceCustomIndexNV((hit_0)));
        uint instanceID_0 = (hitObjectGetInstanceIdNV((hit_0)));
        uint geometryIndex_0 = (hitObjectGetGeometryIndexNV((hit_0)));
        uint primitiveIndex_0 = (hitObjectGetPrimitiveIndexNV((hit_0)));
        SomeValues_0 objSomeValues_0 = HitObject_GetAttributes_0(hit_0);
        r_0 = uint(int(instanceIndex_0 + instanceID_0 + geometryIndex_0 + primitiveIndex_0) + objSomeValues_0.a_0);
    }
    else
    {
        r_0 = 0U;
    }
    return r_0;
}

void HitObject_Invoke_0(accelerationStructureEXT AccelerationStructure_0, spirv_by_reference hitObjectNV HitOrMiss_0, inout SomeValues_0 Payload_0)
{
    p_0 = Payload_0;
    hitObjectExecuteShaderNV(HitOrMiss_0, (0));
    Payload_0 = p_0;
    return;
}

struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

void main()
{
    uvec3 _S2 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S2.xy);
    uvec3 _S3 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    float _S4 = float(idx_0);
    float _S5 = _S4 * 2.0;
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(_S4, 0.0, 0.0);
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.0, 1.0, 0.0);
    ray_0.TMax_0 = 10000.0;
    RayDesc_0 _S6 = ray_0;
    hitObjectNV hitObj_0;
    p_1.a_0 = idx_0;
    p_1.b_0 = _S5;
    hitObjectTraceRayNV(hitObj_0, scene_0, 20U, 255U, 0U, 4U, 0U, _S6.Origin_0, _S6.TMin_0, _S6.Direction_0, _S6.TMax_0, (1));
    hitObjectNV hit_1 = hitObj_0;
    uint r_1 = calcValue_0(hit_1);
    reorderThreadNV(hit_1);
    float _S7 = _S4 * 4.0;
    SomeValues_0 otherValues_0;
    otherValues_0.a_0 = idx_0 * -1;
    otherValues_0.b_0 = _S7;
    HitObject_Invoke_0(scene_0, hit_1, otherValues_0);
    uint _S8 = calcValue_0(hit_1);
    uint r_2 = r_1 + _S8;
    reorderThreadNV(hit_1, uint(idx_0 & 3), 2U);
    float _S9 = _S4 * 8.0;
    otherValues_0.a_0 = idx_0 * -2;
    otherValues_0.b_0 = _S9;
    HitObject_Invoke_0(scene_0, hit_1, otherValues_0);
    uint _S10 = calcValue_0(hit_1);
    uint r_3 = r_2 + _S10;
    reorderThreadNV(uint(idx_0 & 1), 1U);
    float _S11 = _S4 * 16.0;
    otherValues_0.a_0 = idx_0 * -4;
    otherValues_0.b_0 = _S11;
    HitObject_Invoke_0(scene_0, hit_1, otherValues_0);
    uint _S12 = calcValue_0(hit_1);
    outputBuffer_0._data[uint(idx_0)] = r_3 + _S12;
    return;
}

}
