result code = 0
standard error = {
}
standard output = {
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_shader_invocation_reorder : require
layout(row_major) uniform;
layout(row_major) buffer;
layout(std430, binding = 0) buffer _S1 {
    uint _data[];
} outputBuffer_0;
struct RayDesc_0
{
    vec3 Origin_0;
    float TMin_0;
    vec3 Direction_0;
    float TMax_0;
};

void main()
{
    uvec3 _S2 = ((gl_LaunchIDEXT));
    ivec2 launchID_0 = ivec2(_S2.xy);
    uvec3 _S3 = ((gl_LaunchSizeEXT));
    int idx_0 = launchID_0.x;
    RayDesc_0 ray_0;
    ray_0.Origin_0 = vec3(float(idx_0), 0.00000000000000000000, 0.00000000000000000000);
    ray_0.TMin_0 = 0.00999999977648258209;
    ray_0.Direction_0 = vec3(0.00000000000000000000, 1.00000000000000000000, 0.00000000000000000000);
    ray_0.TMax_0 = 10000.00000000000000000000;
    RayDesc_0 _S4 = ray_0;
    hitObjectNV hitObj_0;
    hitObjectRecordMissNV(hitObj_0, uint(idx_0), _S4.Origin_0, _S4.TMin_0, _S4.Direction_0, _S4.TMax_0);
    RayDesc_0 _S5 = ray_0;
    hitObjectNV hitObj_1;
    hitObjectRecordMissNV(hitObj_1, uint(idx_0 + 1), _S5.Origin_0, _S5.TMin_0, _S5.Direction_0, _S5.TMax_0);
    bool _S6 = (hitObjectIsMissNV((hitObj_1)));
    uint _S7 = uint(int(_S6));
    ((outputBuffer_0)._data[(uint(idx_0))]) = _S7;
    return;
}

}
