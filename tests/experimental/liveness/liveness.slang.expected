result code = 0
standard error = {
}
standard output = {
#ifdef SLANG_HLSL_ENABLE_NVAPI
#include "nvHLSLExtns.h"
#endif

#pragma pack_matrix(column_major)

#line 18 "tests/experimental/liveness/liveness.slang"
int someSlowFunc_0(int a_0)
{
    int i_0;
    uint v_0;

#line 20
    uint _S1 = (uint) a_0;
    i_0 = int(0);
    v_0 = _S1;
    for(;;)
    {

#line 21
        if(i_0 < a_0 * int(20))
        {
        }
        else
        {
            break;
        }

#line 23
        uint _S2 = (uint) ((int) ((bool) (v_0 >> int(1)) || (bool) (v_0 << int(31))) * i_0);

#line 21
        int i_1 = i_0 + int(1);

#line 21
        i_0 = i_1;
        v_0 = _S2;
    }

    return (int) v_0;
}


#line 15
RWStructuredBuffer<int > anotherBuffer_0 : register(u1);


#line 4
RWStructuredBuffer<int > outputBuffer_0 : register(u0);

struct SomeStruct_0
{
    int a_1;
    int x_0;
    int  c_0[int(100)];
};


#line 29
[shader("compute")][numthreads(4, 1, 1)]
void computeMain(uint3 dispatchThreadID_0 : SV_DISPATCHTHREADID)
{
    int i_2;
    int res_0;

#line 31
    int index_0 = (int) dispatchThreadID_0.x;



    i_2 = int(0);
    res_0 = index_0;
    for(;;)
    {

#line 35
        if(i_2 < index_0)
        {
        }
        else
        {
            break;
        }

#line 37
        int v_1 = someSlowFunc_0(index_0);

        SomeStruct_0 s_0;

#line 39
        SLANG_LIVE_START(s_0)

        if((bool) (v_1 & int(256)))
        {
            s_0.x_0 = anotherBuffer_0[(uint) (v_1 & int(3))];

#line 41
        }
        else
        {

#line 41
        }

#line 47
        int _S3 = s_0.x_0;

#line 35
        int i_3 = i_2 + int(1);

#line 35
        i_2 = i_3;
        res_0 = _S3;
    }

#line 50
    outputBuffer_0[(uint) index_0] = res_0;
    return;
}

}
