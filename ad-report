### LOWER-TO-IR:
undefined
let  %1	: Void	= no_diff
let  %2	: witness_table_t(%IDifferentiable)	= lookupWitness(%3, %4)
let  %3	: witness_table_t(%IFloat)	= lookupWitness(%5, %6)
let  %7	: CapabilitySet	= capabilityDisjunction(%8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %77, %78, %79, %80, %81, %82, %83, %84, %85, %86, %87, %88, %89, %90, %91, %92, %93, %94, %95, %96, %97, %98, %99, %100, %101, %102, %103, %104, %105, %106, %107, %108, %109, %110, %111, %112, %113, %114, %115, %116, %117, %118, %119)
let  %119	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 75 : Int)
let  %118	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 74 : Int)
let  %117	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 73 : Int)
let  %116	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 72 : Int)
let  %115	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 71 : Int)
let  %114	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 70 : Int)
let  %113	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 69 : Int)
let  %112	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 68 : Int)
let  %111	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 67 : Int)
let  %110	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 66 : Int)
let  %109	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 65 : Int)
let  %108	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 64 : Int)
let  %107	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 63 : Int)
let  %106	: CapabilitySet	= capabilityConjunction(1 : Int, 9 : Int, 62 : Int)
let  %105	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 75 : Int)
let  %104	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 74 : Int)
let  %103	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 73 : Int)
let  %102	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 72 : Int)
let  %101	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 71 : Int)
let  %100	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 70 : Int)
let  %99	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 69 : Int)
let  %98	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 68 : Int)
let  %97	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 67 : Int)
let  %96	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 66 : Int)
let  %95	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 65 : Int)
let  %94	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 64 : Int)
let  %93	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 63 : Int)
let  %92	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 62 : Int)
let  %91	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 75 : Int)
let  %90	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 74 : Int)
let  %89	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 73 : Int)
let  %88	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 72 : Int)
let  %87	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 71 : Int)
let  %86	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 70 : Int)
let  %85	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 69 : Int)
let  %84	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 68 : Int)
let  %83	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 67 : Int)
let  %82	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 66 : Int)
let  %81	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 65 : Int)
let  %80	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 64 : Int)
let  %79	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 63 : Int)
let  %78	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 62 : Int)
let  %77	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 75 : Int)
let  %76	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 74 : Int)
let  %75	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 73 : Int)
let  %74	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 72 : Int)
let  %73	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 71 : Int)
let  %72	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 70 : Int)
let  %71	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 69 : Int)
let  %70	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 68 : Int)
let  %69	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 67 : Int)
let  %68	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 66 : Int)
let  %67	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 65 : Int)
let  %66	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 64 : Int)
let  %65	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 63 : Int)
let  %64	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 62 : Int)
let  %63	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 75 : Int)
let  %62	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 74 : Int)
let  %61	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 73 : Int)
let  %60	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 72 : Int)
let  %59	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 71 : Int)
let  %58	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 70 : Int)
let  %57	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 69 : Int)
let  %56	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 68 : Int)
let  %55	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 67 : Int)
let  %54	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 66 : Int)
let  %53	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 65 : Int)
let  %52	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 64 : Int)
let  %51	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 63 : Int)
let  %50	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 62 : Int)
let  %49	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 75 : Int)
let  %48	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 74 : Int)
let  %47	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 73 : Int)
let  %46	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 72 : Int)
let  %45	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 71 : Int)
let  %44	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 70 : Int)
let  %43	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 69 : Int)
let  %42	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 68 : Int)
let  %41	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 67 : Int)
let  %40	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 66 : Int)
let  %39	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 65 : Int)
let  %38	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 64 : Int)
let  %37	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 63 : Int)
let  %36	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 62 : Int)
let  %35	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 75 : Int)
let  %34	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 74 : Int)
let  %33	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 73 : Int)
let  %32	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 72 : Int)
let  %31	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 71 : Int)
let  %30	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 70 : Int)
let  %29	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 69 : Int)
let  %28	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 68 : Int)
let  %27	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 67 : Int)
let  %26	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 66 : Int)
let  %25	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 65 : Int)
let  %24	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 64 : Int)
let  %23	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 63 : Int)
let  %22	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 62 : Int)
let  %21	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 75 : Int)
let  %20	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 74 : Int)
let  %19	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 73 : Int)
let  %18	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 72 : Int)
let  %17	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 71 : Int)
let  %16	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 70 : Int)
let  %15	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 69 : Int)
let  %14	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 68 : Int)
let  %13	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 67 : Int)
let  %12	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 66 : Int)
let  %11	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 65 : Int)
let  %10	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 64 : Int)
let  %9	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 63 : Int)
let  %8	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 62 : Int)
let  %5	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)	= thisTypeWitness
let  %120	: _	= interface_req_entry(%121, witness_table_t(%x5Fx5FBuiltinRealType))
let  %122	: _	= interface_req_entry(%6, witness_table_t(%IFloat))
let  %123	: _	= interface_req_entry(%124, Func(this_type(%x5Fx5FBuiltinFloatingPointType)))
let  %125	: _	= interface_req_entry(%126, Func(DiffPairUserCode(this_type(%x5Fx5FBuiltinFloatingPointType), %2)))
let  %127	: _	= interface_req_entry(%128, Func(Void, associated_type(%IDifferentiable)))
[treatAsDifferentiableDecoration]
[BuiltinDecoration]
[import("_ST4core26__BuiltinFloatingPointType")]
[nameHint("__BuiltinFloatingPointType")]
let  %x5Fx5FBuiltinFloatingPointType	: Type	= interface(%120, %122, %123, %125, %127)
[import("_S4core26__BuiltinFloatingPointTypeI4core17__BuiltinRealType")]
let  %121	: _	= key
let  %129	: _	= interface_req_entry(%130, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[import("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%129)
[import("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %130	: _	= key
let  %131	: _	= interface_req_entry(%132, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[import("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%131)
[import("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %132	: _	= key
let  %133	: _	= interface_req_entry(%134, witness_table_t(%x5Fx5FBuiltinType))
let  %135	: _	= interface_req_entry(%136, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[import("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%133, %135)
[import("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %134	: _	= key
[BuiltinDecoration]
[import("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
[import("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %136	: _	= key
let  %137	: _	= interface_req_entry(%138, witness_table_t(%IComparable))
let  %139	: _	= interface_req_entry(%140, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %141	: _	= interface_req_entry(%142, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %143	: _	= interface_req_entry(%144, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %145	: _	= interface_req_entry(%146, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %147	: _	= interface_req_entry(%148, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %149	: _	= interface_req_entry(%150, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
let  %151	: _	= interface_req_entry(%152, Func(this_type(%IArithmetic), Int))
let  %153	: _	= interface_req_entry(%154, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[import("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%137, %139, %141, %143, %145, %147, %149, %151, %153)
[import("_S4core11IArithmeticI4core11IComparable")]
let  %138	: _	= key
let  %155	: _	= interface_req_entry(%156, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
let  %157	: _	= interface_req_entry(%158, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
let  %159	: _	= interface_req_entry(%160, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[import("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%155, %157, %159)
[import("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %156	: _	= key
[import("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %158	: _	= key
[import("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %160	: _	= key
[import("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %140	: _	= key
[import("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %142	: _	= key
[import("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %144	: _	= key
[import("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %146	: _	= key
[import("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %148	: _	= key
[import("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %150	: _	= key
[import("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %152	: _	= key
[import("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %154	: _	= key
[import("_S4core26__BuiltinFloatingPointTypeI4core6IFloat")]
let  %6	: _	= key
let  %161	: _	= interface_req_entry(%162, witness_table_t(%IArithmetic))
let  %163	: _	= interface_req_entry(%4, witness_table_t(%IDifferentiable))
let  %164	: _	= interface_req_entry(%165, Func(this_type(%IFloat), Float))
let  %166	: _	= interface_req_entry(%167, Func(Float, this_type(%IFloat)))
let  %168	: _	= interface_req_entry(%169, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %170	: _	= interface_req_entry(%171, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %172	: _	= interface_req_entry(%173, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %174	: _	= interface_req_entry(%175, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %176	: _	= interface_req_entry(%177, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %178	: _	= interface_req_entry(%179, Func(this_type(%IFloat), this_type(%IFloat)))
let  %180	: _	= interface_req_entry(%181, Func(this_type(%IFloat), this_type(%IFloat)))
let  %182	: _	= interface_req_entry(%183, %184)
[import("_ST4core6IFloat")]
[nameHint("IFloat")]
let  %IFloat	: Type	= interface(%161, %163, %164, %166, %168, %170, %172, %174, %176, %178, %180, %182)
[import("_S4core6IFloatI4core11IArithmetic")]
let  %162	: _	= key
[import("_S4core6IFloatI4core15IDifferentiable")]
let  %4	: _	= key
let  %185	: _	= interface_req_entry(%186, associated_type(%IDifferentiable))
let  %187	: _	= interface_req_entry(%188, witness_table_t(%IDifferentiable))
let  %189	: _	= interface_req_entry(%190, Func(associated_type(%IDifferentiable)))
let  %191	: _	= interface_req_entry(%192, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
let  %193	: _	= interface_req_entry(%194, %195)
[import("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%185, %187, %189, %191, %193)
[import("_ST4core15IDifferentiable12Differential")]
let  %186	: _	= key
[import("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %188	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %190	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %192	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %194	: _	= key
generic %195	: Generic
{
block %196(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %197	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
[import("_S4core6IFloatR8_24xinitp1pi_f")]
let  %165	: _	= key
[import("_S4core6IFloat7toFloatp0pf")]
let  %167	: _	= key
[import("_S4core6IFloat3addp1pi_4core6IFloat4This4core6IFloat4This")]
let  %169	: _	= key
[import("_S4core6IFloat3subp1pi_4core6IFloat4This4core6IFloat4This")]
let  %171	: _	= key
[import("_S4core6IFloat3mulp1pi_4core6IFloat4This4core6IFloat4This")]
let  %173	: _	= key
[import("_S4core6IFloat3divp1pi_4core6IFloat4This4core6IFloat4This")]
let  %175	: _	= key
[import("_S4core6IFloat3modp1pi_4core6IFloat4This4core6IFloat4This")]
let  %177	: _	= key
[import("_S4core6IFloat3negp0p4core6IFloat4This")]
let  %179	: _	= key
[import("_S4core6IFloatR8_24xinitp1pi_4core6IFloat4This")]
let  %181	: _	= key
[import("_S4core6IFloat5scaleg2TC4core6IFloat1T4core26__BuiltinFloatingPointTypep1pi_4core6IFloat1T4core6IFloat4This")]
let  %183	: _	= key
generic %184	: Generic
{
block %198(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("IFloat.T")]
		param %IFloatx5FT	: type_t,
		param %199	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	return_val(Func(this_type(%IFloat), this_type(%IFloat), %IFloatx5FT))
}
[backwardDiffReference(%128)]
[fwdDerivative(%126)]
[StaticRequirementDecoration]
[import("_S4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %124	: _	= key
[StaticRequirementDecoration]
[import("_SFwdReq_4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %126	: _	= key
[StaticRequirementDecoration]
[import("_SBwdReq_4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %128	: _	= key
[export("_SWf4core13__BuiltinType")]
witness_table %200	: witness_table_t(%x5Fx5FBuiltinType)(Float);

[intrinsicOp(272 : Int)]
[method]
[import("_S4core5float6equalsp1pi_fb")]
[nameHint("float.equals")]
func %floatx5Fequals	: Func(Bool, Float, Float);

[intrinsicOp(275 : Int)]
[method]
[import("_S4core5float8lessThanp1pi_fb")]
[nameHint("float.lessThan")]
func %floatx5FlessThan	: Func(Bool, Float, Float);

[intrinsicOp(277 : Int)]
[method]
[import("_S4core5float16lessThanOrEqualsp1pi_fb")]
[nameHint("float.lessThanOrEquals")]
func %floatx5FlessThanOrEquals	: Func(Bool, Float, Float);

[export("_SWf4core11IComparable")]
witness_table %201	: witness_table_t(%IComparable)(Float)
{
	witness_table_entry(%156,%floatx5Fequals)

	witness_table_entry(%158,%floatx5FlessThan)

	witness_table_entry(%160,%floatx5FlessThanOrEquals)

}

[intrinsicOp(264 : Int)]
[method]
[import("_S4core5float3addp1pi_ff")]
[nameHint("float.add")]
func %floatx5Fadd	: Func(Float, Float, Float);

[intrinsicOp(265 : Int)]
[method]
[import("_S4core5float3subp1pi_ff")]
[nameHint("float.sub")]
func %floatx5Fsub	: Func(Float, Float, Float);

[intrinsicOp(266 : Int)]
[method]
[import("_S4core5float3mulp1pi_ff")]
[nameHint("float.mul")]
func %floatx5Fmul	: Func(Float, Float, Float);

[intrinsicOp(267 : Int)]
[method]
[import("_S4core5float3divp1pi_ff")]
[nameHint("float.div")]
func %floatx5Fdiv	: Func(Float, Float, Float);

[intrinsicOp(269 : Int)]
[method]
[import("_S4core5float3modp1pi_ff")]
[nameHint("float.mod")]
func %floatx5Fmod	: Func(Float, Float, Float);

[intrinsicOp(283 : Int)]
[method]
[import("_S4core5float3negp0pf")]
[nameHint("float.neg")]
func %floatx5Fneg	: Func(Float, Float);

[intrinsicOp(500 : Int)]
[method]
[import("_S4core5floatR8_24xinitp1pi_i")]
[nameHint("float.$init")]
func %floatx5Fx24init	: Func(Float, Int);

[intrinsicOp(0 : Int)]
[treatAsDifferentiableDecoration]
[method]
[import("_S4core5floatR8_24xinitp1pi_f")]
[nameHint("float.$init")]
func %floatx5Fx24init1	: Func(Float, Float);

[export("_SWf4core11IArithmetic")]
witness_table %202	: witness_table_t(%IArithmetic)(Float)
{
	witness_table_entry(%138,%201)

	witness_table_entry(%140,%floatx5Fadd)

	witness_table_entry(%142,%floatx5Fsub)

	witness_table_entry(%144,%floatx5Fmul)

	witness_table_entry(%146,%floatx5Fdiv)

	witness_table_entry(%148,%floatx5Fmod)

	witness_table_entry(%150,%floatx5Fneg)

	witness_table_entry(%152,%floatx5Fx24init)

	witness_table_entry(%154,%floatx5Fx24init1)

}

[export("_SWf4core23__BuiltinArithmeticType")]
witness_table %203	: witness_table_t(%x5Fx5FBuiltinArithmeticType)(Float)
{
	witness_table_entry(%134,%200)

	witness_table_entry(%136,%202)

}

[export("_SWf4core29__BuiltinSignedArithmeticType")]
witness_table %204	: witness_table_t(%x5Fx5FBuiltinSignedArithmeticType)(Float)
{
	witness_table_entry(%132,%203)

}

[export("_SWf4core17__BuiltinRealType")]
witness_table %205	: witness_table_t(%x5Fx5FBuiltinRealType)(Float)
{
	witness_table_entry(%130,%204)

}

[export("_SWf4core11IComparable")]
witness_table %206	: witness_table_t(%IComparable)(Float)
{
	witness_table_entry(%156,%floatx5Fequals)

	witness_table_entry(%158,%floatx5FlessThan)

	witness_table_entry(%160,%floatx5FlessThanOrEquals)

}

[export("_SWf4core11IArithmetic")]
witness_table %207	: witness_table_t(%IArithmetic)(Float)
{
	witness_table_entry(%138,%206)

	witness_table_entry(%140,%floatx5Fadd)

	witness_table_entry(%142,%floatx5Fsub)

	witness_table_entry(%144,%floatx5Fmul)

	witness_table_entry(%146,%floatx5Fdiv)

	witness_table_entry(%148,%floatx5Fmod)

	witness_table_entry(%150,%floatx5Fneg)

	witness_table_entry(%152,%floatx5Fx24init)

	witness_table_entry(%154,%floatx5Fx24init1)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[import("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %208:
	return_val(0 : Float)
}
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[import("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %209(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %210	: Float	= add(%a, %b)
	return_val(%210)
}
generic %211	: Generic
{
block %212(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %213	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %1), Float))
}
[import("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %214	: %211
{
block %215(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %216	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %1), Float)
	{
block %217(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %1),
			[nameHint("b")]
			param %b1	: Float):
		let  %218	: Float	= floatCast(%a1)
		let  %219	: Float	= mul(%218, %b1)
		return_val(%219)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %220	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%186,Float)

	witness_table_entry(%188,%220)

	witness_table_entry(%190,%floatx5Fdzero)

	witness_table_entry(%192,%floatx5Fdadd)

	witness_table_entry(%194,%214)

}

[intrinsicOp(499 : Int)]
[method]
[import("_S4core5float7toFloatp0pf")]
[nameHint("float.toFloat")]
func %floatx5FtoFloat	: Func(Float, Float);

generic %221	: Generic
{
block %222(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("float.T")]
		param %floatx5FT	: type_t,
		param %223	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	return_val(Func(Float, Float, %floatx5FT))
}
[import("_S4core5float5scaleg2TC4core5float1T4core26__BuiltinFloatingPointTypep1pi_4core5float1Tf")]
generic %224	: %221
{
block %225(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("float.T")]
		param %floatx5FT1	: type_t,
		param %226	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	[intrinsicOp(266 : Int)]
	[nameHint("float.scale")]
		func %floatx5Fscale	: Func(Float, Float, %floatx5FT1);

	return_val(%floatx5Fscale)
}
[export("_SWf4core6IFloat")]
witness_table %227	: witness_table_t(%IFloat)(Float)
{
	witness_table_entry(%162,%207)

	witness_table_entry(%4,%220)

	witness_table_entry(%165,%floatx5Fx24init1)

	witness_table_entry(%167,%floatx5FtoFloat)

	witness_table_entry(%169,%floatx5Fadd)

	witness_table_entry(%171,%floatx5Fsub)

	witness_table_entry(%173,%floatx5Fmul)

	witness_table_entry(%175,%floatx5Fdiv)

	witness_table_entry(%177,%floatx5Fmod)

	witness_table_entry(%179,%floatx5Fneg)

	witness_table_entry(%181,%floatx5Fx24init1)

	witness_table_entry(%183,%224)

}

[export("_SWi4core13__BuiltinType")]
witness_table %228	: witness_table_t(%x5Fx5FBuiltinType)(Int);

[intrinsicOp(272 : Int)]
[method]
[import("_S4core3int6equalsp1pi_ib")]
[nameHint("int.equals")]
func %intx5Fequals	: Func(Bool, Int, Int);

[intrinsicOp(275 : Int)]
[method]
[import("_S4core3int8lessThanp1pi_ib")]
[nameHint("int.lessThan")]
func %intx5FlessThan	: Func(Bool, Int, Int);

[intrinsicOp(277 : Int)]
[method]
[import("_S4core3int16lessThanOrEqualsp1pi_ib")]
[nameHint("int.lessThanOrEquals")]
func %intx5FlessThanOrEquals	: Func(Bool, Int, Int);

[export("_SWi4core11IComparable")]
witness_table %229	: witness_table_t(%IComparable)(Int)
{
	witness_table_entry(%156,%intx5Fequals)

	witness_table_entry(%158,%intx5FlessThan)

	witness_table_entry(%160,%intx5FlessThanOrEquals)

}

[intrinsicOp(264 : Int)]
[method]
[import("_S4core3int3addp1pi_ii")]
[nameHint("int.add")]
func %intx5Fadd	: Func(Int, Int, Int);

[intrinsicOp(265 : Int)]
[method]
[import("_S4core3int3subp1pi_ii")]
[nameHint("int.sub")]
func %intx5Fsub	: Func(Int, Int, Int);

[intrinsicOp(266 : Int)]
[method]
[import("_S4core3int3mulp1pi_ii")]
[nameHint("int.mul")]
func %intx5Fmul	: Func(Int, Int, Int);

[intrinsicOp(267 : Int)]
[method]
[import("_S4core3int3divp1pi_ii")]
[nameHint("int.div")]
func %intx5Fdiv	: Func(Int, Int, Int);

[intrinsicOp(268 : Int)]
[method]
[import("_S4core3int3modp1pi_ii")]
[nameHint("int.mod")]
func %intx5Fmod	: Func(Int, Int, Int);

[intrinsicOp(283 : Int)]
[method]
[import("_S4core3int3negp0pi")]
[nameHint("int.neg")]
func %intx5Fneg	: Func(Int, Int);

[intrinsicOp(0 : Int)]
[method]
[import("_S4core3intR8_24xinitp1pi_i")]
[nameHint("int.$init")]
func %intx5Fx24init	: Func(Int, Int);

[export("_SWi4core11IArithmetic")]
witness_table %230	: witness_table_t(%IArithmetic)(Int)
{
	witness_table_entry(%138,%229)

	witness_table_entry(%140,%intx5Fadd)

	witness_table_entry(%142,%intx5Fsub)

	witness_table_entry(%144,%intx5Fmul)

	witness_table_entry(%146,%intx5Fdiv)

	witness_table_entry(%148,%intx5Fmod)

	witness_table_entry(%150,%intx5Fneg)

	witness_table_entry(%152,%intx5Fx24init)

	witness_table_entry(%154,%intx5Fx24init)

}

[export("_SWi4core23__BuiltinArithmeticType")]
witness_table %231	: witness_table_t(%x5Fx5FBuiltinArithmeticType)(Int)
{
	witness_table_entry(%134,%228)

	witness_table_entry(%136,%230)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %232(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%233, %234, %235, %y, 0 : Int)

block %233(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %236	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%236, %237, %234, %237)

block %237:
	let  %238	: Float	= mul(%t, %t)
	unconditionalBranch(%235)

block %235:
	let  %239	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%233, %238, %239)

block %234:
	return_val(%t)
}
[import("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[import("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %240	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %240)	= global_param
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %241(
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %220))	= var
	let  %242	: DiffPairUserCode(Float, %220)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %242)
	let  %243	: Func(Void, InOut(DiffPairUserCode(Float, %220)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %243(%dpa, 1 : Float)
	let  %244	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %245	: DiffPairUserCode(Float, %220)	= load(%dpa)
	let  %246	: Float	= GetDifferentialUserCode(%245)
	store(%244, %246)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %220))	= var
	let  %247	: DiffPairUserCode(Float, %220)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %247)
	let  %248	: Func(Void, InOut(DiffPairUserCode(Float, %220)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %248(%dpa1, 1 : Float)
	let  %249	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %250	: DiffPairUserCode(Float, %220)	= load(%dpa1)
	let  %251	: Float	= GetDifferentialUserCode(%250)
	store(%249, %251)
	return_val(void_constant)
}
###
### POST IR VALIDATION:
varLayout(%1)
let  %1	: Void	= structTypeLayout(%2)
let  %2	: Void	= fieldLayout(%outputBuffer, %3)
let  %3	: Void	= varLayout(%4, %5)
let  %5	: Void	= offset(9 : Int, 0 : Int)
let  %4	: Void	= structuredBufferTypeLayout(%6, %7)
let  %7	: Void	= size(9 : Int, 1 : Int)
let  %6	: Void	= typeLayout(%8)
let  %8	: Void	= size(8 : Int, 4 : Int)
let  %9	: Void	= no_diff
let  %10	: Void	= EntryPointLayout(%11, %12)
let  %12	: Void	= varLayout(%13)
let  %11	: Void	= varLayout(%14)
let  %14	: Void	= structTypeLayout(%15)
let  %15	: Void	= fieldLayout(%16, %17)
let  %17	: Void	= varLayout(%13, %18, %19)
let  %19	: Void	= stage(6 : Int)
let  %18	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %13	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %16	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
let  %27	: _	= interface_req_entry(%26, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %28	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %29	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %30	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %31	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %32	: _	= interface_req_entry(%31, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %33	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %34	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %39	: _	= key
let  %40	: _	= interface_req_entry(%39, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%36, %38, %40)
let  %41	: _	= interface_req_entry(%34, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %56	: _	= key
let  %57	: _	= interface_req_entry(%56, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%41, %43, %45, %47, %49, %51, %53, %55, %57)
let  %58	: _	= interface_req_entry(%33, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%32, %58)
let  %59	: _	= interface_req_entry(%30, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%59)
let  %60	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%60)
generic %61	: Generic
{
block %62(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %63	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %64	: _	= interface_req_entry(%28, %61)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%21, %23, %25, %27, %64)
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %65:
	return_val(0 : Float)
}
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %66(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %67	: Float	= add(%a, %b)
	return_val(%67)
}
generic %68	: Generic
{
block %69(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %70	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %9), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %71	: %68
{
block %72(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %73	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %9), Float)
	{
block %74(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %9),
			[nameHint("b")]
			param %b1	: Float):
		let  %75	: Float	= floatCast(%a1)
		let  %76	: Float	= mul(%75, %b1)
		return_val(%76)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %77	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%20,Float)

	witness_table_entry(%22,%77)

	witness_table_entry(%24,%floatx5Fdzero)

	witness_table_entry(%26,%floatx5Fdadd)

	witness_table_entry(%28,%71)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %78(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%79, %80, %81, %y, 0 : Int)

block %79(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %82	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%82, %83, %80, %83)

block %83:
	let  %84	: Float	= mul(%t, %t)
	unconditionalBranch(%81)

block %81:
	let  %85	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%79, %84, %85)

block %80:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %86	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%3)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %86)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%10)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %87(
		[layout(%17)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %77))	= var
	let  %88	: DiffPairUserCode(Float, %77)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %88)
	let  %89	: Func(Void, InOut(DiffPairUserCode(Float, %77)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %89(%dpa, 1 : Float)
	let  %90	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %91	: DiffPairUserCode(Float, %77)	= load(%dpa)
	let  %92	: Float	= GetDifferentialUserCode(%91)
	store(%90, %92)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %77))	= var
	let  %93	: DiffPairUserCode(Float, %77)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %93)
	let  %94	: Func(Void, InOut(DiffPairUserCode(Float, %77)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %94(%dpa1, 1 : Float)
	let  %95	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %96	: DiffPairUserCode(Float, %77)	= load(%dpa1)
	let  %97	: Float	= GetDifferentialUserCode(%96)
	store(%95, %97)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %98:
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %100(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %101	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%101)
}
generic %102	: Generic
{
block %103(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %104	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %9), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %105	: %102
{
block %106(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %107	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %9), %NullDifferential)
	{
block %108(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %9),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %109	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%109)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %110	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%20,%NullDifferential)

	witness_table_entry(%22,%110)

	witness_table_entry(%24,%NullDifferentialx5Fdzero)

	witness_table_entry(%26,%NullDifferentialx5Fdadd)

	witness_table_entry(%28,%105)

}

###
### BEFORE-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

###
### AFTER-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE PRIMAL
BACKWARD DIFFERENTIATE PROPOGATE
(result before eliminating phis)===============================
inst with location: 1515366 (1)
[nameHint("y")]
let  %y	: Float	= param

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %y, 0 : Int)

inst with location: 1515406 (1)
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[nameHint("i")]
let  %i	: Int	= param

inst with location: 1515420 (1)
loop(%1, %2, %1)

inst with location: 1515438 (1)
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 1515420 (1)
ifElse(%1, %2, %3, %2)

inst with location: 1515420 (1)
unconditionalBranch(%1)

inst with location: 1515470 (1)
let  %1	: Float	= mul(%t, %t)

inst with location: 1515420 (1)
unconditionalBranch(%1)

inst with location: 1515420 (1)
unconditionalBranch(%1)

inst with location: 1515444 (1)
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 1515420 (1)
unconditionalBranch(%1, %2, %3)

inst with location: 1515489 (1)
return_val(%t)

(fwdDiffFunc from generateNewForwardDerivative)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[forwardDifferentiable]
[nameHint("s_fwd_test_simple_loop")]
func %sx5Ffwdx5Ftestx5Fsimplex5Floop	: Func(DiffPair(Float, %1), DiffPair(Float, %1))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	[diffInstDecoration(Float)]
	let  %3	: Float	= GetDifferential(%dpy)
	[primalInstDecoration]
	let  %4	: Float	= GetPrimal(%dpy)
	[mixedDiffInstDecoration(<null>)]
	[loopMaxIters(4 : Int)]
	loop(%5, %6, %5, true, %4, %3, 0 : Int)

block %5(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag, %7, %8, %7)

block %8:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%6)

block %6:
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	let  %9	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	return_val(%9)

block %7:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%10)

block %10:
	[primalInstDecoration]
	let  %11	: Bool	= cmpLT(%i, 3 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%11, %12, %13, %14)

block %13:
	[diffInstDecoration(Float)]
	let  %15	: Float	= call %floatx5Fdzero()
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 0 : Int, 0 : Float, %15)

block %12:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	[diffInstDecoration(Float)]
	let  %17	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %18	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %19	: Float	= add(%17, %18)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 1 : Int, %16, %19)

block %14(
		[primalInstDecoration]
		param %20	: Int,
		[primalInstDecoration]
		param %21	: Float,
		[diffInstDecoration(Float)]
		param %22	: Float):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%23)

block %23:
	[primalInstDecoration]
	let  %24	: Bool	= cmpNE(%20, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%24, %25, %26, %27)

block %26:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, %x5Fbflag)

block %25:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, false)

block %27(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%28)

block %28:
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag1, %29, %30, %31)

block %30:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %t, %sx5Fdiffx5Ft, %i)

block %29:
	[primalInstDecoration]
	let  %32	: Int	= add(%i, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %21, %22, %32)

block %31(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%5, %x5Fbflag1, %t1, %sx5Fdiffx5Ft1, %i1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 1515366 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= GetDifferential(%dpy)

inst with location: 1515366 (1)
[primalInstDecoration]
let  %1	: Float	= GetPrimal(%dpy)

inst with location: 1515420 (1)
[mixedDiffInstDecoration(<null>)]
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, %4, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
let  %2	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 1515489 (1)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
return_val(%2)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 1515438 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 0 : Int, 0 : Float, %2)

inst with location: 1515470 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515470 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 1 : Int, %2, %3)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %t, %sx5Fdiffx5Ft, %i)

inst with location: 1515444 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %2, %3, %4)

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag, %t, %sx5Fdiffx5Ft, %i)

(diffPropagateFunc after unzipping)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop));


(unzipDiffInsts)===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515438 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515470 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515444 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515470 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(diffPropagateFunc moving blocks)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	let  %3	: Float	= PrimalParamRef(%dpy)
	[diffInstDecoration(Float)]
	let  %4	: Float	= DiffParamRef(%dpy)
	unconditionalBranch(%5)

block %5:
	[loopMaxIters(4 : Int)]
	loop(%6, %7, %6, true, %3, 0 : Int)

block %6(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	ifElse(%x5Fbflag, %8, %9, %8)

block %9:
	unconditionalBranch(%7)

block %7:
	[BackwardDerivativePrimalReturnDecoration(%t)]
	unconditionalBranch(%10)

block %8:
	unconditionalBranch(%11)

block %11:
	[primalInstDecoration]
	let  %12	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%12, %13, %14, %15)

block %14:
	unconditionalBranch(%15, 0 : Int, 0 : Float)

block %13:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	unconditionalBranch(%15, 1 : Int, %16)

block %15(
		[primalInstDecoration]
		param %17	: Int,
		[primalInstDecoration]
		param %18	: Float):
	unconditionalBranch(%19)

block %19:
	[primalInstDecoration]
	let  %20	: Bool	= cmpNE(%17, 1 : Int)
	ifElse(%20, %21, %22, %23)

block %22:
	unconditionalBranch(%23, %x5Fbflag)

block %21:
	unconditionalBranch(%23, false)

block %23(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%24)

block %24:
	ifElse(%x5Fbflag1, %25, %26, %27)

block %26:
	unconditionalBranch(%27, %t, %i)

block %25:
	[primalInstDecoration]
	let  %28	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%27, %18, %28)

block %27(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	unconditionalBranch(%6, %x5Fbflag1, %t1, %i1)

block %10:
	[loopMaxIters(4 : Int)]
	loop(%29, %30, %29, %4)

block %29(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float):
	ifElse(%x5Fbflag, %31, %32, %31)

block %32:
	unconditionalBranch(%30)

block %30:
	[diffInstDecoration(Float)]
	let  %33	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[diffInstDecoration(Float)]
	return_val(%33)

block %31:
	unconditionalBranch(%34)

block %34:
	ifElse(%12, %35, %36, %37)

block %36:
	[diffInstDecoration(Float)]
	let  %38	: Float	= call %floatx5Fdzero()
	unconditionalBranch(%37, %38)

block %35:
	[diffInstDecoration(Float)]
	let  %39	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %40	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %41	: Float	= add(%39, %40)
	unconditionalBranch(%37, %41)

block %37(
		[diffInstDecoration(Float)]
		param %42	: Float):
	unconditionalBranch(%43)

block %43:
	ifElse(%20, %44, %45, %46)

block %45:
	unconditionalBranch(%46)

block %44:
	unconditionalBranch(%46)

block %46:
	unconditionalBranch(%47)

block %47:
	ifElse(%x5Fbflag1, %48, %49, %50)

block %49:
	unconditionalBranch(%50, %sx5Fdiffx5Ft)

block %48:
	unconditionalBranch(%50, %42)

block %50(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float):
	unconditionalBranch(%29, %sx5Fdiffx5Ft1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515438 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515470 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515444 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515470 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1515406 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(applyCheckpointPolicy) ===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: Float	= param

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

inst with location: 0 (0)
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

inst with location: 0 (0)
[nameHint("_s_diff_ctx")]
let  %x5Fsx5Fdiffx5Fctx	: BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop)	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
[keepAlive]
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515420 (1)
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %2)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Void, %1)]
[loopMaxIters(4 : Int)]
loop(%2, %3, %4)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%3, %4)

inst with location: 0 (0)
store(%dpy, %1)

inst with location: 0 (0)
return_val(void_constant)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515438 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515470 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515444 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515429 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

Adding counter for primalLoop:
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

  > sourceLoc: 1515420 (1)
>> Counter for primalLoop:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

  > sourceLoc: 1515420 (1)
### Slang::AutodiffCheckpointPolicyBase::processFunc
processing workList
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7D622580 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515406 (1)
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7D622580 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515406 (1)
use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

use with usedVal:
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

use with usedVal:
[primalInstDecoration]
let  %1	: Int	= param

use with usedVal:
0

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7A2E3BC0 to storeSet
0
inst with location: 0 (0)
use with usedVal:
1

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7A2E3790 to storeSet
1
inst with location: 0 (0)
use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7D617730 to storeSet

inst with location: 0 (0)
use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000013A7D62D8C8 to storeSet
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

inst with location: 1515420 (1)
use with usedVal:
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

****** (before legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1515406 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

source loc recorded: 1515420 (1)
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

****** ensureInstAvailable
ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

>> LOOP COUNTER!
% localVar:
let  %1	: Ptr(Int)	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

% localVar:
let  %1	: Ptr(Array(Float, 5 : Int))	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Int	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%2, 3 : Int)

>> NO OUT OF SCOPE USES
****** (after legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1515420 (1)
let  %1	: Ptr(Int)	= var

tests/autodiff/reverse-loop.slang(16): note: also see pipeline definition
    for (int i = 0; i < 3; i++)
    ^~~
source loc recorded: 1515406 (1)
let  %1	: Ptr(Array(Float, 5 : Int))	= var

tests/autodiff/reverse-loop.slang(14): note: also see pipeline definition
    float t = y;
          ^
in unzipping function:
createIntermediate type:
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type;


### AFTER-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

###
### BEFORE-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

###
### AFTER-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[derivativeMemberDecoration(%151)]
let  %119	: _	= key
let  %124	: _	= key
struct %152	: Type
{
	field(%151, Array(Float, 5 : Int))
}

func %153	: Func(%152)
{
block %154:
	let  %155	: Array(Float, 5 : Int)	= call %156()
	let  %157	: %152	= makeStruct(%155)
	return_val(%157)
}
func %158	: Func(%152)
{
block %159(
		param %160	: %152,
		param %161	: %152):
	let  %162	: Array(Float, 5 : Int)	= get_field(%160, %151)
	let  %163	: Array(Float, 5 : Int)	= get_field(%161, %151)
	let  %164	: Array(Float, 5 : Int)	= call %165(%162, %163)
	let  %166	: %152	= makeStruct(%164)
	return_val(%166)
}
witness_table %167	: witness_table_t(%IDifferentiable)(%152)
{
	witness_table_entry(%18,%152)

	witness_table_entry(%20,%167)

	witness_table_entry(%22,%153)

	witness_table_entry(%24,%158)

}

witness_table %168	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%152)

	witness_table_entry(%20,%167)

	witness_table_entry(%22,%153)

	witness_table_entry(%24,%158)

}

[derivativeMemberDecoration(%151)]
let  %151	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%169)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %170(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%171)

block %171:
	let  %172	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %173	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %174	: Ptr(Array(Float, 5 : Int))	= var
	store(%174, %173)
	store(%174, %172)
	let  %175	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %176	: Ptr(Int)	= var
	store(%176, %175)
	store(%176, 0 : Int)
	let  %177	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %178	: Float	= GetPrimalUserCode(%177)
	unconditionalBranch(%179)

block %179:
	[loopMaxIters(4 : Int)]
	loop(%180, %181, %180, true, %178, 0 : Int, 0 : Int)

block %180(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t3	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i3	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %182	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %183	: Ptr(Array(Float, 5 : Int))	= var
	store(%183, %182)
	let  %184	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%183, %x5Fpc1)
	store(%184, %t3)
	let  %185	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %186	: Ptr(Int)	= var
	store(%186, %185)
	store(%186, %x5Fpc1)
	ifElse(%x5Fbflag2, %187, %188, %187)

block %188:
	unconditionalBranch(%181)

block %181:
	unconditionalBranch(%189)

block %189:
	unconditionalBranch(%190)

block %190:
	unconditionalBranch(%191)

block %191:
	unconditionalBranch(%192)

block %192:
	unconditionalBranch(%193)

block %193:
	let  %194	: Ptr(Float)	= var
	store(%194, 0 : Float)
	let  %195	: Ptr(Float)	= var
	store(%195, 0 : Float)
	let  %196	: Float	= load(%194)
	let  %197	: Float	= add(%x5Fsx5FdOut, %196)
	store(%194, %197)
	unconditionalBranch(%198)

block %198:
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Int	= sub(%199, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%201, %202, %203, %200)

block %201(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %204	: Int	= add(%x5Fdc, 0 : Int)
	let  %205	: Float	= load(%194)
	store(%194, 0 : Float)
	let  %206	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%206, %207, %208, %207)

block %208:
	unconditionalBranch(%202, %205)

block %202(
		param %209	: Float):
	let  %210	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %211	: Float	= GetPrimalUserCode(%210)
	let  %212	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%211, %209)
	store(%dpy1, %212)
	return_val(void_constant)

block %207:
	unconditionalBranch(%213)

block %213:
	[primalInstDecoration]
	let  %214	: Bool	= cmpLT(%204, 3 : Int)
	ifElse(%214, %215, %216, %217)

block %216:
	unconditionalBranch(%217, 0 : Int)

block %215:
	unconditionalBranch(%217, 1 : Int)

block %217(
		[primalInstDecoration]
		param %218	: Int):
	unconditionalBranch(%219)

block %219:
	[primalInstDecoration]
	let  %220	: Bool	= cmpNE(%218, 1 : Int)
	ifElse(%220, %221, %222, %223)

block %222:
	unconditionalBranch(%223, true)

block %221:
	unconditionalBranch(%223, false)

block %223(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%224)

block %224:
	ifElse(%x5Fbflag3, %225, %226, %227)

block %226:
	unconditionalBranch(%227)

block %225:
	unconditionalBranch(%227)

block %227:
	unconditionalBranch(%228)

block %228:
	unconditionalBranch(%229, %205)

block %229(
		param %230	: Float):
	ifElse(%x5Fbflag3, %231, %232, %233)

block %232:
	unconditionalBranch(%234, %230)

block %234(
		param %235	: Float):
	let  %236	: Float	= load(%194)
	let  %237	: Float	= add(%235, %236)
	store(%194, %237)
	unconditionalBranch(%233)

block %231:
	unconditionalBranch(%238, %230)

block %238(
		param %239	: Float):
	let  %240	: Float	= load(%195)
	let  %241	: Float	= add(%239, %240)
	store(%195, %241)
	unconditionalBranch(%233)

block %233:
	unconditionalBranch(%242)

block %242:
	ifElse(%220, %243, %244, %245)

block %244:
	unconditionalBranch(%245)

block %243:
	unconditionalBranch(%245)

block %245:
	unconditionalBranch(%246)

block %246:
	let  %247	: Float	= load(%195)
	store(%195, 0 : Float)
	ifElse(%214, %248, %249, %250)

block %249:
	unconditionalBranch(%251)

block %251:
	unconditionalBranch(%250)

block %248:
	unconditionalBranch(%252, %247)

block %252(
		param %253	: Float):
	let  %254	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %255	: Ptr(Array(Float, 5 : Int))	= var
	store(%255, %254)
	let  %256	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%255, %x5Fdc)
	let  %257	: Float	= load(%256)
	let  %258	: Float	= mul(%257, %253)
	let  %259	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %260	: Ptr(Array(Float, 5 : Int))	= var
	store(%260, %259)
	let  %261	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%260, %x5Fdc)
	let  %262	: Float	= load(%261)
	let  %263	: Float	= mul(%262, %253)
	let  %264	: Float	= load(%194)
	let  %265	: Float	= add(%258, %263)
	let  %266	: Float	= add(%265, %264)
	store(%194, %266)
	unconditionalBranch(%250)

block %250:
	unconditionalBranch(%203)

block %203:
	[primalInstDecoration]
	let  %267	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%201, %267)

block %187:
	unconditionalBranch(%268)

block %268:
	[primalInstDecoration]
	let  %269	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%269, %270, %271, %272)

block %271:
	unconditionalBranch(%272, 0 : Int, 0 : Float)

block %270:
	[primalInstDecoration]
	let  %273	: Float	= mul(%t3, %t3)
	unconditionalBranch(%272, 1 : Int, %273)

block %272(
		[primalInstDecoration]
		param %274	: Int,
		[primalInstDecoration]
		param %275	: Float):
	unconditionalBranch(%276)

block %276:
	[primalInstDecoration]
	let  %277	: Bool	= cmpNE(%274, 1 : Int)
	ifElse(%277, %278, %279, %280)

block %279:
	unconditionalBranch(%280, %x5Fbflag2)

block %278:
	unconditionalBranch(%280, false)

block %280(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool):
	unconditionalBranch(%281)

block %281:
	ifElse(%x5Fbflag4, %282, %283, %284)

block %283:
	unconditionalBranch(%284, %t3, %i3)

block %282:
	[primalInstDecoration]
	let  %285	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%284, %275, %285)

block %284(
		[primalInstDecoration]
		[nameHint("t")]
		param %t4	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i4	: Int):
	[primalInstDecoration]
	let  %286	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%180, %x5Fbflag4, %t4, %i4, %286)
}
[backwardDifferentiable]
func %165	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %287(
		param %288	: Array(Float, 5 : Int),
		param %289	: Array(Float, 5 : Int)):
	let  %290	: Ptr(Array(Float, 5 : Int))	= var
	loop(%291, %292, %291, 0 : Int)

block %291(
		param %293	: Int):
	let  %294	: Bool	= cmpLT(%293, 5 : Int)
	ifElse(%294, %295, %296, %296)

block %295:
	let  %297	: Float	= getElement(%288, %293)
	let  %298	: Float	= getElement(%289, %293)
	let  %299	: Float	= add(%297, %298)
	let  %300	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%290, %293)
	store(%300, %299)
	unconditionalBranch(%301)

block %296:
	unconditionalBranch(%292)

block %292:
	let  %302	: Array(Float, 5 : Int)	= load(%290)
	return_val(%302)

block %301:
	let  %303	: Int	= add(%293, 1 : Int)
	unconditionalBranch(%291, %303)
}
func %156	: Func(Array(Float, 5 : Int))
{
block %304:
	let  %305	: Array(Float, 5 : Int)	= makeArrayFromElement(0 : Float)
	return_val(%305)
}
witness_table %169	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%169)

	witness_table_entry(%24,%165)

	witness_table_entry(%22,%156)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### AFTER-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[derivativeMemberDecoration(%151)]
let  %119	: _	= key
let  %124	: _	= key
struct %152	: Type
{
	field(%151, Array(Float, 5 : Int))
}

func %153	: Func(%152)
{
block %154:
	let  %155	: Array(Float, 5 : Int)	= call %156()
	let  %157	: %152	= makeStruct(%155)
	return_val(%157)
}
func %158	: Func(%152)
{
block %159(
		param %160	: %152,
		param %161	: %152):
	let  %162	: Array(Float, 5 : Int)	= get_field(%160, %151)
	let  %163	: Array(Float, 5 : Int)	= get_field(%161, %151)
	let  %164	: Array(Float, 5 : Int)	= call %165(%162, %163)
	let  %166	: %152	= makeStruct(%164)
	return_val(%166)
}
witness_table %167	: witness_table_t(%IDifferentiable)(%152)
{
	witness_table_entry(%18,%152)

	witness_table_entry(%20,%167)

	witness_table_entry(%22,%153)

	witness_table_entry(%24,%158)

}

witness_table %168	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%152)

	witness_table_entry(%20,%167)

	witness_table_entry(%22,%153)

	witness_table_entry(%24,%158)

}

[derivativeMemberDecoration(%151)]
let  %151	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%169)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %170(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%171)

block %171:
	let  %172	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %173	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %174	: Ptr(Array(Float, 5 : Int))	= var
	store(%174, %173)
	store(%174, %172)
	let  %175	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %176	: Ptr(Int)	= var
	store(%176, %175)
	store(%176, 0 : Int)
	let  %177	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %178	: Float	= GetPrimalUserCode(%177)
	unconditionalBranch(%179)

block %179:
	[loopMaxIters(4 : Int)]
	loop(%180, %181, %180, true, %178, 0 : Int, 0 : Int)

block %180(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t3	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i3	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %182	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %183	: Ptr(Array(Float, 5 : Int))	= var
	store(%183, %182)
	let  %184	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%183, %x5Fpc1)
	store(%184, %t3)
	let  %185	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %186	: Ptr(Int)	= var
	store(%186, %185)
	store(%186, %x5Fpc1)
	ifElse(%x5Fbflag2, %187, %188, %187)

block %188:
	unconditionalBranch(%181)

block %181:
	unconditionalBranch(%189)

block %189:
	unconditionalBranch(%190)

block %190:
	unconditionalBranch(%191)

block %191:
	unconditionalBranch(%192)

block %192:
	unconditionalBranch(%193)

block %193:
	let  %194	: Ptr(Float)	= var
	store(%194, 0 : Float)
	let  %195	: Ptr(Float)	= var
	store(%195, 0 : Float)
	let  %196	: Float	= load(%194)
	let  %197	: Float	= add(%x5Fsx5FdOut, %196)
	store(%194, %197)
	unconditionalBranch(%198)

block %198:
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Int	= sub(%199, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%201, %202, %203, %200)

block %201(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %204	: Int	= add(%x5Fdc, 0 : Int)
	let  %205	: Float	= load(%194)
	store(%194, 0 : Float)
	let  %206	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%206, %207, %208, %207)

block %208:
	unconditionalBranch(%202, %205)

block %202(
		param %209	: Float):
	let  %210	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %211	: Float	= GetPrimalUserCode(%210)
	let  %212	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%211, %209)
	store(%dpy1, %212)
	return_val(void_constant)

block %207:
	unconditionalBranch(%213)

block %213:
	[primalInstDecoration]
	let  %214	: Bool	= cmpLT(%204, 3 : Int)
	ifElse(%214, %215, %216, %217)

block %216:
	unconditionalBranch(%217, 0 : Int)

block %215:
	unconditionalBranch(%217, 1 : Int)

block %217(
		[primalInstDecoration]
		param %218	: Int):
	unconditionalBranch(%219)

block %219:
	[primalInstDecoration]
	let  %220	: Bool	= cmpNE(%218, 1 : Int)
	ifElse(%220, %221, %222, %223)

block %222:
	unconditionalBranch(%223, true)

block %221:
	unconditionalBranch(%223, false)

block %223(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%224)

block %224:
	ifElse(%x5Fbflag3, %225, %226, %227)

block %226:
	unconditionalBranch(%227)

block %225:
	unconditionalBranch(%227)

block %227:
	unconditionalBranch(%228)

block %228:
	unconditionalBranch(%229, %205)

block %229(
		param %230	: Float):
	ifElse(%x5Fbflag3, %231, %232, %233)

block %232:
	unconditionalBranch(%234, %230)

block %234(
		param %235	: Float):
	let  %236	: Float	= load(%194)
	let  %237	: Float	= add(%235, %236)
	store(%194, %237)
	unconditionalBranch(%233)

block %231:
	unconditionalBranch(%238, %230)

block %238(
		param %239	: Float):
	let  %240	: Float	= load(%195)
	let  %241	: Float	= add(%239, %240)
	store(%195, %241)
	unconditionalBranch(%233)

block %233:
	unconditionalBranch(%242)

block %242:
	ifElse(%220, %243, %244, %245)

block %244:
	unconditionalBranch(%245)

block %243:
	unconditionalBranch(%245)

block %245:
	unconditionalBranch(%246)

block %246:
	let  %247	: Float	= load(%195)
	store(%195, 0 : Float)
	ifElse(%214, %248, %249, %250)

block %249:
	unconditionalBranch(%251)

block %251:
	unconditionalBranch(%250)

block %248:
	unconditionalBranch(%252, %247)

block %252(
		param %253	: Float):
	let  %254	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %255	: Ptr(Array(Float, 5 : Int))	= var
	store(%255, %254)
	let  %256	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%255, %x5Fdc)
	let  %257	: Float	= load(%256)
	let  %258	: Float	= mul(%257, %253)
	let  %259	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %260	: Ptr(Array(Float, 5 : Int))	= var
	store(%260, %259)
	let  %261	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%260, %x5Fdc)
	let  %262	: Float	= load(%261)
	let  %263	: Float	= mul(%262, %253)
	let  %264	: Float	= load(%194)
	let  %265	: Float	= add(%258, %263)
	let  %266	: Float	= add(%265, %264)
	store(%194, %266)
	unconditionalBranch(%250)

block %250:
	unconditionalBranch(%203)

block %203:
	[primalInstDecoration]
	let  %267	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%201, %267)

block %187:
	unconditionalBranch(%268)

block %268:
	[primalInstDecoration]
	let  %269	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%269, %270, %271, %272)

block %271:
	unconditionalBranch(%272, 0 : Int, 0 : Float)

block %270:
	[primalInstDecoration]
	let  %273	: Float	= mul(%t3, %t3)
	unconditionalBranch(%272, 1 : Int, %273)

block %272(
		[primalInstDecoration]
		param %274	: Int,
		[primalInstDecoration]
		param %275	: Float):
	unconditionalBranch(%276)

block %276:
	[primalInstDecoration]
	let  %277	: Bool	= cmpNE(%274, 1 : Int)
	ifElse(%277, %278, %279, %280)

block %279:
	unconditionalBranch(%280, %x5Fbflag2)

block %278:
	unconditionalBranch(%280, false)

block %280(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool):
	unconditionalBranch(%281)

block %281:
	ifElse(%x5Fbflag4, %282, %283, %284)

block %283:
	unconditionalBranch(%284, %t3, %i3)

block %282:
	[primalInstDecoration]
	let  %285	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%284, %275, %285)

block %284(
		[primalInstDecoration]
		[nameHint("t")]
		param %t4	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i4	: Int):
	[primalInstDecoration]
	let  %286	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%180, %x5Fbflag4, %t4, %i4, %286)
}
[backwardDifferentiable]
func %165	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %287(
		param %288	: Array(Float, 5 : Int),
		param %289	: Array(Float, 5 : Int)):
	let  %290	: Ptr(Array(Float, 5 : Int))	= var
	loop(%291, %292, %291, 0 : Int)

block %291(
		param %293	: Int):
	let  %294	: Bool	= cmpLT(%293, 5 : Int)
	ifElse(%294, %295, %296, %296)

block %295:
	let  %297	: Float	= getElement(%288, %293)
	let  %298	: Float	= getElement(%289, %293)
	let  %299	: Float	= add(%297, %298)
	let  %300	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%290, %293)
	store(%300, %299)
	unconditionalBranch(%301)

block %296:
	unconditionalBranch(%292)

block %292:
	let  %302	: Array(Float, 5 : Int)	= load(%290)
	return_val(%302)

block %301:
	let  %303	: Int	= add(%293, 1 : Int)
	unconditionalBranch(%291, %303)
}
func %156	: Func(Array(Float, 5 : Int))
{
block %304:
	let  %305	: Array(Float, 5 : Int)	= makeArrayFromElement(0 : Float)
	return_val(%305)
}
witness_table %169	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%169)

	witness_table_entry(%24,%165)

	witness_table_entry(%22,%156)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-LOWER-GENERICS:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
[nameHint("DiffPair_float")]
struct %DiffPairx5Ffloat	: Type
{
	field(%primal, Float)
	field(%differential, Float)
}

let  %7	: Void	= EntryPointLayout(%8, %9)
let  %9	: Void	= varLayout(%10)
let  %8	: Void	= varLayout(%11)
let  %11	: Void	= structTypeLayout(%12)
let  %12	: Void	= fieldLayout(%13, %14)
let  %14	: Void	= varLayout(%10, %15, %16)
let  %16	: Void	= stage(6 : Int)
let  %15	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %10	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %13	: _	= key
[readNone]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %17(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%18, %19, %20, %y, 0 : Int)

block %18(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %21	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%21, %22, %19, %22)

block %19:
	return_val(%t)

block %22:
	let  %23	: Float	= mul(%t, %t)
	unconditionalBranch(%20)

block %20:
	let  %24	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%18, %23, %24)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %25	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %25)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%7)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %26(
		[layout(%14)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(%DiffPairx5Ffloat)	= var
	let  %27	: %DiffPairx5Ffloat	= makeStruct(1 : Float, 0 : Float)
	store(%dpa, %27)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %28	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %29	: %DiffPairx5Ffloat	= load(%dpa)
	let  %30	: Float	= get_field(%29, %differential)
	store(%28, %30)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(%DiffPairx5Ffloat)	= var
	let  %31	: %DiffPairx5Ffloat	= makeStruct(0.4 : Float, 0 : Float)
	store(%dpa1, %31)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %32	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %33	: %DiffPairx5Ffloat	= load(%dpa1)
	let  %34	: Float	= get_field(%33, %differential)
	store(%32, %34)
	return_val(void_constant)
}
[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float)
{
block %35(
		param %36	: InOut(%DiffPairx5Ffloat),
		param %37	: Float):
	let  %38	: %DiffPairx5Ffloat	= load(%36)
	let  %39	: Float	= get_field(%38, %primal)
	let  %40	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %41	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%39, %40)
	let  %42	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%40)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%36, %37, %42)
	return_val(void_constant)
}
[readNone]
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %43(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	let  %44	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %45	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= makeStruct(%44, 0 : Int)
	store(%x5Fsx5Fdiffx5Fctx, %45)
	let  %46	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %47)
	let  %48	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%46, %48)
	let  %49	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %50)
	store(%49, 0 : Int)
	[loopMaxIters(4 : Int)]
	loop(%51, %52, %51, true, %dpy, 0 : Int, 0 : Int)

block %51(
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[nameHint("t")]
		param %t1	: Float,
		[nameHint("i")]
		param %i1	: Int,
		[nameHint("_pc")]
		param %x5Fpc	: Int):
	let  %53	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%46, %x5Fpc)
	store(%53, %t1)
	store(%49, %x5Fpc)
	ifElse(%x5Fbflag, %54, %55, %54)

block %55:
	unconditionalBranch(%52)

block %52:
	return_val(%t1)

block %54:
	unconditionalBranch(%56)

block %56:
	let  %57	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%57, %58, %59, %60)

block %59:
	unconditionalBranch(%60, 0 : Int, 0 : Float)

block %58:
	let  %61	: Float	= mul(%t1, %t1)
	unconditionalBranch(%60, 1 : Int, %61)

block %60(
		param %62	: Int,
		param %63	: Float):
	unconditionalBranch(%64)

block %64:
	let  %65	: Bool	= cmpNE(%62, 1 : Int)
	ifElse(%65, %66, %67, %68)

block %67:
	unconditionalBranch(%68, %x5Fbflag)

block %66:
	unconditionalBranch(%68, false)

block %68(
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%69)

block %69:
	ifElse(%x5Fbflag1, %70, %71, %72)

block %71:
	unconditionalBranch(%72, %t1, %i1)

block %70:
	let  %73	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%72, %63, %73)

block %72(
		[nameHint("t")]
		param %t2	: Float,
		[nameHint("i")]
		param %i2	: Int):
	let  %74	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%51, %x5Fbflag1, %t2, %i2, %74)
}
let  %47	: _	= key
let  %50	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	field(%47, Array(Float, 5 : Int))
	field(%50, Int)
}

[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %75(
		[nameHint("dpy")]
		param %dpy1	: InOut(%DiffPairx5Ffloat),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	let  %76	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %77	: Float	= get_field(%76, %primal)
	[loopMaxIters(4 : Int)]
	loop(%78, %79, %78, true, %77, 0 : Int, 0 : Int)

block %78(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int,
		[nameHint("_pc")]
		param %x5Fpc1	: Int):
	let  %80	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %47)
	let  %81	: Ptr(Array(Float, 5 : Int))	= var
	store(%81, %80)
	let  %82	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%81, %x5Fpc1)
	store(%82, %t3)
	ifElse(%x5Fbflag2, %83, %84, %83)

block %84:
	unconditionalBranch(%79)

block %79:
	unconditionalBranch(%85)

block %85:
	let  %86	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %50)
	let  %87	: Int	= sub(%86, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%88, %89, %90, %87, %x5Fsx5FdOut)

block %88(
		[nameHint("_dc")]
		param %x5Fdc	: Int,
		param %91	: Float):
	let  %92	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%92, %93, %94, %93)

block %94:
	unconditionalBranch(%89)

block %89:
	let  %95	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %96	: Float	= get_field(%95, %primal)
	let  %97	: %DiffPairx5Ffloat	= makeStruct(%96, %91)
	store(%dpy1, %97)
	return_val(void_constant)

block %93:
	unconditionalBranch(%98)

block %98:
	let  %99	: Bool	= cmpLT(%x5Fdc, 3 : Int)
	ifElse(%99, %100, %101, %102)

block %101:
	unconditionalBranch(%102, 0 : Int)

block %100:
	unconditionalBranch(%102, 1 : Int)

block %102(
		param %103	: Int):
	unconditionalBranch(%104)

block %104:
	let  %105	: Bool	= cmpNE(%103, 1 : Int)
	let  %106	: Bool	= not(%105)
	ifElse(%106, %107, %108, %109)

block %108:
	unconditionalBranch(%109, 0 : Float, %91)

block %107:
	unconditionalBranch(%109, %91, 0 : Float)

block %109(
		param %110	: Float,
		param %111	: Float):
	unconditionalBranch(%112)

block %112:
	ifElse(%99, %113, %114, %115)

block %114:
	unconditionalBranch(%115, %111)

block %113:
	let  %116	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %47)
	let  %117	: Float	= getElement(%116, %x5Fdc)
	let  %118	: Float	= mul(%117, %110)
	let  %119	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %47)
	let  %120	: Float	= getElement(%119, %x5Fdc)
	let  %121	: Float	= mul(%120, %110)
	let  %122	: Float	= add(%118, %121)
	let  %123	: Float	= add(%122, %111)
	unconditionalBranch(%115, %123)

block %115(
		param %124	: Float):
	unconditionalBranch(%90)

block %90:
	let  %125	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%88, %125, %124)

block %83:
	unconditionalBranch(%126)

block %126:
	let  %127	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%127, %128, %129, %130)

block %129:
	unconditionalBranch(%130, 0 : Int, 0 : Float)

block %128:
	let  %131	: Float	= mul(%t3, %t3)
	unconditionalBranch(%130, 1 : Int, %131)

block %130(
		param %132	: Int,
		param %133	: Float):
	unconditionalBranch(%134)

block %134:
	let  %135	: Bool	= cmpNE(%132, 1 : Int)
	ifElse(%135, %136, %137, %138)

block %137:
	unconditionalBranch(%138, %x5Fbflag2)

block %136:
	unconditionalBranch(%138, false)

block %138(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%139)

block %139:
	ifElse(%x5Fbflag3, %140, %141, %142)

block %141:
	unconditionalBranch(%142, %t3, %i3)

block %140:
	let  %143	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%142, %133, %143)

block %142(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	let  %144	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%78, %x5Fbflag3, %t4, %i4, %144)
}
[nameHint("primal")]
let  %primal	: _	= key
[nameHint("differential")]
let  %differential	: _	= key
###
### AFTER-LOWER-GENERICS:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Vec(UInt, 2 : Int)	= makeVector(0 : UInt, 0 : UInt)
[nameHint("DiffPair_float")]
struct %DiffPairx5Ffloat	: Type
{
	field(%primal, Float)
	field(%differential, Float)
}

let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[readNone]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %18(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%19, %20, %21, %y, 0 : Int)

block %19(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %22	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%22, %23, %20, %23)

block %20:
	return_val(%t)

block %23:
	let  %24	: Float	= mul(%t, %t)
	unconditionalBranch(%21)

block %21:
	let  %25	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%19, %24, %25)
}
[SequentialIDDecoration(0 : UInt)]
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %26	: witness_table_t(0 : Int)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %7)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %27(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(%DiffPairx5Ffloat)	= var
	let  %28	: %DiffPairx5Ffloat	= makeStruct(1 : Float, 0 : Float)
	store(%dpa, %28)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %29	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %30	: %DiffPairx5Ffloat	= load(%dpa)
	let  %31	: Float	= get_field(%30, %differential)
	store(%29, %31)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(%DiffPairx5Ffloat)	= var
	let  %32	: %DiffPairx5Ffloat	= makeStruct(0.4 : Float, 0 : Float)
	store(%dpa1, %32)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %33	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %34	: %DiffPairx5Ffloat	= load(%dpa1)
	let  %35	: Float	= get_field(%34, %differential)
	store(%33, %35)
	return_val(void_constant)
}
[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float)
{
block %36(
		param %37	: InOut(%DiffPairx5Ffloat),
		param %38	: Float):
	let  %39	: %DiffPairx5Ffloat	= load(%37)
	let  %40	: Float	= get_field(%39, %primal)
	let  %41	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %42	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%40, %41)
	let  %43	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%41)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%37, %38, %43)
	return_val(void_constant)
}
[readNone]
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %44(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	let  %45	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %46	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= makeStruct(%45, 0 : Int)
	store(%x5Fsx5Fdiffx5Fctx, %46)
	let  %47	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %48)
	let  %49	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%47, %49)
	let  %50	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %51)
	store(%50, 0 : Int)
	[loopMaxIters(4 : Int)]
	loop(%52, %53, %52, true, %dpy, 0 : Int, 0 : Int)

block %52(
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[nameHint("t")]
		param %t1	: Float,
		[nameHint("i")]
		param %i1	: Int,
		[nameHint("_pc")]
		param %x5Fpc	: Int):
	let  %54	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%47, %x5Fpc)
	store(%54, %t1)
	store(%50, %x5Fpc)
	ifElse(%x5Fbflag, %55, %56, %55)

block %56:
	unconditionalBranch(%53)

block %53:
	return_val(%t1)

block %55:
	unconditionalBranch(%57)

block %57:
	let  %58	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%58, %59, %60, %61)

block %60:
	unconditionalBranch(%61, 0 : Int, 0 : Float)

block %59:
	let  %62	: Float	= mul(%t1, %t1)
	unconditionalBranch(%61, 1 : Int, %62)

block %61(
		param %63	: Int,
		param %64	: Float):
	unconditionalBranch(%65)

block %65:
	let  %66	: Bool	= cmpNE(%63, 1 : Int)
	ifElse(%66, %67, %68, %69)

block %68:
	unconditionalBranch(%69, %x5Fbflag)

block %67:
	unconditionalBranch(%69, false)

block %69(
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%70)

block %70:
	ifElse(%x5Fbflag1, %71, %72, %73)

block %72:
	unconditionalBranch(%73, %t1, %i1)

block %71:
	let  %74	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%73, %64, %74)

block %73(
		[nameHint("t")]
		param %t2	: Float,
		[nameHint("i")]
		param %i2	: Int):
	let  %75	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%52, %x5Fbflag1, %t2, %i2, %75)
}
let  %48	: _	= key
let  %51	: _	= key
[CheckpointIntermediateDecoration(%testx5Fsimplex5Floop)]
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	field(%48, Array(Float, 5 : Int))
	field(%51, Int)
}

[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %76(
		[nameHint("dpy")]
		param %dpy1	: InOut(%DiffPairx5Ffloat),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	let  %77	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %78	: Float	= get_field(%77, %primal)
	[loopMaxIters(4 : Int)]
	loop(%79, %80, %79, true, %78, 0 : Int, 0 : Int)

block %79(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int,
		[nameHint("_pc")]
		param %x5Fpc1	: Int):
	let  %81	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %48)
	let  %82	: Ptr(Array(Float, 5 : Int))	= var
	store(%82, %81)
	let  %83	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%82, %x5Fpc1)
	store(%83, %t3)
	ifElse(%x5Fbflag2, %84, %85, %84)

block %85:
	unconditionalBranch(%80)

block %80:
	unconditionalBranch(%86)

block %86:
	let  %87	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %51)
	let  %88	: Int	= sub(%87, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%89, %90, %91, %88, %x5Fsx5FdOut)

block %89(
		[nameHint("_dc")]
		param %x5Fdc	: Int,
		param %92	: Float):
	let  %93	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%93, %94, %95, %94)

block %95:
	unconditionalBranch(%90)

block %90:
	let  %96	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %97	: Float	= get_field(%96, %primal)
	let  %98	: %DiffPairx5Ffloat	= makeStruct(%97, %92)
	store(%dpy1, %98)
	return_val(void_constant)

block %94:
	unconditionalBranch(%99)

block %99:
	let  %100	: Bool	= cmpLT(%x5Fdc, 3 : Int)
	ifElse(%100, %101, %102, %103)

block %102:
	unconditionalBranch(%103, 0 : Int)

block %101:
	unconditionalBranch(%103, 1 : Int)

block %103(
		param %104	: Int):
	unconditionalBranch(%105)

block %105:
	let  %106	: Bool	= cmpNE(%104, 1 : Int)
	let  %107	: Bool	= not(%106)
	ifElse(%107, %108, %109, %110)

block %109:
	unconditionalBranch(%110, 0 : Float, %92)

block %108:
	unconditionalBranch(%110, %92, 0 : Float)

block %110(
		param %111	: Float,
		param %112	: Float):
	unconditionalBranch(%113)

block %113:
	ifElse(%100, %114, %115, %116)

block %115:
	unconditionalBranch(%116, %112)

block %114:
	let  %117	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %48)
	let  %118	: Float	= getElement(%117, %x5Fdc)
	let  %119	: Float	= mul(%118, %111)
	let  %120	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %48)
	let  %121	: Float	= getElement(%120, %x5Fdc)
	let  %122	: Float	= mul(%121, %111)
	let  %123	: Float	= add(%119, %122)
	let  %124	: Float	= add(%123, %112)
	unconditionalBranch(%116, %124)

block %116(
		param %125	: Float):
	unconditionalBranch(%91)

block %91:
	let  %126	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%89, %126, %125)

block %84:
	unconditionalBranch(%127)

block %127:
	let  %128	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%128, %129, %130, %131)

block %130:
	unconditionalBranch(%131, 0 : Int, 0 : Float)

block %129:
	let  %132	: Float	= mul(%t3, %t3)
	unconditionalBranch(%131, 1 : Int, %132)

block %131(
		param %133	: Int,
		param %134	: Float):
	unconditionalBranch(%135)

block %135:
	let  %136	: Bool	= cmpNE(%133, 1 : Int)
	ifElse(%136, %137, %138, %139)

block %138:
	unconditionalBranch(%139, %x5Fbflag2)

block %137:
	unconditionalBranch(%139, false)

block %139(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%140)

block %140:
	ifElse(%x5Fbflag3, %141, %142, %143)

block %142:
	unconditionalBranch(%143, %t3, %i3)

block %141:
	let  %144	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%143, %134, %144)

block %143(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	let  %145	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%79, %x5Fbflag3, %t4, %i4, %145)
}
[nameHint("primal")]
let  %primal	: _	= key
[nameHint("differential")]
let  %differential	: _	= key
###
checkpointing context generated for function test_simple_loop
	defined at tests/autodiff/reverse-loop.slang:12
	size of context: 24 bytes

	20 bytes used at tests/autodiff/reverse-loop.slang:14
    float t = y;
          ^

	4 bytes used at tests/autodiff/reverse-loop.slang:16
    for (int i = 0; i < 3; i++)
    ^~~

