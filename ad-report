### LOWER-TO-IR:
undefined
let  %1	: Void	= no_diff
let  %2	: witness_table_t(%IDifferentiable)	= lookupWitness(%3, %4)
let  %3	: witness_table_t(%IFloat)	= lookupWitness(%5, %6)
let  %7	: CapabilitySet	= capabilityDisjunction(%8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %77, %78, %79, %80, %81, %82, %83, %84, %85, %86, %87, %88, %89, %90, %91, %92, %93, %94, %95, %96, %97, %98, %99, %100, %101, %102, %103, %104, %105)
let  %105	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 74 : Int)
let  %104	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 73 : Int)
let  %103	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 72 : Int)
let  %102	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 71 : Int)
let  %101	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 70 : Int)
let  %100	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 69 : Int)
let  %99	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 68 : Int)
let  %98	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 67 : Int)
let  %97	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 66 : Int)
let  %96	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 65 : Int)
let  %95	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 64 : Int)
let  %94	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 63 : Int)
let  %93	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 62 : Int)
let  %92	: CapabilitySet	= capabilityConjunction(1 : Int, 8 : Int, 61 : Int)
let  %91	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 74 : Int)
let  %90	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 73 : Int)
let  %89	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 72 : Int)
let  %88	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 71 : Int)
let  %87	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 70 : Int)
let  %86	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 69 : Int)
let  %85	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 68 : Int)
let  %84	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 67 : Int)
let  %83	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 66 : Int)
let  %82	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 65 : Int)
let  %81	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 64 : Int)
let  %80	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 63 : Int)
let  %79	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 62 : Int)
let  %78	: CapabilitySet	= capabilityConjunction(1 : Int, 7 : Int, 61 : Int)
let  %77	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 74 : Int)
let  %76	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 73 : Int)
let  %75	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 72 : Int)
let  %74	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 71 : Int)
let  %73	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 70 : Int)
let  %72	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 69 : Int)
let  %71	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 68 : Int)
let  %70	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 67 : Int)
let  %69	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 66 : Int)
let  %68	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 65 : Int)
let  %67	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 64 : Int)
let  %66	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 63 : Int)
let  %65	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 62 : Int)
let  %64	: CapabilitySet	= capabilityConjunction(1 : Int, 6 : Int, 61 : Int)
let  %63	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 74 : Int)
let  %62	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 73 : Int)
let  %61	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 72 : Int)
let  %60	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 71 : Int)
let  %59	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 70 : Int)
let  %58	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 69 : Int)
let  %57	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 68 : Int)
let  %56	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 67 : Int)
let  %55	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 66 : Int)
let  %54	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 65 : Int)
let  %53	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 64 : Int)
let  %52	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 63 : Int)
let  %51	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 62 : Int)
let  %50	: CapabilitySet	= capabilityConjunction(1 : Int, 5 : Int, 61 : Int)
let  %49	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 74 : Int)
let  %48	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 73 : Int)
let  %47	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 72 : Int)
let  %46	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 71 : Int)
let  %45	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 70 : Int)
let  %44	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 69 : Int)
let  %43	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 68 : Int)
let  %42	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 67 : Int)
let  %41	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 66 : Int)
let  %40	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 65 : Int)
let  %39	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 64 : Int)
let  %38	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 63 : Int)
let  %37	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 62 : Int)
let  %36	: CapabilitySet	= capabilityConjunction(1 : Int, 4 : Int, 61 : Int)
let  %35	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 74 : Int)
let  %34	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 73 : Int)
let  %33	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 72 : Int)
let  %32	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 71 : Int)
let  %31	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 70 : Int)
let  %30	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 69 : Int)
let  %29	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 68 : Int)
let  %28	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 67 : Int)
let  %27	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 66 : Int)
let  %26	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 65 : Int)
let  %25	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 64 : Int)
let  %24	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 63 : Int)
let  %23	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 62 : Int)
let  %22	: CapabilitySet	= capabilityConjunction(1 : Int, 3 : Int, 61 : Int)
let  %21	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 74 : Int)
let  %20	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 73 : Int)
let  %19	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 72 : Int)
let  %18	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 71 : Int)
let  %17	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 70 : Int)
let  %16	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 69 : Int)
let  %15	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 68 : Int)
let  %14	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 67 : Int)
let  %13	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 66 : Int)
let  %12	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 65 : Int)
let  %11	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 64 : Int)
let  %10	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 63 : Int)
let  %9	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 62 : Int)
let  %8	: CapabilitySet	= capabilityConjunction(1 : Int, 2 : Int, 61 : Int)
let  %5	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)	= thisTypeWitness
let  %106	: _	= interface_req_entry(%107, witness_table_t(%x5Fx5FBuiltinRealType))
let  %108	: _	= interface_req_entry(%6, witness_table_t(%IFloat))
let  %109	: _	= interface_req_entry(%110, Func(this_type(%x5Fx5FBuiltinFloatingPointType)))
let  %111	: _	= interface_req_entry(%112, Func(DiffPairUserCode(this_type(%x5Fx5FBuiltinFloatingPointType), %2)))
let  %113	: _	= interface_req_entry(%114, Func(Void, associated_type(%IDifferentiable)))
[treatAsDifferentiableDecoration]
[BuiltinDecoration]
[import("_ST4core26__BuiltinFloatingPointType")]
[nameHint("__BuiltinFloatingPointType")]
let  %x5Fx5FBuiltinFloatingPointType	: Type	= interface(%106, %108, %109, %111, %113)
[import("_S4core26__BuiltinFloatingPointTypeI4core17__BuiltinRealType")]
let  %107	: _	= key
let  %115	: _	= interface_req_entry(%116, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[import("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%115)
[import("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %116	: _	= key
let  %117	: _	= interface_req_entry(%118, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[import("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%117)
[import("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %118	: _	= key
let  %119	: _	= interface_req_entry(%120, witness_table_t(%x5Fx5FBuiltinType))
let  %121	: _	= interface_req_entry(%122, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[import("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%119, %121)
[import("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %120	: _	= key
[BuiltinDecoration]
[import("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
[import("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %122	: _	= key
let  %123	: _	= interface_req_entry(%124, witness_table_t(%IComparable))
let  %125	: _	= interface_req_entry(%126, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %127	: _	= interface_req_entry(%128, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %129	: _	= interface_req_entry(%130, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %131	: _	= interface_req_entry(%132, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %133	: _	= interface_req_entry(%134, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
let  %135	: _	= interface_req_entry(%136, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
let  %137	: _	= interface_req_entry(%138, Func(this_type(%IArithmetic), Int))
let  %139	: _	= interface_req_entry(%140, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[import("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%123, %125, %127, %129, %131, %133, %135, %137, %139)
[import("_S4core11IArithmeticI4core11IComparable")]
let  %124	: _	= key
let  %141	: _	= interface_req_entry(%142, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
let  %143	: _	= interface_req_entry(%144, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
let  %145	: _	= interface_req_entry(%146, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[import("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%141, %143, %145)
[import("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %142	: _	= key
[import("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %144	: _	= key
[import("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %146	: _	= key
[import("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %126	: _	= key
[import("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %128	: _	= key
[import("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %130	: _	= key
[import("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %132	: _	= key
[import("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %134	: _	= key
[import("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %136	: _	= key
[import("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %138	: _	= key
[import("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %140	: _	= key
[import("_S4core26__BuiltinFloatingPointTypeI4core6IFloat")]
let  %6	: _	= key
let  %147	: _	= interface_req_entry(%148, witness_table_t(%IArithmetic))
let  %149	: _	= interface_req_entry(%4, witness_table_t(%IDifferentiable))
let  %150	: _	= interface_req_entry(%151, Func(this_type(%IFloat), Float))
let  %152	: _	= interface_req_entry(%153, Func(Float, this_type(%IFloat)))
let  %154	: _	= interface_req_entry(%155, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %156	: _	= interface_req_entry(%157, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %158	: _	= interface_req_entry(%159, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %160	: _	= interface_req_entry(%161, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %162	: _	= interface_req_entry(%163, Func(this_type(%IFloat), this_type(%IFloat), this_type(%IFloat)))
let  %164	: _	= interface_req_entry(%165, Func(this_type(%IFloat), this_type(%IFloat)))
let  %166	: _	= interface_req_entry(%167, Func(this_type(%IFloat), this_type(%IFloat)))
let  %168	: _	= interface_req_entry(%169, %170)
[import("_ST4core6IFloat")]
[nameHint("IFloat")]
let  %IFloat	: Type	= interface(%147, %149, %150, %152, %154, %156, %158, %160, %162, %164, %166, %168)
[import("_S4core6IFloatI4core11IArithmetic")]
let  %148	: _	= key
[import("_S4core6IFloatI4core15IDifferentiable")]
let  %4	: _	= key
let  %171	: _	= interface_req_entry(%172, associated_type(%IDifferentiable))
let  %173	: _	= interface_req_entry(%174, witness_table_t(%IDifferentiable))
let  %175	: _	= interface_req_entry(%176, Func(associated_type(%IDifferentiable)))
let  %177	: _	= interface_req_entry(%178, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
let  %179	: _	= interface_req_entry(%180, %181)
[import("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%171, %173, %175, %177, %179)
[import("_ST4core15IDifferentiable12Differential")]
let  %172	: _	= key
[import("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %174	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %176	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %178	: _	= key
[StaticRequirementDecoration]
[import("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %180	: _	= key
generic %181	: Generic
{
block %182(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %183	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
[import("_S4core6IFloatR8_24xinitp1pi_f")]
let  %151	: _	= key
[import("_S4core6IFloat7toFloatp0pf")]
let  %153	: _	= key
[import("_S4core6IFloat3addp1pi_4core6IFloat4This4core6IFloat4This")]
let  %155	: _	= key
[import("_S4core6IFloat3subp1pi_4core6IFloat4This4core6IFloat4This")]
let  %157	: _	= key
[import("_S4core6IFloat3mulp1pi_4core6IFloat4This4core6IFloat4This")]
let  %159	: _	= key
[import("_S4core6IFloat3divp1pi_4core6IFloat4This4core6IFloat4This")]
let  %161	: _	= key
[import("_S4core6IFloat3modp1pi_4core6IFloat4This4core6IFloat4This")]
let  %163	: _	= key
[import("_S4core6IFloat3negp0p4core6IFloat4This")]
let  %165	: _	= key
[import("_S4core6IFloatR8_24xinitp1pi_4core6IFloat4This")]
let  %167	: _	= key
[import("_S4core6IFloat5scaleg2TC4core6IFloat1T4core26__BuiltinFloatingPointTypep1pi_4core6IFloat1T4core6IFloat4This")]
let  %169	: _	= key
generic %170	: Generic
{
block %184(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("IFloat.T")]
		param %IFloatx5FT	: type_t,
		param %185	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	return_val(Func(this_type(%IFloat), this_type(%IFloat), %IFloatx5FT))
}
[backwardDiffReference(%114)]
[fwdDerivative(%112)]
[StaticRequirementDecoration]
[import("_S4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %110	: _	= key
[StaticRequirementDecoration]
[import("_SFwdReq_4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %112	: _	= key
[StaticRequirementDecoration]
[import("_SBwdReq_4core26__BuiltinFloatingPointType5getPip0p4core26__BuiltinFloatingPointType4Thisb")]
let  %114	: _	= key
[export("_SWf4core13__BuiltinType")]
witness_table %186	: witness_table_t(%x5Fx5FBuiltinType)(Float);

[intrinsicOp(272 : Int)]
[method]
[import("_S4core5float6equalsp1pi_fb")]
[nameHint("float.equals")]
func %floatx5Fequals	: Func(Bool, Float, Float);

[intrinsicOp(275 : Int)]
[method]
[import("_S4core5float8lessThanp1pi_fb")]
[nameHint("float.lessThan")]
func %floatx5FlessThan	: Func(Bool, Float, Float);

[intrinsicOp(277 : Int)]
[method]
[import("_S4core5float16lessThanOrEqualsp1pi_fb")]
[nameHint("float.lessThanOrEquals")]
func %floatx5FlessThanOrEquals	: Func(Bool, Float, Float);

[export("_SWf4core11IComparable")]
witness_table %187	: witness_table_t(%IComparable)(Float)
{
	witness_table_entry(%142,%floatx5Fequals)

	witness_table_entry(%144,%floatx5FlessThan)

	witness_table_entry(%146,%floatx5FlessThanOrEquals)

}

[intrinsicOp(264 : Int)]
[method]
[import("_S4core5float3addp1pi_ff")]
[nameHint("float.add")]
func %floatx5Fadd	: Func(Float, Float, Float);

[intrinsicOp(265 : Int)]
[method]
[import("_S4core5float3subp1pi_ff")]
[nameHint("float.sub")]
func %floatx5Fsub	: Func(Float, Float, Float);

[intrinsicOp(266 : Int)]
[method]
[import("_S4core5float3mulp1pi_ff")]
[nameHint("float.mul")]
func %floatx5Fmul	: Func(Float, Float, Float);

[intrinsicOp(267 : Int)]
[method]
[import("_S4core5float3divp1pi_ff")]
[nameHint("float.div")]
func %floatx5Fdiv	: Func(Float, Float, Float);

[intrinsicOp(269 : Int)]
[method]
[import("_S4core5float3modp1pi_ff")]
[nameHint("float.mod")]
func %floatx5Fmod	: Func(Float, Float, Float);

[intrinsicOp(283 : Int)]
[method]
[import("_S4core5float3negp0pf")]
[nameHint("float.neg")]
func %floatx5Fneg	: Func(Float, Float);

[intrinsicOp(500 : Int)]
[method]
[import("_S4core5floatR8_24xinitp1pi_i")]
[nameHint("float.$init")]
func %floatx5Fx24init	: Func(Float, Int);

[intrinsicOp(0 : Int)]
[treatAsDifferentiableDecoration]
[method]
[import("_S4core5floatR8_24xinitp1pi_f")]
[nameHint("float.$init")]
func %floatx5Fx24init1	: Func(Float, Float);

[export("_SWf4core11IArithmetic")]
witness_table %188	: witness_table_t(%IArithmetic)(Float)
{
	witness_table_entry(%124,%187)

	witness_table_entry(%126,%floatx5Fadd)

	witness_table_entry(%128,%floatx5Fsub)

	witness_table_entry(%130,%floatx5Fmul)

	witness_table_entry(%132,%floatx5Fdiv)

	witness_table_entry(%134,%floatx5Fmod)

	witness_table_entry(%136,%floatx5Fneg)

	witness_table_entry(%138,%floatx5Fx24init)

	witness_table_entry(%140,%floatx5Fx24init1)

}

[export("_SWf4core23__BuiltinArithmeticType")]
witness_table %189	: witness_table_t(%x5Fx5FBuiltinArithmeticType)(Float)
{
	witness_table_entry(%120,%186)

	witness_table_entry(%122,%188)

}

[export("_SWf4core29__BuiltinSignedArithmeticType")]
witness_table %190	: witness_table_t(%x5Fx5FBuiltinSignedArithmeticType)(Float)
{
	witness_table_entry(%118,%189)

}

[export("_SWf4core17__BuiltinRealType")]
witness_table %191	: witness_table_t(%x5Fx5FBuiltinRealType)(Float)
{
	witness_table_entry(%116,%190)

}

[export("_SWf4core11IComparable")]
witness_table %192	: witness_table_t(%IComparable)(Float)
{
	witness_table_entry(%142,%floatx5Fequals)

	witness_table_entry(%144,%floatx5FlessThan)

	witness_table_entry(%146,%floatx5FlessThanOrEquals)

}

[export("_SWf4core11IArithmetic")]
witness_table %193	: witness_table_t(%IArithmetic)(Float)
{
	witness_table_entry(%124,%192)

	witness_table_entry(%126,%floatx5Fadd)

	witness_table_entry(%128,%floatx5Fsub)

	witness_table_entry(%130,%floatx5Fmul)

	witness_table_entry(%132,%floatx5Fdiv)

	witness_table_entry(%134,%floatx5Fmod)

	witness_table_entry(%136,%floatx5Fneg)

	witness_table_entry(%138,%floatx5Fx24init)

	witness_table_entry(%140,%floatx5Fx24init1)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[import("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %194:
	return_val(0 : Float)
}
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[import("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %195(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %196	: Float	= add(%a, %b)
	return_val(%196)
}
generic %197	: Generic
{
block %198(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %199	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %1), Float))
}
[import("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %200	: %197
{
block %201(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %202	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %1), Float)
	{
block %203(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %1),
			[nameHint("b")]
			param %b1	: Float):
		let  %204	: Float	= floatCast(%a1)
		let  %205	: Float	= mul(%204, %b1)
		return_val(%205)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %206	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%172,Float)

	witness_table_entry(%174,%206)

	witness_table_entry(%176,%floatx5Fdzero)

	witness_table_entry(%178,%floatx5Fdadd)

	witness_table_entry(%180,%200)

}

[intrinsicOp(499 : Int)]
[method]
[import("_S4core5float7toFloatp0pf")]
[nameHint("float.toFloat")]
func %floatx5FtoFloat	: Func(Float, Float);

generic %207	: Generic
{
block %208(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("float.T")]
		param %floatx5FT	: type_t,
		param %209	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	return_val(Func(Float, Float, %floatx5FT))
}
[import("_S4core5float5scaleg2TC4core5float1T4core26__BuiltinFloatingPointTypep1pi_4core5float1Tf")]
generic %210	: %207
{
block %211(
		[TypeConstraintDecoration(%x5Fx5FBuiltinFloatingPointType)]
		[nameHint("float.T")]
		param %floatx5FT1	: type_t,
		param %212	: witness_table_t(%x5Fx5FBuiltinFloatingPointType)):
	[intrinsicOp(266 : Int)]
	[nameHint("float.scale")]
		func %floatx5Fscale	: Func(Float, Float, %floatx5FT1);

	return_val(%floatx5Fscale)
}
[export("_SWf4core6IFloat")]
witness_table %213	: witness_table_t(%IFloat)(Float)
{
	witness_table_entry(%148,%193)

	witness_table_entry(%4,%206)

	witness_table_entry(%151,%floatx5Fx24init1)

	witness_table_entry(%153,%floatx5FtoFloat)

	witness_table_entry(%155,%floatx5Fadd)

	witness_table_entry(%157,%floatx5Fsub)

	witness_table_entry(%159,%floatx5Fmul)

	witness_table_entry(%161,%floatx5Fdiv)

	witness_table_entry(%163,%floatx5Fmod)

	witness_table_entry(%165,%floatx5Fneg)

	witness_table_entry(%167,%floatx5Fx24init1)

	witness_table_entry(%169,%210)

}

[export("_SWi4core13__BuiltinType")]
witness_table %214	: witness_table_t(%x5Fx5FBuiltinType)(Int);

[intrinsicOp(272 : Int)]
[method]
[import("_S4core3int6equalsp1pi_ib")]
[nameHint("int.equals")]
func %intx5Fequals	: Func(Bool, Int, Int);

[intrinsicOp(275 : Int)]
[method]
[import("_S4core3int8lessThanp1pi_ib")]
[nameHint("int.lessThan")]
func %intx5FlessThan	: Func(Bool, Int, Int);

[intrinsicOp(277 : Int)]
[method]
[import("_S4core3int16lessThanOrEqualsp1pi_ib")]
[nameHint("int.lessThanOrEquals")]
func %intx5FlessThanOrEquals	: Func(Bool, Int, Int);

[export("_SWi4core11IComparable")]
witness_table %215	: witness_table_t(%IComparable)(Int)
{
	witness_table_entry(%142,%intx5Fequals)

	witness_table_entry(%144,%intx5FlessThan)

	witness_table_entry(%146,%intx5FlessThanOrEquals)

}

[intrinsicOp(264 : Int)]
[method]
[import("_S4core3int3addp1pi_ii")]
[nameHint("int.add")]
func %intx5Fadd	: Func(Int, Int, Int);

[intrinsicOp(265 : Int)]
[method]
[import("_S4core3int3subp1pi_ii")]
[nameHint("int.sub")]
func %intx5Fsub	: Func(Int, Int, Int);

[intrinsicOp(266 : Int)]
[method]
[import("_S4core3int3mulp1pi_ii")]
[nameHint("int.mul")]
func %intx5Fmul	: Func(Int, Int, Int);

[intrinsicOp(267 : Int)]
[method]
[import("_S4core3int3divp1pi_ii")]
[nameHint("int.div")]
func %intx5Fdiv	: Func(Int, Int, Int);

[intrinsicOp(269 : Int)]
[method]
[import("_S4core3int3modp1pi_ii")]
[nameHint("int.mod")]
func %intx5Fmod	: Func(Int, Int, Int);

[intrinsicOp(283 : Int)]
[method]
[import("_S4core3int3negp0pi")]
[nameHint("int.neg")]
func %intx5Fneg	: Func(Int, Int);

[intrinsicOp(0 : Int)]
[method]
[import("_S4core3intR8_24xinitp1pi_i")]
[nameHint("int.$init")]
func %intx5Fx24init	: Func(Int, Int);

[export("_SWi4core11IArithmetic")]
witness_table %216	: witness_table_t(%IArithmetic)(Int)
{
	witness_table_entry(%124,%215)

	witness_table_entry(%126,%intx5Fadd)

	witness_table_entry(%128,%intx5Fsub)

	witness_table_entry(%130,%intx5Fmul)

	witness_table_entry(%132,%intx5Fdiv)

	witness_table_entry(%134,%intx5Fmod)

	witness_table_entry(%136,%intx5Fneg)

	witness_table_entry(%138,%intx5Fx24init)

	witness_table_entry(%140,%intx5Fx24init)

}

[export("_SWi4core23__BuiltinArithmeticType")]
witness_table %217	: witness_table_t(%x5Fx5FBuiltinArithmeticType)(Int)
{
	witness_table_entry(%120,%214)

	witness_table_entry(%122,%216)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %218(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%219, %220, %221, %y, 0 : Int)

block %219(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %222	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%222, %223, %220, %223)

block %223:
	let  %224	: Float	= mul(%t, %t)
	unconditionalBranch(%221)

block %221:
	let  %225	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%219, %224, %225)

block %220:
	return_val(%t)
}
[import("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[import("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %226	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %226)	= global_param
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %227(
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %206))	= var
	let  %228	: DiffPairUserCode(Float, %206)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %228)
	let  %229	: Func(Void, InOut(DiffPairUserCode(Float, %206)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %229(%dpa, 1 : Float)
	let  %230	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %231	: DiffPairUserCode(Float, %206)	= load(%dpa)
	let  %232	: Float	= GetDifferentialUserCode(%231)
	store(%230, %232)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %206))	= var
	let  %233	: DiffPairUserCode(Float, %206)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %233)
	let  %234	: Func(Void, InOut(DiffPairUserCode(Float, %206)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %234(%dpa1, 1 : Float)
	let  %235	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %236	: DiffPairUserCode(Float, %206)	= load(%dpa1)
	let  %237	: Float	= GetDifferentialUserCode(%236)
	store(%235, %237)
	return_val(void_constant)
}
###
### POST IR VALIDATION:
varLayout(%1)
let  %1	: Void	= structTypeLayout(%2)
let  %2	: Void	= fieldLayout(%outputBuffer, %3)
let  %3	: Void	= varLayout(%4, %5)
let  %5	: Void	= offset(9 : Int, 0 : Int)
let  %4	: Void	= structuredBufferTypeLayout(%6, %7)
let  %7	: Void	= size(9 : Int, 1 : Int)
let  %6	: Void	= typeLayout(%8)
let  %8	: Void	= size(8 : Int, 4 : Int)
let  %9	: Void	= no_diff
let  %10	: Void	= EntryPointLayout(%11, %12)
let  %12	: Void	= varLayout(%13)
let  %11	: Void	= varLayout(%14)
let  %14	: Void	= structTypeLayout(%15)
let  %15	: Void	= fieldLayout(%16, %17)
let  %17	: Void	= varLayout(%13, %18, %19)
let  %19	: Void	= stage(6 : Int)
let  %18	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %13	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %16	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
let  %27	: _	= interface_req_entry(%26, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %28	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %29	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %30	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %31	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %32	: _	= interface_req_entry(%31, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %33	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %34	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %39	: _	= key
let  %40	: _	= interface_req_entry(%39, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%36, %38, %40)
let  %41	: _	= interface_req_entry(%34, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %56	: _	= key
let  %57	: _	= interface_req_entry(%56, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%41, %43, %45, %47, %49, %51, %53, %55, %57)
let  %58	: _	= interface_req_entry(%33, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%32, %58)
let  %59	: _	= interface_req_entry(%30, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%59)
let  %60	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%60)
generic %61	: Generic
{
block %62(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %63	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %64	: _	= interface_req_entry(%28, %61)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%21, %23, %25, %27, %64)
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %65:
	return_val(0 : Float)
}
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %66(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %67	: Float	= add(%a, %b)
	return_val(%67)
}
generic %68	: Generic
{
block %69(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %70	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %9), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %71	: %68
{
block %72(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %73	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %9), Float)
	{
block %74(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %9),
			[nameHint("b")]
			param %b1	: Float):
		let  %75	: Float	= floatCast(%a1)
		let  %76	: Float	= mul(%75, %b1)
		return_val(%76)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %77	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%20,Float)

	witness_table_entry(%22,%77)

	witness_table_entry(%24,%floatx5Fdzero)

	witness_table_entry(%26,%floatx5Fdadd)

	witness_table_entry(%28,%71)

}

[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %78(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%79, %80, %81, %y, 0 : Int)

block %79(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %82	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%82, %83, %80, %83)

block %83:
	let  %84	: Float	= mul(%t, %t)
	unconditionalBranch(%81)

block %81:
	let  %85	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%79, %84, %85)

block %80:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %86	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%3)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %86)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%10)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %87(
		[layout(%17)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %77))	= var
	let  %88	: DiffPairUserCode(Float, %77)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %88)
	let  %89	: Func(Void, InOut(DiffPairUserCode(Float, %77)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %89(%dpa, 1 : Float)
	let  %90	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %91	: DiffPairUserCode(Float, %77)	= load(%dpa)
	let  %92	: Float	= GetDifferentialUserCode(%91)
	store(%90, %92)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %77))	= var
	let  %93	: DiffPairUserCode(Float, %77)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %93)
	let  %94	: Func(Void, InOut(DiffPairUserCode(Float, %77)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %94(%dpa1, 1 : Float)
	let  %95	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %96	: DiffPairUserCode(Float, %77)	= load(%dpa1)
	let  %97	: Float	= GetDifferentialUserCode(%96)
	store(%95, %97)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %98:
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %100(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %101	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%101)
}
generic %102	: Generic
{
block %103(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %104	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %9), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %105	: %102
{
block %106(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %107	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %9), %NullDifferential)
	{
block %108(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %9),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %109	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%109)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %110	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%20,%NullDifferential)

	witness_table_entry(%22,%110)

	witness_table_entry(%24,%NullDifferentialx5Fdzero)

	witness_table_entry(%26,%NullDifferentialx5Fdadd)

	witness_table_entry(%28,%105)

}

###
### BEFORE-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

###
### AFTER-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)

block %78:
	return_val(%t)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	let  %87	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %87(%dpa, 1 : Float)
	let  %88	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %89	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %90	: Float	= GetDifferentialUserCode(%89)
	store(%88, %90)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %91	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %91)
	let  %92	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)	= BackwardDifferentiate(%testx5Fsimplex5Floop)
	call %92(%dpa1, 1 : Float)
	let  %93	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %94	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %95	: Float	= GetDifferentialUserCode(%94)
	store(%93, %95)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %96:
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %98(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %99	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%99)
}
generic %100	: Generic
{
block %101(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %102	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %103	: %100
{
block %104(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %105	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %106(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %107	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%107)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %108	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%108)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%103)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE PRIMAL
BACKWARD DIFFERENTIATE PROPOGATE
(result before eliminating phis)===============================
inst with location: 1514954 (1)
[nameHint("y")]
let  %y	: Float	= param

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %y, 0 : Int)

inst with location: 1514994 (1)
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[nameHint("i")]
let  %i	: Int	= param

inst with location: 1515008 (1)
loop(%1, %2, %1)

inst with location: 1515026 (1)
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 1515008 (1)
ifElse(%1, %2, %3, %2)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515058 (1)
let  %1	: Float	= mul(%t, %t)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515032 (1)
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 1515008 (1)
unconditionalBranch(%1, %2, %3)

inst with location: 1515077 (1)
return_val(%t)

(fwdDiffFunc from generateNewForwardDerivative)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[forwardDifferentiable]
[nameHint("s_fwd_test_simple_loop")]
func %sx5Ffwdx5Ftestx5Fsimplex5Floop	: Func(DiffPair(Float, %1), DiffPair(Float, %1))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	[diffInstDecoration(Float)]
	let  %3	: Float	= GetDifferential(%dpy)
	[primalInstDecoration]
	let  %4	: Float	= GetPrimal(%dpy)
	[mixedDiffInstDecoration(<null>)]
	[loopMaxIters(4 : Int)]
	loop(%5, %6, %5, true, %4, %3, 0 : Int)

block %5(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag, %7, %8, %7)

block %8:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%6)

block %6:
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	let  %9	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	return_val(%9)

block %7:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%10)

block %10:
	[primalInstDecoration]
	let  %11	: Bool	= cmpLT(%i, 3 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%11, %12, %13, %14)

block %13:
	[diffInstDecoration(Float)]
	let  %15	: Float	= call %floatx5Fdzero()
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 0 : Int, 0 : Float, %15)

block %12:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	[diffInstDecoration(Float)]
	let  %17	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %18	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %19	: Float	= add(%17, %18)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 1 : Int, %16, %19)

block %14(
		[primalInstDecoration]
		param %20	: Int,
		[primalInstDecoration]
		param %21	: Float,
		[diffInstDecoration(Float)]
		param %22	: Float):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%23)

block %23:
	[primalInstDecoration]
	let  %24	: Bool	= cmpNE(%20, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%24, %25, %26, %27)

block %26:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, %x5Fbflag)

block %25:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, false)

block %27(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%28)

block %28:
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag1, %29, %30, %31)

block %30:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %t, %sx5Fdiffx5Ft, %i)

block %29:
	[primalInstDecoration]
	let  %32	: Int	= add(%i, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %21, %22, %32)

block %31(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%5, %x5Fbflag1, %t1, %sx5Fdiffx5Ft1, %i1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 1514954 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= GetDifferential(%dpy)

inst with location: 1514954 (1)
[primalInstDecoration]
let  %1	: Float	= GetPrimal(%dpy)

inst with location: 1515008 (1)
[mixedDiffInstDecoration(<null>)]
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, %4, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
let  %2	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 1515077 (1)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
return_val(%2)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 0 : Int, 0 : Float, %2)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 1 : Int, %2, %3)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %t, %sx5Fdiffx5Ft, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %2, %3, %4)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag, %t, %sx5Fdiffx5Ft, %i)

(diffPropagateFunc after unzipping)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop));


(unzipDiffInsts)===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(diffPropagateFunc moving blocks)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	let  %3	: Float	= PrimalParamRef(%dpy)
	[diffInstDecoration(Float)]
	let  %4	: Float	= DiffParamRef(%dpy)
	unconditionalBranch(%5)

block %5:
	[loopMaxIters(4 : Int)]
	loop(%6, %7, %6, true, %3, 0 : Int)

block %6(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	ifElse(%x5Fbflag, %8, %9, %8)

block %9:
	unconditionalBranch(%7)

block %7:
	[BackwardDerivativePrimalReturnDecoration(%t)]
	unconditionalBranch(%10)

block %8:
	unconditionalBranch(%11)

block %11:
	[primalInstDecoration]
	let  %12	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%12, %13, %14, %15)

block %14:
	unconditionalBranch(%15, 0 : Int, 0 : Float)

block %13:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	unconditionalBranch(%15, 1 : Int, %16)

block %15(
		[primalInstDecoration]
		param %17	: Int,
		[primalInstDecoration]
		param %18	: Float):
	unconditionalBranch(%19)

block %19:
	[primalInstDecoration]
	let  %20	: Bool	= cmpNE(%17, 1 : Int)
	ifElse(%20, %21, %22, %23)

block %22:
	unconditionalBranch(%23, %x5Fbflag)

block %21:
	unconditionalBranch(%23, false)

block %23(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%24)

block %24:
	ifElse(%x5Fbflag1, %25, %26, %27)

block %26:
	unconditionalBranch(%27, %t, %i)

block %25:
	[primalInstDecoration]
	let  %28	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%27, %18, %28)

block %27(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	unconditionalBranch(%6, %x5Fbflag1, %t1, %i1)

block %10:
	[loopMaxIters(4 : Int)]
	loop(%29, %30, %29, %4)

block %29(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float):
	ifElse(%x5Fbflag, %31, %32, %31)

block %32:
	unconditionalBranch(%30)

block %30:
	[diffInstDecoration(Float)]
	let  %33	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[diffInstDecoration(Float)]
	return_val(%33)

block %31:
	unconditionalBranch(%34)

block %34:
	ifElse(%12, %35, %36, %37)

block %36:
	[diffInstDecoration(Float)]
	let  %38	: Float	= call %floatx5Fdzero()
	unconditionalBranch(%37, %38)

block %35:
	[diffInstDecoration(Float)]
	let  %39	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %40	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %41	: Float	= add(%39, %40)
	unconditionalBranch(%37, %41)

block %37(
		[diffInstDecoration(Float)]
		param %42	: Float):
	unconditionalBranch(%43)

block %43:
	ifElse(%20, %44, %45, %46)

block %45:
	unconditionalBranch(%46)

block %44:
	unconditionalBranch(%46)

block %46:
	unconditionalBranch(%47)

block %47:
	ifElse(%x5Fbflag1, %48, %49, %50)

block %49:
	unconditionalBranch(%50, %sx5Fdiffx5Ft)

block %48:
	unconditionalBranch(%50, %42)

block %50(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float):
	unconditionalBranch(%29, %sx5Fdiffx5Ft1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(applyCheckpointPolicy) ===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: Float	= param

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

inst with location: 0 (0)
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

inst with location: 0 (0)
[nameHint("_s_diff_ctx")]
let  %x5Fsx5Fdiffx5Fctx	: BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop)	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
[keepAlive]
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %2)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Void, %1)]
[loopMaxIters(4 : Int)]
loop(%2, %3, %4)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%3, %4)

inst with location: 0 (0)
store(%dpy, %1)

inst with location: 0 (0)
return_val(void_constant)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

Adding counter for primalLoop:
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

  > sourceLoc: 1515008 (1)
>> Counter for primalLoop:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

  > sourceLoc: 1515008 (1)
### Slang::AutodiffCheckpointPolicyBase::processFunc
processing workList
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3CC5E0 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3CC5E0 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

use with usedVal:
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

use with usedVal:
[primalInstDecoration]
let  %1	: Int	= param

use with usedVal:
0

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3BDB60 to storeSet
0
inst with location: 0 (0)
use with usedVal:
1

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3BD730 to storeSet
1
inst with location: 0 (0)
use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3C97B0 to storeSet

inst with location: 0 (0)
use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 000001B72F3E5848 to storeSet
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

inst with location: 1515008 (1)
use with usedVal:
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

****** (before legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

source loc recorded: 1515008 (1)
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

****** ensureInstAvailable
ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

>> LOOP COUNTER!
% localVar:
let  %1	: Ptr(Int)	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

% localVar:
let  %1	: Ptr(Array(Float, 5 : Int))	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Int	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%2, 3 : Int)

>> NO OUT OF SCOPE USES
****** (after legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1515008 (1)
let  %1	: Ptr(Int)	= var

tests/autodiff/reverse-loop.slang(16): note: also see pipeline definition
    for (int i = 0; i < 3; i++)
    ^~~
source loc recorded: 1514994 (1)
let  %1	: Ptr(Array(Float, 5 : Int))	= var

tests/autodiff/reverse-loop.slang(14): note: also see pipeline definition
    float t = y;
          ^
in unzipping function:
createIntermediate type:
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type;


adding field to outIntermediatery
inst: 1514994 (1)
let  %1	: Ptr(Array(Float, 5 : Int))	= var

[IntermediateContextFieldDifferentialTypeDecoration(%1)]
field(%2, Array(Float, 5 : Int))

adding field to outIntermediatery
inst: 1515008 (1)
let  %1	: Ptr(Int)	= var

field(%1, Int)

### AFTER-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

###
### BEFORE-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

###
### AFTER-SPECIALIZE:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[backwardDiffIntermediateTypeReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)]
[backwardDiffPropagateReference(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop)]
[backwardDiffPrimalReference(%sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop)]
[primalInstDecoration]
[backwardDiffReference(%sx5Fbwdx5Ftestx5Fsimplex5Floop)]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[export("_SR15reverse_2Dxloop16test_simple_loopp1pi_ffb")]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop	: Func(Float, Float)
{
block %76(
		[nameHint("y")]
		param %y	: Float):
	[loopMaxIters(3 : Int)]
	loop(%77, %78, %79, %y, 0 : Int)

block %77(
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int):
	let  %80	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%80, %81, %78, %81)

block %78:
	return_val(%t)

block %81:
	let  %82	: Float	= mul(%t, %t)
	unconditionalBranch(%79)

block %79:
	let  %83	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%77, %82, %83)
}
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %84	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %84)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %85(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %86	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %86)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %87	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %88	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %89	: Float	= GetDifferentialUserCode(%88)
	store(%87, %89)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %90	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %90)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %91	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %92	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %93	: Float	= GetDifferentialUserCode(%92)
	store(%91, %93)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %94:
	let  %95	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%95)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %96(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %97	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%97)
}
generic %98	: Generic
{
block %99(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %100	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %101	: %98
{
block %102(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %103	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %104(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %105	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%105)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %106	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%106)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%101)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %107(
		param %108	: InOut(DiffPairUserCode(Float, %75)),
		param %109	: Float):
	let  %110	: DiffPairUserCode(Float, %75)	= load(%108)
	let  %111	: Float	= GetPrimalUserCode(%110)
	let  %112	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %113	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%111, %112)
	let  %114	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%112)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%108, %109, %114)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %115(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%116)

block %116:
	let  %117	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %117)
	let  %118	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %119)
	let  %120	: Ptr(Array(Float, 5 : Int))	= var
	let  %121	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%120, %121)
	let  %122	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%118, %122)
	let  %123	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %124)
	let  %125	: Ptr(Int)	= var
	store(%125, 0 : Int)
	store(%123, 0 : Int)
	unconditionalBranch(%126)

block %126:
	[loopMaxIters(4 : Int)]
	loop(%127, %128, %127, true, %dpy, 0 : Int, 0 : Int)

block %127(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %129	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%118, %x5Fpc)
	store(%129, %t1)
	store(%123, %x5Fpc)
	ifElse(%x5Fbflag, %130, %131, %130)

block %131:
	unconditionalBranch(%128)

block %128:
	return_val(%t1)

block %130:
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpLT(%i1, 3 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, 0 : Int, 0 : Float)

block %134:
	[primalInstDecoration]
	let  %137	: Float	= mul(%t1, %t1)
	unconditionalBranch(%136, 1 : Int, %137)

block %136(
		[primalInstDecoration]
		param %138	: Int,
		[primalInstDecoration]
		param %139	: Float):
	unconditionalBranch(%140)

block %140:
	[primalInstDecoration]
	let  %141	: Bool	= cmpNE(%138, 1 : Int)
	ifElse(%141, %142, %143, %144)

block %143:
	unconditionalBranch(%144, %x5Fbflag)

block %142:
	unconditionalBranch(%144, false)

block %144(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%145)

block %145:
	ifElse(%x5Fbflag1, %146, %147, %148)

block %147:
	unconditionalBranch(%148, %t1, %i1)

block %146:
	[primalInstDecoration]
	let  %149	: Int	= add(%i1, 1 : Int)
	unconditionalBranch(%148, %139, %149)

block %148(
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int):
	[primalInstDecoration]
	let  %150	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%127, %x5Fbflag1, %t2, %i2, %150)
}
[fwdDerivative(%151)]
[primalInstDecoration]
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("test_simple_loop")]
func %testx5Fsimplex5Floop1	: Func(Float, Float)
{
block %152(
		[nameHint("y")]
		param %y1	: Float):
	[loopMaxIters(4 : Int)]
	loop(%153, %154, %153, true, %y1, 0 : Int)

block %153(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	ifElse(%x5Fbflag2, %155, %156, %155)

block %156:
	unconditionalBranch(%154)

block %154:
	return_val(%t3)

block %155:
	unconditionalBranch(%157)

block %157:
	let  %158	: Bool	= cmpLT(%i3, 3 : Int)
	ifElse(%158, %159, %160, %161)

block %160:
	unconditionalBranch(%161, 0 : Int, 0 : Float)

block %159:
	let  %162	: Float	= mul(%t3, %t3)
	unconditionalBranch(%161, 1 : Int, %162)

block %161(
		param %163	: Int,
		param %164	: Float):
	unconditionalBranch(%165)

block %165:
	let  %166	: Bool	= cmpNE(%163, 1 : Int)
	ifElse(%166, %167, %168, %169)

block %168:
	unconditionalBranch(%169, %x5Fbflag2)

block %167:
	unconditionalBranch(%169, false)

block %169(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%170)

block %170:
	ifElse(%x5Fbflag3, %171, %172, %173)

block %172:
	unconditionalBranch(%173, %t3, %i3)

block %171:
	let  %174	: Int	= add(%i3, 1 : Int)
	unconditionalBranch(%173, %164, %174)

block %173(
		[nameHint("t")]
		param %t4	: Float,
		[nameHint("i")]
		param %i4	: Int):
	unconditionalBranch(%153, %x5Fbflag3, %t4, %i4)
}
[derivativeMemberDecoration(%175)]
let  %119	: _	= key
let  %124	: _	= key
struct %176	: Type
{
	field(%175, Array(Float, 5 : Int))
}

func %177	: Func(%176)
{
block %178:
	let  %179	: Array(Float, 5 : Int)	= call %180()
	let  %181	: %176	= makeStruct(%179)
	return_val(%181)
}
func %182	: Func(%176)
{
block %183(
		param %184	: %176,
		param %185	: %176):
	let  %186	: Array(Float, 5 : Int)	= get_field(%184, %175)
	let  %187	: Array(Float, 5 : Int)	= get_field(%185, %175)
	let  %188	: Array(Float, 5 : Int)	= call %189(%186, %187)
	let  %190	: %176	= makeStruct(%188)
	return_val(%190)
}
witness_table %191	: witness_table_t(%IDifferentiable)(%176)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

witness_table %192	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%176)

	witness_table_entry(%20,%191)

	witness_table_entry(%22,%177)

	witness_table_entry(%24,%182)

}

[derivativeMemberDecoration(%175)]
let  %175	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%193)]
	field(%119, Array(Float, 5 : Int))
	field(%124, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %194(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%195)

block %195:
	let  %196	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %197	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %198	: Ptr(Array(Float, 5 : Int))	= var
	store(%198, %197)
	store(%198, %196)
	let  %199	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %200	: Ptr(Int)	= var
	store(%200, %199)
	store(%200, 0 : Int)
	let  %201	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %202	: Float	= GetPrimalUserCode(%201)
	unconditionalBranch(%203)

block %203:
	[loopMaxIters(4 : Int)]
	loop(%204, %205, %204, true, %202, 0 : Int, 0 : Int)

block %204(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t5	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i5	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %206	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %207	: Ptr(Array(Float, 5 : Int))	= var
	store(%207, %206)
	let  %208	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%207, %x5Fpc1)
	store(%208, %t5)
	let  %209	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %210	: Ptr(Int)	= var
	store(%210, %209)
	store(%210, %x5Fpc1)
	ifElse(%x5Fbflag4, %211, %212, %211)

block %212:
	unconditionalBranch(%205)

block %205:
	unconditionalBranch(%213)

block %213:
	unconditionalBranch(%214)

block %214:
	unconditionalBranch(%215)

block %215:
	unconditionalBranch(%216)

block %216:
	unconditionalBranch(%217)

block %217:
	let  %218	: Float	= call %floatx5Fdzero()
	let  %219	: Ptr(Float)	= var
	store(%219, %218)
	let  %220	: Float	= call %floatx5Fdzero()
	let  %221	: Ptr(Float)	= var
	store(%221, %220)
	let  %222	: Float	= load(%219)
	let  %223	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %222)
	store(%219, %223)
	unconditionalBranch(%224)

block %224:
	let  %225	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %124)
	let  %226	: Int	= sub(%225, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%227, %228, %229, %226)

block %227(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %230	: Int	= add(%x5Fdc, 0 : Int)
	let  %231	: Float	= load(%219)
	let  %232	: Float	= call %floatx5Fdzero()
	store(%219, %232)
	let  %233	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%233, %234, %235, %234)

block %235:
	unconditionalBranch(%228, %231)

block %228(
		param %236	: Float):
	let  %237	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %238	: Float	= GetPrimalUserCode(%237)
	let  %239	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%238, %236)
	store(%dpy1, %239)
	return_val(void_constant)

block %234:
	unconditionalBranch(%240)

block %240:
	[primalInstDecoration]
	let  %241	: Bool	= cmpLT(%230, 3 : Int)
	ifElse(%241, %242, %243, %244)

block %243:
	unconditionalBranch(%244, 0 : Int)

block %242:
	unconditionalBranch(%244, 1 : Int)

block %244(
		[primalInstDecoration]
		param %245	: Int):
	unconditionalBranch(%246)

block %246:
	[primalInstDecoration]
	let  %247	: Bool	= cmpNE(%245, 1 : Int)
	ifElse(%247, %248, %249, %250)

block %249:
	unconditionalBranch(%250, true)

block %248:
	unconditionalBranch(%250, false)

block %250(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag5	: Bool):
	unconditionalBranch(%251)

block %251:
	ifElse(%x5Fbflag5, %252, %253, %254)

block %253:
	unconditionalBranch(%254)

block %252:
	unconditionalBranch(%254)

block %254:
	unconditionalBranch(%255)

block %255:
	unconditionalBranch(%256, %231)

block %256(
		param %257	: Float):
	ifElse(%x5Fbflag5, %258, %259, %260)

block %259:
	unconditionalBranch(%261, %257)

block %261(
		param %262	: Float):
	let  %263	: Float	= load(%219)
	let  %264	: Float	= call %floatx5Fdadd(%262, %263)
	store(%219, %264)
	unconditionalBranch(%260)

block %258:
	unconditionalBranch(%265, %257)

block %265(
		param %266	: Float):
	let  %267	: Float	= load(%221)
	let  %268	: Float	= call %floatx5Fdadd(%266, %267)
	store(%221, %268)
	unconditionalBranch(%260)

block %260:
	unconditionalBranch(%269)

block %269:
	ifElse(%247, %270, %271, %272)

block %271:
	unconditionalBranch(%272)

block %270:
	unconditionalBranch(%272)

block %272:
	unconditionalBranch(%273)

block %273:
	let  %274	: Float	= load(%221)
	let  %275	: Float	= call %floatx5Fdzero()
	store(%221, %275)
	ifElse(%241, %276, %277, %278)

block %277:
	unconditionalBranch(%279)

block %279:
	unconditionalBranch(%278)

block %276:
	unconditionalBranch(%280, %274)

block %280(
		param %281	: Float):
	let  %282	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %283	: Ptr(Array(Float, 5 : Int))	= var
	store(%283, %282)
	let  %284	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%283, %x5Fdc)
	let  %285	: Float	= load(%284)
	let  %286	: Float	= mul(%285, %281)
	let  %287	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %119)
	let  %288	: Ptr(Array(Float, 5 : Int))	= var
	store(%288, %287)
	let  %289	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%288, %x5Fdc)
	let  %290	: Float	= load(%289)
	let  %291	: Float	= mul(%290, %281)
	let  %292	: Float	= load(%219)
	let  %293	: Float	= call %floatx5Fdadd(%286, %291)
	let  %294	: Float	= call %floatx5Fdadd(%293, %292)
	store(%219, %294)
	unconditionalBranch(%278)

block %278:
	unconditionalBranch(%229)

block %229:
	[primalInstDecoration]
	let  %295	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%227, %295)

block %211:
	unconditionalBranch(%296)

block %296:
	[primalInstDecoration]
	let  %297	: Bool	= cmpLT(%i5, 3 : Int)
	ifElse(%297, %298, %299, %300)

block %299:
	unconditionalBranch(%300, 0 : Int, 0 : Float)

block %298:
	[primalInstDecoration]
	let  %301	: Float	= mul(%t5, %t5)
	unconditionalBranch(%300, 1 : Int, %301)

block %300(
		[primalInstDecoration]
		param %302	: Int,
		[primalInstDecoration]
		param %303	: Float):
	unconditionalBranch(%304)

block %304:
	[primalInstDecoration]
	let  %305	: Bool	= cmpNE(%302, 1 : Int)
	ifElse(%305, %306, %307, %308)

block %307:
	unconditionalBranch(%308, %x5Fbflag4)

block %306:
	unconditionalBranch(%308, false)

block %308(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag6	: Bool):
	unconditionalBranch(%309)

block %309:
	ifElse(%x5Fbflag6, %310, %311, %312)

block %311:
	unconditionalBranch(%312, %t5, %i5)

block %310:
	[primalInstDecoration]
	let  %313	: Int	= add(%i5, 1 : Int)
	unconditionalBranch(%312, %303, %313)

block %312(
		[primalInstDecoration]
		[nameHint("t")]
		param %t6	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i6	: Int):
	[primalInstDecoration]
	let  %314	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%204, %x5Fbflag6, %t6, %i6, %314)
}
[backwardDifferentiable]
func %189	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %315(
		param %316	: Array(Float, 5 : Int),
		param %317	: Array(Float, 5 : Int)):
	let  %318	: Ptr(Array(Float, 5 : Int))	= var
	loop(%319, %320, %319, 0 : Int)

block %319(
		param %321	: Int):
	let  %322	: Bool	= cmpLT(%321, 5 : Int)
	ifElse(%322, %323, %324, %324)

block %323:
	let  %325	: Float	= getElement(%316, %321)
	let  %326	: Float	= getElement(%317, %321)
	let  %327	: Float	= call %floatx5Fdadd(%325, %326)
	let  %328	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%318, %321)
	store(%328, %327)
	unconditionalBranch(%329)

block %324:
	unconditionalBranch(%320)

block %320:
	let  %330	: Array(Float, 5 : Int)	= load(%318)
	return_val(%330)

block %329:
	let  %331	: Int	= add(%321, 1 : Int)
	unconditionalBranch(%319, %331)
}
func %180	: Func(Array(Float, 5 : Int))
{
block %332:
	let  %333	: Float	= call %floatx5Fdzero()
	let  %334	: Array(Float, 5 : Int)	= makeArrayFromElement(%333)
	return_val(%334)
}
witness_table %193	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%193)

	witness_table_entry(%24,%189)

	witness_table_entry(%22,%180)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %76	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %76)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %77(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %78	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %78)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %79	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %80	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %81	: Float	= GetDifferentialUserCode(%80)
	store(%79, %81)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %82	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %82)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %83	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %84	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %85	: Float	= GetDifferentialUserCode(%84)
	store(%83, %85)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %86:
	let  %87	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%87)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %88(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %89	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%89)
}
generic %90	: Generic
{
block %91(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %92	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %93	: %90
{
block %94(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %95	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %96(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %97	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%97)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %98	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%98)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%93)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %99(
		param %100	: InOut(DiffPairUserCode(Float, %75)),
		param %101	: Float):
	let  %102	: DiffPairUserCode(Float, %75)	= load(%100)
	let  %103	: Float	= GetPrimalUserCode(%102)
	let  %104	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %105	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%103, %104)
	let  %106	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%104)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%100, %101, %106)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %107(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%108)

block %108:
	let  %109	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %109)
	let  %110	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %111)
	let  %112	: Ptr(Array(Float, 5 : Int))	= var
	let  %113	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%112, %113)
	let  %114	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%110, %114)
	let  %115	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %116)
	let  %117	: Ptr(Int)	= var
	store(%117, 0 : Int)
	store(%115, 0 : Int)
	unconditionalBranch(%118)

block %118:
	[loopMaxIters(4 : Int)]
	loop(%119, %120, %119, true, %dpy, 0 : Int, 0 : Int)

block %119(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %121	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%110, %x5Fpc)
	store(%121, %t)
	store(%115, %x5Fpc)
	ifElse(%x5Fbflag, %122, %123, %122)

block %123:
	unconditionalBranch(%120)

block %120:
	return_val(%t)

block %122:
	unconditionalBranch(%124)

block %124:
	[primalInstDecoration]
	let  %125	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%125, %126, %127, %128)

block %127:
	unconditionalBranch(%128, 0 : Int, 0 : Float)

block %126:
	[primalInstDecoration]
	let  %129	: Float	= mul(%t, %t)
	unconditionalBranch(%128, 1 : Int, %129)

block %128(
		[primalInstDecoration]
		param %130	: Int,
		[primalInstDecoration]
		param %131	: Float):
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpNE(%130, 1 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, %x5Fbflag)

block %134:
	unconditionalBranch(%136, false)

block %136(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%137)

block %137:
	ifElse(%x5Fbflag1, %138, %139, %140)

block %139:
	unconditionalBranch(%140, %t, %i)

block %138:
	[primalInstDecoration]
	let  %141	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%140, %131, %141)

block %140(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	[primalInstDecoration]
	let  %142	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%119, %x5Fbflag1, %t1, %i1, %142)
}
[derivativeMemberDecoration(%143)]
let  %111	: _	= key
let  %116	: _	= key
struct %144	: Type
{
	field(%143, Array(Float, 5 : Int))
}

func %145	: Func(%144)
{
block %146:
	let  %147	: Array(Float, 5 : Int)	= call %148()
	let  %149	: %144	= makeStruct(%147)
	return_val(%149)
}
func %150	: Func(%144)
{
block %151(
		param %152	: %144,
		param %153	: %144):
	let  %154	: Array(Float, 5 : Int)	= get_field(%152, %143)
	let  %155	: Array(Float, 5 : Int)	= get_field(%153, %143)
	let  %156	: Array(Float, 5 : Int)	= call %157(%154, %155)
	let  %158	: %144	= makeStruct(%156)
	return_val(%158)
}
witness_table %159	: witness_table_t(%IDifferentiable)(%144)
{
	witness_table_entry(%18,%144)

	witness_table_entry(%20,%159)

	witness_table_entry(%22,%145)

	witness_table_entry(%24,%150)

}

witness_table %160	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%144)

	witness_table_entry(%20,%159)

	witness_table_entry(%22,%145)

	witness_table_entry(%24,%150)

}

[derivativeMemberDecoration(%143)]
let  %143	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%161)]
	field(%111, Array(Float, 5 : Int))
	field(%116, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %162(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%163)

block %163:
	let  %164	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %165	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %166	: Ptr(Array(Float, 5 : Int))	= var
	store(%166, %165)
	store(%166, %164)
	let  %167	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %168	: Ptr(Int)	= var
	store(%168, %167)
	store(%168, 0 : Int)
	let  %169	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %170	: Float	= GetPrimalUserCode(%169)
	unconditionalBranch(%171)

block %171:
	[loopMaxIters(4 : Int)]
	loop(%172, %173, %172, true, %170, 0 : Int, 0 : Int)

block %172(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %174	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %175	: Ptr(Array(Float, 5 : Int))	= var
	store(%175, %174)
	let  %176	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%175, %x5Fpc1)
	store(%176, %t2)
	let  %177	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %178	: Ptr(Int)	= var
	store(%178, %177)
	store(%178, %x5Fpc1)
	ifElse(%x5Fbflag2, %179, %180, %179)

block %180:
	unconditionalBranch(%173)

block %173:
	unconditionalBranch(%181)

block %181:
	unconditionalBranch(%182)

block %182:
	unconditionalBranch(%183)

block %183:
	unconditionalBranch(%184)

block %184:
	unconditionalBranch(%185)

block %185:
	let  %186	: Ptr(Float)	= var
	store(%186, 0 : Float)
	let  %187	: Ptr(Float)	= var
	store(%187, 0 : Float)
	let  %188	: Float	= load(%186)
	let  %189	: Float	= add(%x5Fsx5FdOut, %188)
	store(%186, %189)
	unconditionalBranch(%190)

block %190:
	let  %191	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %192	: Int	= sub(%191, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%193, %194, %195, %192)

block %193(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %196	: Int	= add(%x5Fdc, 0 : Int)
	let  %197	: Float	= load(%186)
	store(%186, 0 : Float)
	let  %198	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%198, %199, %200, %199)

block %200:
	unconditionalBranch(%194, %197)

block %194(
		param %201	: Float):
	let  %202	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %203	: Float	= GetPrimalUserCode(%202)
	let  %204	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%203, %201)
	store(%dpy1, %204)
	return_val(void_constant)

block %199:
	unconditionalBranch(%205)

block %205:
	[primalInstDecoration]
	let  %206	: Bool	= cmpLT(%196, 3 : Int)
	ifElse(%206, %207, %208, %209)

block %208:
	unconditionalBranch(%209, 0 : Int)

block %207:
	unconditionalBranch(%209, 1 : Int)

block %209(
		[primalInstDecoration]
		param %210	: Int):
	unconditionalBranch(%211)

block %211:
	[primalInstDecoration]
	let  %212	: Bool	= cmpNE(%210, 1 : Int)
	ifElse(%212, %213, %214, %215)

block %214:
	unconditionalBranch(%215, true)

block %213:
	unconditionalBranch(%215, false)

block %215(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%216)

block %216:
	ifElse(%x5Fbflag3, %217, %218, %219)

block %218:
	unconditionalBranch(%219)

block %217:
	unconditionalBranch(%219)

block %219:
	unconditionalBranch(%220)

block %220:
	unconditionalBranch(%221, %197)

block %221(
		param %222	: Float):
	ifElse(%x5Fbflag3, %223, %224, %225)

block %224:
	unconditionalBranch(%226, %222)

block %226(
		param %227	: Float):
	let  %228	: Float	= load(%186)
	let  %229	: Float	= add(%227, %228)
	store(%186, %229)
	unconditionalBranch(%225)

block %223:
	unconditionalBranch(%230, %222)

block %230(
		param %231	: Float):
	let  %232	: Float	= load(%187)
	let  %233	: Float	= add(%231, %232)
	store(%187, %233)
	unconditionalBranch(%225)

block %225:
	unconditionalBranch(%234)

block %234:
	ifElse(%212, %235, %236, %237)

block %236:
	unconditionalBranch(%237)

block %235:
	unconditionalBranch(%237)

block %237:
	unconditionalBranch(%238)

block %238:
	let  %239	: Float	= load(%187)
	store(%187, 0 : Float)
	ifElse(%206, %240, %241, %242)

block %241:
	unconditionalBranch(%243)

block %243:
	unconditionalBranch(%242)

block %240:
	unconditionalBranch(%244, %239)

block %244(
		param %245	: Float):
	let  %246	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %247	: Ptr(Array(Float, 5 : Int))	= var
	store(%247, %246)
	let  %248	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%247, %x5Fdc)
	let  %249	: Float	= load(%248)
	let  %250	: Float	= mul(%249, %245)
	let  %251	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %252	: Ptr(Array(Float, 5 : Int))	= var
	store(%252, %251)
	let  %253	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%252, %x5Fdc)
	let  %254	: Float	= load(%253)
	let  %255	: Float	= mul(%254, %245)
	let  %256	: Float	= load(%186)
	let  %257	: Float	= add(%250, %255)
	let  %258	: Float	= add(%257, %256)
	store(%186, %258)
	unconditionalBranch(%242)

block %242:
	unconditionalBranch(%195)

block %195:
	[primalInstDecoration]
	let  %259	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%193, %259)

block %179:
	unconditionalBranch(%260)

block %260:
	[primalInstDecoration]
	let  %261	: Bool	= cmpLT(%i2, 3 : Int)
	ifElse(%261, %262, %263, %264)

block %263:
	unconditionalBranch(%264, 0 : Int, 0 : Float)

block %262:
	[primalInstDecoration]
	let  %265	: Float	= mul(%t2, %t2)
	unconditionalBranch(%264, 1 : Int, %265)

block %264(
		[primalInstDecoration]
		param %266	: Int,
		[primalInstDecoration]
		param %267	: Float):
	unconditionalBranch(%268)

block %268:
	[primalInstDecoration]
	let  %269	: Bool	= cmpNE(%266, 1 : Int)
	ifElse(%269, %270, %271, %272)

block %271:
	unconditionalBranch(%272, %x5Fbflag2)

block %270:
	unconditionalBranch(%272, false)

block %272(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool):
	unconditionalBranch(%273)

block %273:
	ifElse(%x5Fbflag4, %274, %275, %276)

block %275:
	unconditionalBranch(%276, %t2, %i2)

block %274:
	[primalInstDecoration]
	let  %277	: Int	= add(%i2, 1 : Int)
	unconditionalBranch(%276, %267, %277)

block %276(
		[primalInstDecoration]
		[nameHint("t")]
		param %t3	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i3	: Int):
	[primalInstDecoration]
	let  %278	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%172, %x5Fbflag4, %t3, %i3, %278)
}
[backwardDifferentiable]
func %157	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %279(
		param %280	: Array(Float, 5 : Int),
		param %281	: Array(Float, 5 : Int)):
	let  %282	: Ptr(Array(Float, 5 : Int))	= var
	loop(%283, %284, %283, 0 : Int)

block %283(
		param %285	: Int):
	let  %286	: Bool	= cmpLT(%285, 5 : Int)
	ifElse(%286, %287, %288, %288)

block %287:
	let  %289	: Float	= getElement(%280, %285)
	let  %290	: Float	= getElement(%281, %285)
	let  %291	: Float	= add(%289, %290)
	let  %292	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%282, %285)
	store(%292, %291)
	unconditionalBranch(%293)

block %288:
	unconditionalBranch(%284)

block %284:
	let  %294	: Array(Float, 5 : Int)	= load(%282)
	return_val(%294)

block %293:
	let  %295	: Int	= add(%285, 1 : Int)
	unconditionalBranch(%283, %295)
}
func %148	: Func(Array(Float, 5 : Int))
{
block %296:
	let  %297	: Array(Float, 5 : Int)	= makeArrayFromElement(0 : Float)
	return_val(%297)
}
witness_table %161	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%161)

	witness_table_entry(%24,%157)

	witness_table_entry(%22,%148)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### AFTER-AUTODIFF:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Void	= no_diff
let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[export("_ST4core15IDifferentiable12Differential")]
let  %18	: _	= key
let  %19	: _	= interface_req_entry(%18, associated_type(%IDifferentiable))
[export("_S4core15IDifferentiable12DifferentialI4core15IDifferentiable")]
let  %20	: _	= key
let  %21	: _	= interface_req_entry(%20, witness_table_t(%IDifferentiable))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable5dzerop0p4core15IDifferentiable12Differential")]
let  %22	: _	= key
let  %23	: _	= interface_req_entry(%22, Func(associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4daddp2pi_4core15IDifferentiable12Differentiali_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %24	: _	= key
let  %25	: _	= interface_req_entry(%24, Func(associated_type(%IDifferentiable), associated_type(%IDifferentiable), associated_type(%IDifferentiable)))
[StaticRequirementDecoration]
[export("_S4core15IDifferentiable4dmulg2TC4core15IDifferentiable1T4core17__BuiltinRealTypep2pi_4core15IDifferentiable1Ti_4core15IDifferentiable12Differential4core15IDifferentiable12Differential")]
let  %26	: _	= key
[export("_S4core17__BuiltinRealTypeI4core29__BuiltinSignedArithmeticType")]
let  %27	: _	= key
[export("_S4core29__BuiltinSignedArithmeticTypeI4core23__BuiltinArithmeticType")]
let  %28	: _	= key
[export("_S4core23__BuiltinArithmeticTypeI4core13__BuiltinType")]
let  %29	: _	= key
[BuiltinDecoration]
[export("_ST4core13__BuiltinType")]
[nameHint("__BuiltinType")]
let  %x5Fx5FBuiltinType	: Type	= interface
let  %30	: _	= interface_req_entry(%29, witness_table_t(%x5Fx5FBuiltinType))
[export("_S4core23__BuiltinArithmeticTypeI4core11IArithmetic")]
let  %31	: _	= key
[export("_S4core11IArithmeticI4core11IComparable")]
let  %32	: _	= key
[export("_S4core11IComparable6equalsp1pi_4core11IComparable4Thisb")]
let  %33	: _	= key
let  %34	: _	= interface_req_entry(%33, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable8lessThanp1pi_4core11IComparable4Thisb")]
let  %35	: _	= key
let  %36	: _	= interface_req_entry(%35, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_S4core11IComparable16lessThanOrEqualsp1pi_4core11IComparable4Thisb")]
let  %37	: _	= key
let  %38	: _	= interface_req_entry(%37, Func(Bool, this_type(%IComparable), this_type(%IComparable)))
[export("_ST4core11IComparable")]
[nameHint("IComparable")]
let  %IComparable	: Type	= interface(%34, %36, %38)
let  %39	: _	= interface_req_entry(%32, witness_table_t(%IComparable))
[export("_S4core11IArithmetic3addp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %40	: _	= key
let  %41	: _	= interface_req_entry(%40, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3subp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %42	: _	= key
let  %43	: _	= interface_req_entry(%42, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3mulp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %44	: _	= key
let  %45	: _	= interface_req_entry(%44, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3divp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %46	: _	= key
let  %47	: _	= interface_req_entry(%46, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3modp1pi_4core11IArithmetic4This4core11IArithmetic4This")]
let  %48	: _	= key
let  %49	: _	= interface_req_entry(%48, Func(this_type(%IArithmetic), this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmetic3negp0p4core11IArithmetic4This")]
let  %50	: _	= key
let  %51	: _	= interface_req_entry(%50, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_S4core11IArithmeticR8_24xinitp1pi_i")]
let  %52	: _	= key
let  %53	: _	= interface_req_entry(%52, Func(this_type(%IArithmetic), Int))
[export("_S4core11IArithmeticR8_24xinitp1pi_4core11IArithmetic4This")]
let  %54	: _	= key
let  %55	: _	= interface_req_entry(%54, Func(this_type(%IArithmetic), this_type(%IArithmetic)))
[export("_ST4core11IArithmetic")]
[nameHint("IArithmetic")]
let  %IArithmetic	: Type	= interface(%39, %41, %43, %45, %47, %49, %51, %53, %55)
let  %56	: _	= interface_req_entry(%31, witness_table_t(%IArithmetic))
[BuiltinDecoration]
[export("_ST4core23__BuiltinArithmeticType")]
[nameHint("__BuiltinArithmeticType")]
let  %x5Fx5FBuiltinArithmeticType	: Type	= interface(%30, %56)
let  %57	: _	= interface_req_entry(%28, witness_table_t(%x5Fx5FBuiltinArithmeticType))
[BuiltinDecoration]
[export("_ST4core29__BuiltinSignedArithmeticType")]
[nameHint("__BuiltinSignedArithmeticType")]
let  %x5Fx5FBuiltinSignedArithmeticType	: Type	= interface(%57)
let  %58	: _	= interface_req_entry(%27, witness_table_t(%x5Fx5FBuiltinSignedArithmeticType))
[BuiltinDecoration]
[export("_ST4core17__BuiltinRealType")]
[nameHint("__BuiltinRealType")]
let  %x5Fx5FBuiltinRealType	: Type	= interface(%58)
generic %59	: Generic
{
block %60(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("IDifferentiable.T")]
		param %IDifferentiablex5FT	: type_t,
		param %61	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(associated_type(%IDifferentiable), %IDifferentiablex5FT, associated_type(%IDifferentiable)))
}
let  %62	: _	= interface_req_entry(%26, %59)
[export("_ST4core15IDifferentiable")]
[nameHint("IDifferentiable")]
let  %IDifferentiable	: Type	= interface(%19, %21, %23, %25, %62)
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float5dzerop0pfb")]
[nameHint("float.dzero")]
func %floatx5Fdzero	: Func(Float)
{
block %63:
	return_val(0 : Float)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[unsafeForceInlineEarly]
[method]
[export("_S4core5float4daddp2pi_fi_ffb")]
[nameHint("float.dadd")]
func %floatx5Fdadd	: Func(Float, Float, Float)
{
block %64(
		[nameHint("a")]
		param %a	: Float,
		[nameHint("b")]
		param %b	: Float):
	let  %65	: Float	= add(%a, %b)
	return_val(%65)
}
generic %66	: Generic
{
block %67(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU	: type_t,
		param %68	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(Float, Attributed(%floatx5FU, %7), Float))
}
[export("_S4core5float4dmulg2TC4core5float1U4core17__BuiltinRealTypep2pi_4core5float1Ui_ffb")]
generic %69	: %66
{
block %70(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("float.U")]
		param %floatx5FU1	: type_t,
		param %71	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[backwardDifferentiable]
	[unsafeForceInlineEarly]
	[nameHint("float.dmul")]
		func %floatx5Fdmul	: Func(Float, Attributed(%floatx5FU1, %7), Float)
	{
block %72(
			[nameHint("a")]
			param %a1	: Attributed(%floatx5FU1, %7),
			[nameHint("b")]
			param %b1	: Float):
		let  %73	: Float	= floatCast(%a1)
		let  %74	: Float	= mul(%73, %b1)
		return_val(%74)
}
	return_val(%floatx5Fdmul)
}
[export("_SWf4core15IDifferentiable")]
witness_table %75	: witness_table_t(%IDifferentiable)(Float)
{
	witness_table_entry(%18,Float)

	witness_table_entry(%20,%75)

	witness_table_entry(%22,%floatx5Fdzero)

	witness_table_entry(%24,%floatx5Fdadd)

	witness_table_entry(%26,%69)

}

[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %76	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %76)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %77(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %78	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(1 : Float, 0 : Float)
	store(%dpa, %78)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %79	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %80	: DiffPairUserCode(Float, %75)	= load(%dpa)
	let  %81	: Float	= GetDifferentialUserCode(%80)
	store(%79, %81)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(DiffPairUserCode(Float, %75))	= var
	let  %82	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(0.4 : Float, 0 : Float)
	store(%dpa1, %82)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %83	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %84	: DiffPairUserCode(Float, %75)	= load(%dpa1)
	let  %85	: Float	= GetDifferentialUserCode(%84)
	store(%83, %85)
	return_val(void_constant)
}
[export("_SV16NullDifferential5dummy")]
[nameHint("dummy")]
let  %dummy	: _	= key
[AutoDiffBuiltinDecoration]
[keepAlive]
[hlslExport]
[export("_ST16NullDifferential")]
[nameHint("NullDifferential")]
struct %NullDifferential	: Type
{
	field(%dummy, UInt)
}

[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential5dzerop0p16NullDifferentialb")]
[nameHint("NullDifferential.dzero")]
func %NullDifferentialx5Fdzero	: Func(%NullDifferential)
{
block %86:
	let  %87	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%87)
}
[readNone]
[DifferentiableTypeDictionaryDecoration]
[ForceInline]
[backwardDifferentiable]
[method]
[export("_S16NullDifferential4daddp2pi_16NullDifferentiali_16NullDifferential16NullDifferentialb")]
[nameHint("NullDifferential.dadd")]
func %NullDifferentialx5Fdadd	: Func(%NullDifferential, %NullDifferential, %NullDifferential)
{
block %88(
		[nameHint("SLANG_anonymous_8")]
		param %SLANGx5Fanonymousx5F8_	: %NullDifferential,
		[nameHint("SLANG_anonymous_9")]
		param %SLANGx5Fanonymousx5F9_	: %NullDifferential):
	let  %89	: %NullDifferential	= makeStruct(0 : UInt)
	return_val(%89)
}
generic %90	: Generic
{
block %91(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT	: type_t,
		param %92	: witness_table_t(%x5Fx5FBuiltinRealType)):
	return_val(Func(%NullDifferential, Attributed(%NullDifferentialx5FT, %7), %NullDifferential))
}
[export("_S16NullDifferential4dmulg2TC16NullDifferential1T4core17__BuiltinRealTypep2pi_16NullDifferential1Ti_16NullDifferential16NullDifferentialb")]
generic %93	: %90
{
block %94(
		[TypeConstraintDecoration(%x5Fx5FBuiltinRealType)]
		[nameHint("NullDifferential.T")]
		param %NullDifferentialx5FT1	: type_t,
		param %95	: witness_table_t(%x5Fx5FBuiltinRealType)):
	[readNone]
	[DifferentiableTypeDictionaryDecoration]
	[ForceInline]
	[backwardDifferentiable]
	[nameHint("NullDifferential.dmul")]
		func %NullDifferentialx5Fdmul	: Func(%NullDifferential, Attributed(%NullDifferentialx5FT1, %7), %NullDifferential)
	{
block %96(
			[nameHint("SLANG_anonymous_10")]
			param %SLANGx5Fanonymousx5F10_	: Attributed(%NullDifferentialx5FT1, %7),
			[nameHint("SLANG_anonymous_11")]
			param %SLANGx5Fanonymousx5F11_	: %NullDifferential):
		let  %97	: %NullDifferential	= makeStruct(0 : UInt)
		return_val(%97)
}
	return_val(%NullDifferentialx5Fdmul)
}
[keepAlive]
[hlslExport]
[export("_SW16NullDifferential4core15IDifferentiable")]
witness_table %98	: witness_table_t(%IDifferentiable)(%NullDifferential)
{
	witness_table_entry(%18,%NullDifferential)

	witness_table_entry(%20,%98)

	witness_table_entry(%22,%NullDifferentialx5Fdzero)

	witness_table_entry(%24,%NullDifferentialx5Fdadd)

	witness_table_entry(%26,%93)

}

ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float)
{
block %99(
		param %100	: InOut(DiffPairUserCode(Float, %75)),
		param %101	: Float):
	let  %102	: DiffPairUserCode(Float, %75)	= load(%100)
	let  %103	: Float	= GetPrimalUserCode(%102)
	let  %104	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %105	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%103, %104)
	let  %106	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%104)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%100, %101, %106)
	return_val(void_constant)
}
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %107(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	unconditionalBranch(%108)

block %108:
	let  %109	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= defaultConstruct
	store(%x5Fsx5Fdiffx5Fctx, %109)
	let  %110	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %111)
	let  %112	: Ptr(Array(Float, 5 : Int))	= var
	let  %113	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%112, %113)
	let  %114	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%110, %114)
	let  %115	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %116)
	let  %117	: Ptr(Int)	= var
	store(%117, 0 : Int)
	store(%115, 0 : Int)
	unconditionalBranch(%118)

block %118:
	[loopMaxIters(4 : Int)]
	loop(%119, %120, %119, true, %dpy, 0 : Int, 0 : Int)

block %119(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc	: Int):
	let  %121	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%110, %x5Fpc)
	store(%121, %t)
	store(%115, %x5Fpc)
	ifElse(%x5Fbflag, %122, %123, %122)

block %123:
	unconditionalBranch(%120)

block %120:
	return_val(%t)

block %122:
	unconditionalBranch(%124)

block %124:
	[primalInstDecoration]
	let  %125	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%125, %126, %127, %128)

block %127:
	unconditionalBranch(%128, 0 : Int, 0 : Float)

block %126:
	[primalInstDecoration]
	let  %129	: Float	= mul(%t, %t)
	unconditionalBranch(%128, 1 : Int, %129)

block %128(
		[primalInstDecoration]
		param %130	: Int,
		[primalInstDecoration]
		param %131	: Float):
	unconditionalBranch(%132)

block %132:
	[primalInstDecoration]
	let  %133	: Bool	= cmpNE(%130, 1 : Int)
	ifElse(%133, %134, %135, %136)

block %135:
	unconditionalBranch(%136, %x5Fbflag)

block %134:
	unconditionalBranch(%136, false)

block %136(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%137)

block %137:
	ifElse(%x5Fbflag1, %138, %139, %140)

block %139:
	unconditionalBranch(%140, %t, %i)

block %138:
	[primalInstDecoration]
	let  %141	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%140, %131, %141)

block %140(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	[primalInstDecoration]
	let  %142	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%119, %x5Fbflag1, %t1, %i1, %142)
}
[derivativeMemberDecoration(%143)]
let  %111	: _	= key
let  %116	: _	= key
struct %144	: Type
{
	field(%143, Array(Float, 5 : Int))
}

func %145	: Func(%144)
{
block %146:
	let  %147	: Array(Float, 5 : Int)	= call %148()
	let  %149	: %144	= makeStruct(%147)
	return_val(%149)
}
func %150	: Func(%144)
{
block %151(
		param %152	: %144,
		param %153	: %144):
	let  %154	: Array(Float, 5 : Int)	= get_field(%152, %143)
	let  %155	: Array(Float, 5 : Int)	= get_field(%153, %143)
	let  %156	: Array(Float, 5 : Int)	= call %157(%154, %155)
	let  %158	: %144	= makeStruct(%156)
	return_val(%158)
}
witness_table %159	: witness_table_t(%IDifferentiable)(%144)
{
	witness_table_entry(%18,%144)

	witness_table_entry(%20,%159)

	witness_table_entry(%22,%145)

	witness_table_entry(%24,%150)

}

witness_table %160	: witness_table_t(%IDifferentiable)(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
	witness_table_entry(%18,%144)

	witness_table_entry(%20,%159)

	witness_table_entry(%22,%145)

	witness_table_entry(%24,%150)

}

[derivativeMemberDecoration(%143)]
let  %143	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	[IntermediateContextFieldDifferentialTypeDecoration(%161)]
	field(%111, Array(Float, 5 : Int))
	field(%116, Int)
}

[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPairUserCode(Float, %75)), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %162(
		[nameHint("dpy")]
		param %dpy1	: InOut(DiffPairUserCode(Float, %75)),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	unconditionalBranch(%163)

block %163:
	let  %164	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %165	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %166	: Ptr(Array(Float, 5 : Int))	= var
	store(%166, %165)
	store(%166, %164)
	let  %167	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %168	: Ptr(Int)	= var
	store(%168, %167)
	store(%168, 0 : Int)
	let  %169	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %170	: Float	= GetPrimalUserCode(%169)
	unconditionalBranch(%171)

block %171:
	[loopMaxIters(4 : Int)]
	loop(%172, %173, %172, true, %170, 0 : Int, 0 : Int)

block %172(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t2	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i2	: Int,
		[primalInstDecoration]
		[nameHint("_pc")]
		[loopCounterDecoration]
		param %x5Fpc1	: Int):
	let  %174	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %175	: Ptr(Array(Float, 5 : Int))	= var
	store(%175, %174)
	let  %176	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%175, %x5Fpc1)
	store(%176, %t2)
	let  %177	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %178	: Ptr(Int)	= var
	store(%178, %177)
	store(%178, %x5Fpc1)
	ifElse(%x5Fbflag2, %179, %180, %179)

block %180:
	unconditionalBranch(%173)

block %173:
	unconditionalBranch(%181)

block %181:
	unconditionalBranch(%182)

block %182:
	unconditionalBranch(%183)

block %183:
	unconditionalBranch(%184)

block %184:
	unconditionalBranch(%185)

block %185:
	let  %186	: Ptr(Float)	= var
	store(%186, 0 : Float)
	let  %187	: Ptr(Float)	= var
	store(%187, 0 : Float)
	let  %188	: Float	= load(%186)
	let  %189	: Float	= add(%x5Fsx5FdOut, %188)
	store(%186, %189)
	unconditionalBranch(%190)

block %190:
	let  %191	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %116)
	let  %192	: Int	= sub(%191, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%193, %194, %195, %192)

block %193(
		[primalInstDecoration]
		[nameHint("_dc")]
		param %x5Fdc	: Int):
	let  %196	: Int	= add(%x5Fdc, 0 : Int)
	let  %197	: Float	= load(%186)
	store(%186, 0 : Float)
	let  %198	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%198, %199, %200, %199)

block %200:
	unconditionalBranch(%194, %197)

block %194(
		param %201	: Float):
	let  %202	: DiffPairUserCode(Float, %75)	= load(%dpy1)
	let  %203	: Float	= GetPrimalUserCode(%202)
	let  %204	: DiffPairUserCode(Float, %75)	= MakeDiffPairUserCode(%203, %201)
	store(%dpy1, %204)
	return_val(void_constant)

block %199:
	unconditionalBranch(%205)

block %205:
	[primalInstDecoration]
	let  %206	: Bool	= cmpLT(%196, 3 : Int)
	ifElse(%206, %207, %208, %209)

block %208:
	unconditionalBranch(%209, 0 : Int)

block %207:
	unconditionalBranch(%209, 1 : Int)

block %209(
		[primalInstDecoration]
		param %210	: Int):
	unconditionalBranch(%211)

block %211:
	[primalInstDecoration]
	let  %212	: Bool	= cmpNE(%210, 1 : Int)
	ifElse(%212, %213, %214, %215)

block %214:
	unconditionalBranch(%215, true)

block %213:
	unconditionalBranch(%215, false)

block %215(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%216)

block %216:
	ifElse(%x5Fbflag3, %217, %218, %219)

block %218:
	unconditionalBranch(%219)

block %217:
	unconditionalBranch(%219)

block %219:
	unconditionalBranch(%220)

block %220:
	unconditionalBranch(%221, %197)

block %221(
		param %222	: Float):
	ifElse(%x5Fbflag3, %223, %224, %225)

block %224:
	unconditionalBranch(%226, %222)

block %226(
		param %227	: Float):
	let  %228	: Float	= load(%186)
	let  %229	: Float	= add(%227, %228)
	store(%186, %229)
	unconditionalBranch(%225)

block %223:
	unconditionalBranch(%230, %222)

block %230(
		param %231	: Float):
	let  %232	: Float	= load(%187)
	let  %233	: Float	= add(%231, %232)
	store(%187, %233)
	unconditionalBranch(%225)

block %225:
	unconditionalBranch(%234)

block %234:
	ifElse(%212, %235, %236, %237)

block %236:
	unconditionalBranch(%237)

block %235:
	unconditionalBranch(%237)

block %237:
	unconditionalBranch(%238)

block %238:
	let  %239	: Float	= load(%187)
	store(%187, 0 : Float)
	ifElse(%206, %240, %241, %242)

block %241:
	unconditionalBranch(%243)

block %243:
	unconditionalBranch(%242)

block %240:
	unconditionalBranch(%244, %239)

block %244(
		param %245	: Float):
	let  %246	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %247	: Ptr(Array(Float, 5 : Int))	= var
	store(%247, %246)
	let  %248	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%247, %x5Fdc)
	let  %249	: Float	= load(%248)
	let  %250	: Float	= mul(%249, %245)
	let  %251	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %111)
	let  %252	: Ptr(Array(Float, 5 : Int))	= var
	store(%252, %251)
	let  %253	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%252, %x5Fdc)
	let  %254	: Float	= load(%253)
	let  %255	: Float	= mul(%254, %245)
	let  %256	: Float	= load(%186)
	let  %257	: Float	= add(%250, %255)
	let  %258	: Float	= add(%257, %256)
	store(%186, %258)
	unconditionalBranch(%242)

block %242:
	unconditionalBranch(%195)

block %195:
	[primalInstDecoration]
	let  %259	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%193, %259)

block %179:
	unconditionalBranch(%260)

block %260:
	[primalInstDecoration]
	let  %261	: Bool	= cmpLT(%i2, 3 : Int)
	ifElse(%261, %262, %263, %264)

block %263:
	unconditionalBranch(%264, 0 : Int, 0 : Float)

block %262:
	[primalInstDecoration]
	let  %265	: Float	= mul(%t2, %t2)
	unconditionalBranch(%264, 1 : Int, %265)

block %264(
		[primalInstDecoration]
		param %266	: Int,
		[primalInstDecoration]
		param %267	: Float):
	unconditionalBranch(%268)

block %268:
	[primalInstDecoration]
	let  %269	: Bool	= cmpNE(%266, 1 : Int)
	ifElse(%269, %270, %271, %272)

block %271:
	unconditionalBranch(%272, %x5Fbflag2)

block %270:
	unconditionalBranch(%272, false)

block %272(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag4	: Bool):
	unconditionalBranch(%273)

block %273:
	ifElse(%x5Fbflag4, %274, %275, %276)

block %275:
	unconditionalBranch(%276, %t2, %i2)

block %274:
	[primalInstDecoration]
	let  %277	: Int	= add(%i2, 1 : Int)
	unconditionalBranch(%276, %267, %277)

block %276(
		[primalInstDecoration]
		[nameHint("t")]
		param %t3	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i3	: Int):
	[primalInstDecoration]
	let  %278	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%172, %x5Fbflag4, %t3, %i3, %278)
}
[backwardDifferentiable]
func %157	: Func(Array(Float, 5 : Int), Array(Float, 5 : Int), Array(Float, 5 : Int))
{
block %279(
		param %280	: Array(Float, 5 : Int),
		param %281	: Array(Float, 5 : Int)):
	let  %282	: Ptr(Array(Float, 5 : Int))	= var
	loop(%283, %284, %283, 0 : Int)

block %283(
		param %285	: Int):
	let  %286	: Bool	= cmpLT(%285, 5 : Int)
	ifElse(%286, %287, %288, %288)

block %287:
	let  %289	: Float	= getElement(%280, %285)
	let  %290	: Float	= getElement(%281, %285)
	let  %291	: Float	= add(%289, %290)
	let  %292	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%282, %285)
	store(%292, %291)
	unconditionalBranch(%293)

block %288:
	unconditionalBranch(%284)

block %284:
	let  %294	: Array(Float, 5 : Int)	= load(%282)
	return_val(%294)

block %293:
	let  %295	: Int	= add(%285, 1 : Int)
	unconditionalBranch(%283, %295)
}
func %148	: Func(Array(Float, 5 : Int))
{
block %296:
	let  %297	: Array(Float, 5 : Int)	= makeArrayFromElement(0 : Float)
	return_val(%297)
}
witness_table %161	: witness_table_t(%IDifferentiable)(Array(Float, 5 : Int))
{
	witness_table_entry(%18,Array(Float, 5 : Int))

	witness_table_entry(%20,%161)

	witness_table_entry(%24,%157)

	witness_table_entry(%22,%148)

}

GenericSpecializationDictionary
ExistentialFuncSpecializationDictionary
ExistentialTypeSpecializationDictionary
###
### BEFORE-LOWER-GENERICS:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
[nameHint("DiffPair_float")]
struct %DiffPairx5Ffloat	: Type
{
	field(%primal, Float)
	field(%differential, Float)
}

let  %7	: Void	= EntryPointLayout(%8, %9)
let  %9	: Void	= varLayout(%10)
let  %8	: Void	= varLayout(%11)
let  %11	: Void	= structTypeLayout(%12)
let  %12	: Void	= fieldLayout(%13, %14)
let  %14	: Void	= varLayout(%10, %15, %16)
let  %16	: Void	= stage(6 : Int)
let  %15	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %10	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %13	: _	= key
[export("_ST4core17IBufferDataLayout")]
[nameHint("IBufferDataLayout")]
let  %IBufferDataLayout	: Type	= interface
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %17	: witness_table_t(%IBufferDataLayout)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %17)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%7)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %18(
		[layout(%14)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(%DiffPairx5Ffloat)	= var
	let  %19	: %DiffPairx5Ffloat	= makeStruct(1 : Float, 0 : Float)
	store(%dpa, %19)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %20	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %21	: %DiffPairx5Ffloat	= load(%dpa)
	let  %22	: Float	= get_field(%21, %differential)
	store(%20, %22)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(%DiffPairx5Ffloat)	= var
	let  %23	: %DiffPairx5Ffloat	= makeStruct(0.4 : Float, 0 : Float)
	store(%dpa1, %23)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %24	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %25	: %DiffPairx5Ffloat	= load(%dpa1)
	let  %26	: Float	= get_field(%25, %differential)
	store(%24, %26)
	return_val(void_constant)
}
[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float)
{
block %27(
		param %28	: InOut(%DiffPairx5Ffloat),
		param %29	: Float):
	let  %30	: %DiffPairx5Ffloat	= load(%28)
	let  %31	: Float	= get_field(%30, %primal)
	let  %32	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %33	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%31, %32)
	let  %34	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%32)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%28, %29, %34)
	return_val(void_constant)
}
[readNone]
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %35(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	let  %36	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %37	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= makeStruct(%36, 0 : Int)
	store(%x5Fsx5Fdiffx5Fctx, %37)
	let  %38	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %39)
	let  %40	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%38, %40)
	let  %41	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %42)
	store(%41, 0 : Int)
	[loopMaxIters(4 : Int)]
	loop(%43, %44, %43, true, %dpy, 0 : Int, 0 : Int)

block %43(
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int,
		[nameHint("_pc")]
		param %x5Fpc	: Int):
	let  %45	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%38, %x5Fpc)
	store(%45, %t)
	store(%41, %x5Fpc)
	ifElse(%x5Fbflag, %46, %47, %46)

block %47:
	unconditionalBranch(%44)

block %44:
	return_val(%t)

block %46:
	unconditionalBranch(%48)

block %48:
	let  %49	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%49, %50, %51, %52)

block %51:
	unconditionalBranch(%52, 0 : Int, 0 : Float)

block %50:
	let  %53	: Float	= mul(%t, %t)
	unconditionalBranch(%52, 1 : Int, %53)

block %52(
		param %54	: Int,
		param %55	: Float):
	unconditionalBranch(%56)

block %56:
	let  %57	: Bool	= cmpNE(%54, 1 : Int)
	ifElse(%57, %58, %59, %60)

block %59:
	unconditionalBranch(%60, %x5Fbflag)

block %58:
	unconditionalBranch(%60, false)

block %60(
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%61)

block %61:
	ifElse(%x5Fbflag1, %62, %63, %64)

block %63:
	unconditionalBranch(%64, %t, %i)

block %62:
	let  %65	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%64, %55, %65)

block %64(
		[nameHint("t")]
		param %t1	: Float,
		[nameHint("i")]
		param %i1	: Int):
	let  %66	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%43, %x5Fbflag1, %t1, %i1, %66)
}
let  %39	: _	= key
let  %42	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	field(%39, Array(Float, 5 : Int))
	field(%42, Int)
}

[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %67(
		[nameHint("dpy")]
		param %dpy1	: InOut(%DiffPairx5Ffloat),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	let  %68	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %69	: Float	= get_field(%68, %primal)
	[loopMaxIters(4 : Int)]
	loop(%70, %71, %70, true, %69, 0 : Int, 0 : Int)

block %70(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t2	: Float,
		[nameHint("i")]
		param %i2	: Int,
		[nameHint("_pc")]
		param %x5Fpc1	: Int):
	let  %72	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %39)
	let  %73	: Ptr(Array(Float, 5 : Int))	= var
	store(%73, %72)
	let  %74	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%73, %x5Fpc1)
	store(%74, %t2)
	ifElse(%x5Fbflag2, %75, %76, %75)

block %76:
	unconditionalBranch(%71)

block %71:
	unconditionalBranch(%77)

block %77:
	let  %78	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %42)
	let  %79	: Int	= sub(%78, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%80, %81, %82, %79, %x5Fsx5FdOut)

block %80(
		[nameHint("_dc")]
		param %x5Fdc	: Int,
		param %83	: Float):
	let  %84	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%84, %85, %86, %85)

block %86:
	unconditionalBranch(%81)

block %81:
	let  %87	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %88	: Float	= get_field(%87, %primal)
	let  %89	: %DiffPairx5Ffloat	= makeStruct(%88, %83)
	store(%dpy1, %89)
	return_val(void_constant)

block %85:
	unconditionalBranch(%90)

block %90:
	let  %91	: Bool	= cmpLT(%x5Fdc, 3 : Int)
	ifElse(%91, %92, %93, %94)

block %93:
	unconditionalBranch(%94, 0 : Int)

block %92:
	unconditionalBranch(%94, 1 : Int)

block %94(
		param %95	: Int):
	unconditionalBranch(%96)

block %96:
	let  %97	: Bool	= cmpNE(%95, 1 : Int)
	let  %98	: Bool	= not(%97)
	ifElse(%98, %99, %100, %101)

block %100:
	unconditionalBranch(%101, 0 : Float, %83)

block %99:
	unconditionalBranch(%101, %83, 0 : Float)

block %101(
		param %102	: Float,
		param %103	: Float):
	unconditionalBranch(%104)

block %104:
	ifElse(%91, %105, %106, %107)

block %106:
	unconditionalBranch(%107, %103)

block %105:
	let  %108	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %39)
	let  %109	: Float	= getElement(%108, %x5Fdc)
	let  %110	: Float	= mul(%109, %102)
	let  %111	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %39)
	let  %112	: Float	= getElement(%111, %x5Fdc)
	let  %113	: Float	= mul(%112, %102)
	let  %114	: Float	= add(%110, %113)
	let  %115	: Float	= add(%114, %103)
	unconditionalBranch(%107, %115)

block %107(
		param %116	: Float):
	unconditionalBranch(%82)

block %82:
	let  %117	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%80, %117, %116)

block %75:
	unconditionalBranch(%118)

block %118:
	let  %119	: Bool	= cmpLT(%i2, 3 : Int)
	ifElse(%119, %120, %121, %122)

block %121:
	unconditionalBranch(%122, 0 : Int, 0 : Float)

block %120:
	let  %123	: Float	= mul(%t2, %t2)
	unconditionalBranch(%122, 1 : Int, %123)

block %122(
		param %124	: Int,
		param %125	: Float):
	unconditionalBranch(%126)

block %126:
	let  %127	: Bool	= cmpNE(%124, 1 : Int)
	ifElse(%127, %128, %129, %130)

block %129:
	unconditionalBranch(%130, %x5Fbflag2)

block %128:
	unconditionalBranch(%130, false)

block %130(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%131)

block %131:
	ifElse(%x5Fbflag3, %132, %133, %134)

block %133:
	unconditionalBranch(%134, %t2, %i2)

block %132:
	let  %135	: Int	= add(%i2, 1 : Int)
	unconditionalBranch(%134, %125, %135)

block %134(
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	let  %136	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%70, %x5Fbflag3, %t3, %i3, %136)
}
[nameHint("primal")]
let  %primal	: _	= key
[nameHint("differential")]
let  %differential	: _	= key
###
### AFTER-LOWER-GENERICS:
undefined
let  %1	: Void	= varLayout(%2, %3)
let  %3	: Void	= offset(9 : Int, 0 : Int)
let  %2	: Void	= structuredBufferTypeLayout(%4, %5)
let  %5	: Void	= size(9 : Int, 1 : Int)
let  %4	: Void	= typeLayout(%6)
let  %6	: Void	= size(8 : Int, 4 : Int)
let  %7	: Vec(UInt, 2 : Int)	= makeVector(0 : UInt, 0 : UInt)
[nameHint("DiffPair_float")]
struct %DiffPairx5Ffloat	: Type
{
	field(%primal, Float)
	field(%differential, Float)
}

let  %8	: Void	= EntryPointLayout(%9, %10)
let  %10	: Void	= varLayout(%11)
let  %9	: Void	= varLayout(%12)
let  %12	: Void	= structTypeLayout(%13)
let  %13	: Void	= fieldLayout(%14, %15)
let  %15	: Void	= varLayout(%11, %16, %17)
let  %17	: Void	= stage(6 : Int)
let  %16	: Void	= systemValueSemantic("SV_DispatchThreadID", 0 : Int)
let  %11	: Void	= typeLayout
[keepAlive]
global_hashed_string_literals("HLSL supports only float and half type textures", "Unsupported \'Load\' of \'texture cube array\' for \'metal\' target", "Unsupported \'Load\' of \'texture\' for \'metal\' target", "Unsupported \'Store\' of \'texture cube array\' for \'metal\' target", "Unable to use float with Atomicadd", "Atomic must be applied to a scalar texture or non-texture", "__metalImageInterlocked only allows \'int\'/\'uint\' textures", "__metalImageInterlocked implementation only allows \'uint\' coordinates", "Atomic must be applied to scalar texture or non-texture", "Unable to use float with Atomicand", "Unable to use float with Atomicexchange", "Metal atomic texture operations only allow \'int\'/\'uint\' textures", "Unable to use float with Atomicmax", "Unable to use float with Atomicmin", "Unable to use float with Atomicor", "Unable to use float with Atomicxor", "GL_EXT_shader_atomic_int64", "float atomic texture operations are disallowed with Metal target\'s", "\'float\' atomic texture operations are disallowed with Metal target\'s", "GL_EXT_shader_subgroup_extended_types_float16")
let  %14	: _	= key
[SequentialIDDecoration(0 : UInt)]
[export("_SW4core17DefaultDataLayout4core17IBufferDataLayout")]
witness_table %18	: witness_table_t(0 : Int)(DefaultLayout);

[nameHint("outputBuffer")]
[export("_SVR15reverse_2Dxloop12outputBuffer")]
[layout(%1)]
let  %outputBuffer	: RWStructuredBuffer(Float, DefaultLayout, %7)	= global_param
[keepAlive]
[entryPoint(6 : Int, "computeMain", "reverse-loop")]
[numThreads(1 : Int, 1 : Int, 1 : Int)]
[export("_SR15reverse_2Dxloop11computeMainp1pi_v3uV")]
[nameHint("computeMain")]
[layout(%8)]
func %computeMain	: Func(Void, Vec(UInt, 3 : Int))
{
block %19(
		[layout(%15)]
		[nameHint("dispatchThreadID")]
		[semantic("SV_DispatchThreadID", 0 : Int)]
		param %dispatchThreadID	: Vec(UInt, 3 : Int)):
	[nameHint("dpa")]
	let  %dpa	: Ptr(%DiffPairx5Ffloat)	= var
	let  %20	: %DiffPairx5Ffloat	= makeStruct(1 : Float, 0 : Float)
	store(%dpa, %20)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa, 1 : Float)
	let  %21	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 0 : Int)
	let  %22	: %DiffPairx5Ffloat	= load(%dpa)
	let  %23	: Float	= get_field(%22, %differential)
	store(%21, %23)
	[nameHint("dpa")]
	let  %dpa1	: Ptr(%DiffPairx5Ffloat)	= var
	let  %24	: %DiffPairx5Ffloat	= makeStruct(0.4 : Float, 0 : Float)
	store(%dpa1, %24)
	call %sx5Fbwdx5Ftestx5Fsimplex5Floop(%dpa1, 1 : Float)
	let  %25	: Ptr(Float)	= rwstructuredBufferGetElementPtr(%outputBuffer, 1 : Int)
	let  %26	: %DiffPairx5Ffloat	= load(%dpa1)
	let  %27	: Float	= get_field(%26, %differential)
	store(%25, %27)
	return_val(void_constant)
}
[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_test_simple_loop")]
func %sx5Fbwdx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float)
{
block %28(
		param %29	: InOut(%DiffPairx5Ffloat),
		param %30	: Float):
	let  %31	: %DiffPairx5Ffloat	= load(%29)
	let  %32	: Float	= get_field(%31, %primal)
	let  %33	: Ptr(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)	= var
	let  %34	: Float	= call %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop(%32, %33)
	let  %35	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= load(%33)
	call %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop(%29, %30, %35)
	return_val(void_constant)
}
[readNone]
[nameHint("s_primal_ctx_test_simple_loop")]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
func %sx5Fprimalx5Fctxx5Ftestx5Fsimplex5Floop	: Func(Float, Float, Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates))
{
block %36(
		[nameHint("dpy")]
		param %dpy	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx	: Out(%sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)):
	let  %37	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	let  %38	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	= makeStruct(%37, 0 : Int)
	store(%x5Fsx5Fdiffx5Fctx, %38)
	let  %39	: Ptr(Array(Float, 5 : Int))	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %40)
	let  %41	: Array(Float, 5 : Int)	= makeArray(0 : Float, 0 : Float, 0 : Float, 0 : Float, 0 : Float)
	store(%39, %41)
	let  %42	: Ptr(Int)	= get_field_addr(%x5Fsx5Fdiffx5Fctx, %43)
	store(%42, 0 : Int)
	[loopMaxIters(4 : Int)]
	loop(%44, %45, %44, true, %dpy, 0 : Int, 0 : Int)

block %44(
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[nameHint("t")]
		param %t	: Float,
		[nameHint("i")]
		param %i	: Int,
		[nameHint("_pc")]
		param %x5Fpc	: Int):
	let  %46	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%39, %x5Fpc)
	store(%46, %t)
	store(%42, %x5Fpc)
	ifElse(%x5Fbflag, %47, %48, %47)

block %48:
	unconditionalBranch(%45)

block %45:
	return_val(%t)

block %47:
	unconditionalBranch(%49)

block %49:
	let  %50	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%50, %51, %52, %53)

block %52:
	unconditionalBranch(%53, 0 : Int, 0 : Float)

block %51:
	let  %54	: Float	= mul(%t, %t)
	unconditionalBranch(%53, 1 : Int, %54)

block %53(
		param %55	: Int,
		param %56	: Float):
	unconditionalBranch(%57)

block %57:
	let  %58	: Bool	= cmpNE(%55, 1 : Int)
	ifElse(%58, %59, %60, %61)

block %60:
	unconditionalBranch(%61, %x5Fbflag)

block %59:
	unconditionalBranch(%61, false)

block %61(
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%62)

block %62:
	ifElse(%x5Fbflag1, %63, %64, %65)

block %64:
	unconditionalBranch(%65, %t, %i)

block %63:
	let  %66	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%65, %56, %66)

block %65(
		[nameHint("t")]
		param %t1	: Float,
		[nameHint("i")]
		param %i1	: Int):
	let  %67	: Int	= add(%x5Fpc, 1 : Int)
	unconditionalBranch(%44, %x5Fbflag1, %t1, %i1, %67)
}
let  %40	: _	= key
let  %43	: _	= key
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	field(%40, Array(Float, 5 : Int))
	field(%43, Int)
}

[readNone]
[FloatingPointModeOverride(1 : Int)]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(%DiffPairx5Ffloat), Float, %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates)
{
block %68(
		[nameHint("dpy")]
		param %dpy1	: InOut(%DiffPairx5Ffloat),
		[nameHint("_s_dOut")]
		param %x5Fsx5FdOut	: Float,
		[nameHint("_s_diff_ctx")]
		param %x5Fsx5Fdiffx5Fctx1	: %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates):
	let  %69	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %70	: Float	= get_field(%69, %primal)
	[loopMaxIters(4 : Int)]
	loop(%71, %72, %71, true, %70, 0 : Int, 0 : Int)

block %71(
		[nameHint("_bflag")]
		param %x5Fbflag2	: Bool,
		[nameHint("t")]
		param %t2	: Float,
		[nameHint("i")]
		param %i2	: Int,
		[nameHint("_pc")]
		param %x5Fpc1	: Int):
	let  %73	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %40)
	let  %74	: Ptr(Array(Float, 5 : Int))	= var
	store(%74, %73)
	let  %75	: Ptr(Float, 2147483647 : UInt64)	= getElementPtr(%74, %x5Fpc1)
	store(%75, %t2)
	ifElse(%x5Fbflag2, %76, %77, %76)

block %77:
	unconditionalBranch(%72)

block %72:
	unconditionalBranch(%78)

block %78:
	let  %79	: Int	= get_field(%x5Fsx5Fdiffx5Fctx1, %43)
	let  %80	: Int	= sub(%79, 1 : Int)
	[loopMaxIters(4 : Int)]
	loop(%81, %82, %83, %80, %x5Fsx5FdOut)

block %81(
		[nameHint("_dc")]
		param %x5Fdc	: Int,
		param %84	: Float):
	let  %85	: Bool	= cmpGE(%x5Fdc, 0 : Int)
	ifElse(%85, %86, %87, %86)

block %87:
	unconditionalBranch(%82)

block %82:
	let  %88	: %DiffPairx5Ffloat	= load(%dpy1)
	let  %89	: Float	= get_field(%88, %primal)
	let  %90	: %DiffPairx5Ffloat	= makeStruct(%89, %84)
	store(%dpy1, %90)
	return_val(void_constant)

block %86:
	unconditionalBranch(%91)

block %91:
	let  %92	: Bool	= cmpLT(%x5Fdc, 3 : Int)
	ifElse(%92, %93, %94, %95)

block %94:
	unconditionalBranch(%95, 0 : Int)

block %93:
	unconditionalBranch(%95, 1 : Int)

block %95(
		param %96	: Int):
	unconditionalBranch(%97)

block %97:
	let  %98	: Bool	= cmpNE(%96, 1 : Int)
	let  %99	: Bool	= not(%98)
	ifElse(%99, %100, %101, %102)

block %101:
	unconditionalBranch(%102, 0 : Float, %84)

block %100:
	unconditionalBranch(%102, %84, 0 : Float)

block %102(
		param %103	: Float,
		param %104	: Float):
	unconditionalBranch(%105)

block %105:
	ifElse(%92, %106, %107, %108)

block %107:
	unconditionalBranch(%108, %104)

block %106:
	let  %109	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %40)
	let  %110	: Float	= getElement(%109, %x5Fdc)
	let  %111	: Float	= mul(%110, %103)
	let  %112	: Array(Float, 5 : Int)	= get_field(%x5Fsx5Fdiffx5Fctx1, %40)
	let  %113	: Float	= getElement(%112, %x5Fdc)
	let  %114	: Float	= mul(%113, %103)
	let  %115	: Float	= add(%111, %114)
	let  %116	: Float	= add(%115, %104)
	unconditionalBranch(%108, %116)

block %108(
		param %117	: Float):
	unconditionalBranch(%83)

block %83:
	let  %118	: Int	= sub(%x5Fdc, 1 : Int)
	unconditionalBranch(%81, %118, %117)

block %76:
	unconditionalBranch(%119)

block %119:
	let  %120	: Bool	= cmpLT(%i2, 3 : Int)
	ifElse(%120, %121, %122, %123)

block %122:
	unconditionalBranch(%123, 0 : Int, 0 : Float)

block %121:
	let  %124	: Float	= mul(%t2, %t2)
	unconditionalBranch(%123, 1 : Int, %124)

block %123(
		param %125	: Int,
		param %126	: Float):
	unconditionalBranch(%127)

block %127:
	let  %128	: Bool	= cmpNE(%125, 1 : Int)
	ifElse(%128, %129, %130, %131)

block %130:
	unconditionalBranch(%131, %x5Fbflag2)

block %129:
	unconditionalBranch(%131, false)

block %131(
		[nameHint("_bflag")]
		param %x5Fbflag3	: Bool):
	unconditionalBranch(%132)

block %132:
	ifElse(%x5Fbflag3, %133, %134, %135)

block %134:
	unconditionalBranch(%135, %t2, %i2)

block %133:
	let  %136	: Int	= add(%i2, 1 : Int)
	unconditionalBranch(%135, %126, %136)

block %135(
		[nameHint("t")]
		param %t3	: Float,
		[nameHint("i")]
		param %i3	: Int):
	let  %137	: Int	= add(%x5Fpc1, 1 : Int)
	unconditionalBranch(%71, %x5Fbflag3, %t3, %i3, %137)
}
[nameHint("primal")]
let  %primal	: _	= key
[nameHint("differential")]
let  %differential	: _	= key
###
checking for checkpointing structures:
checkpoint intermediate struct
sourceLocs: 1514954 (1)
[nameHint("s_bwd_prop_test_simple_loop_Intermediates")]
[CheckpointIntermediateDecoration]
struct %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floopx5FIntermediates	: Type
{
	field(%1, Array(Float, 5 : Int))
	field(%2, Int)
}


tests/autodiff/reverse-loop.slang(12): note: also see pipeline definition
float test_simple_loop(float y)
      ^~~~~~~~~~~~~~~~
size of struct: 24 (4)
fields:	sourceLocs: 1514994 (1)
	[Offset(0 : Int, 0 : Int)]
field(%1, Array(Float, 5 : Int))

