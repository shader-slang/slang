BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE
BACKWARD DIFFERENTIATE PRIMAL
BACKWARD DIFFERENTIATE PROPOGATE
(result before eliminating phis)===============================
inst with location: 1514954 (1)
[nameHint("y")]
let  %y	: Float	= param

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %y, 0 : Int)

inst with location: 1514994 (1)
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[nameHint("i")]
let  %i	: Int	= param

inst with location: 1515008 (1)
loop(%1, %2, %1)

inst with location: 1515026 (1)
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 1515008 (1)
ifElse(%1, %2, %3, %2)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515058 (1)
let  %1	: Float	= mul(%t, %t)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515008 (1)
unconditionalBranch(%1)

inst with location: 1515032 (1)
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 1515008 (1)
unconditionalBranch(%1, %2, %3)

inst with location: 1515077 (1)
return_val(%t)

(fwdDiffFunc from generateNewForwardDerivative)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[forwardDifferentiable]
[nameHint("s_fwd_test_simple_loop")]
func %sx5Ffwdx5Ftestx5Fsimplex5Floop	: Func(DiffPair(Float, %1), DiffPair(Float, %1))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	[diffInstDecoration(Float)]
	let  %3	: Float	= GetDifferential(%dpy)
	[primalInstDecoration]
	let  %4	: Float	= GetPrimal(%dpy)
	[mixedDiffInstDecoration(<null>)]
	[loopMaxIters(4 : Int)]
	loop(%5, %6, %5, true, %4, %3, 0 : Int)

block %5(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag, %7, %8, %7)

block %8:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%6)

block %6:
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	let  %9	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[mixedDiffInstDecoration(DiffPair(Float, %1))]
	return_val(%9)

block %7:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%10)

block %10:
	[primalInstDecoration]
	let  %11	: Bool	= cmpLT(%i, 3 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%11, %12, %13, %14)

block %13:
	[diffInstDecoration(Float)]
	let  %15	: Float	= call %floatx5Fdzero()
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 0 : Int, 0 : Float, %15)

block %12:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	[diffInstDecoration(Float)]
	let  %17	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %18	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %19	: Float	= add(%17, %18)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%14, 1 : Int, %16, %19)

block %14(
		[primalInstDecoration]
		param %20	: Int,
		[primalInstDecoration]
		param %21	: Float,
		[diffInstDecoration(Float)]
		param %22	: Float):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%23)

block %23:
	[primalInstDecoration]
	let  %24	: Bool	= cmpNE(%20, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	ifElse(%24, %25, %26, %27)

block %26:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, %x5Fbflag)

block %25:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%27, false)

block %27(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%28)

block %28:
	[mixedDiffInstDecoration(<null>)]
	ifElse(%x5Fbflag1, %29, %30, %31)

block %30:
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %t, %sx5Fdiffx5Ft, %i)

block %29:
	[primalInstDecoration]
	let  %32	: Int	= add(%i, 1 : Int)
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%31, %21, %22, %32)

block %31(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	[mixedDiffInstDecoration(<null>)]
	unconditionalBranch(%5, %x5Fbflag1, %t1, %sx5Fdiffx5Ft1, %i1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 1514954 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= GetDifferential(%dpy)

inst with location: 1514954 (1)
[primalInstDecoration]
let  %1	: Float	= GetPrimal(%dpy)

inst with location: 1515008 (1)
[mixedDiffInstDecoration(<null>)]
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, %4, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
let  %2	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 1515077 (1)
[mixedDiffInstDecoration(DiffPair(Float, %1))]
return_val(%2)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 0 : Int, 0 : Float, %2)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, 1 : Int, %2, %3)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %t, %sx5Fdiffx5Ft, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %2, %3, %4)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
[mixedDiffInstDecoration(<null>)]
unconditionalBranch(%1, %x5Fbflag, %t, %sx5Fdiffx5Ft, %i)

(diffPropagateFunc after unzipping)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop));


(unzipDiffInsts)===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(diffPropagateFunc moving blocks)===============================
[FloatingPointModeOverride(1 : Int)]
[DifferentiableTypeDictionaryDecoration]
[backwardDifferentiable]
[nameHint("s_bwd_prop_test_simple_loop")]
func %sx5Fbwdx5Fpropx5Ftestx5Fsimplex5Floop	: Func(Void, InOut(DiffPair(Float, %1)), Float, BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop))
{
block %2(
		[nameHint("dpy")]
		param %dpy	: DiffPair(Float, %1)):
	let  %3	: Float	= PrimalParamRef(%dpy)
	[diffInstDecoration(Float)]
	let  %4	: Float	= DiffParamRef(%dpy)
	unconditionalBranch(%5)

block %5:
	[loopMaxIters(4 : Int)]
	loop(%6, %7, %6, true, %3, 0 : Int)

block %6(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag	: Bool,
		[primalInstDecoration]
		[nameHint("t")]
		param %t	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i	: Int):
	ifElse(%x5Fbflag, %8, %9, %8)

block %9:
	unconditionalBranch(%7)

block %7:
	[BackwardDerivativePrimalReturnDecoration(%t)]
	unconditionalBranch(%10)

block %8:
	unconditionalBranch(%11)

block %11:
	[primalInstDecoration]
	let  %12	: Bool	= cmpLT(%i, 3 : Int)
	ifElse(%12, %13, %14, %15)

block %14:
	unconditionalBranch(%15, 0 : Int, 0 : Float)

block %13:
	[primalInstDecoration]
	let  %16	: Float	= mul(%t, %t)
	unconditionalBranch(%15, 1 : Int, %16)

block %15(
		[primalInstDecoration]
		param %17	: Int,
		[primalInstDecoration]
		param %18	: Float):
	unconditionalBranch(%19)

block %19:
	[primalInstDecoration]
	let  %20	: Bool	= cmpNE(%17, 1 : Int)
	ifElse(%20, %21, %22, %23)

block %22:
	unconditionalBranch(%23, %x5Fbflag)

block %21:
	unconditionalBranch(%23, false)

block %23(
		[primalInstDecoration]
		[nameHint("_bflag")]
		param %x5Fbflag1	: Bool):
	unconditionalBranch(%24)

block %24:
	ifElse(%x5Fbflag1, %25, %26, %27)

block %26:
	unconditionalBranch(%27, %t, %i)

block %25:
	[primalInstDecoration]
	let  %28	: Int	= add(%i, 1 : Int)
	unconditionalBranch(%27, %18, %28)

block %27(
		[primalInstDecoration]
		[nameHint("t")]
		param %t1	: Float,
		[primalInstDecoration]
		[nameHint("i")]
		param %i1	: Int):
	unconditionalBranch(%6, %x5Fbflag1, %t1, %i1)

block %10:
	[loopMaxIters(4 : Int)]
	loop(%29, %30, %29, %4)

block %29(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft	: Float):
	ifElse(%x5Fbflag, %31, %32, %31)

block %32:
	unconditionalBranch(%30)

block %30:
	[diffInstDecoration(Float)]
	let  %33	: DiffPair(Float, %1)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)
	[diffInstDecoration(Float)]
	return_val(%33)

block %31:
	unconditionalBranch(%34)

block %34:
	ifElse(%12, %35, %36, %37)

block %36:
	[diffInstDecoration(Float)]
	let  %38	: Float	= call %floatx5Fdzero()
	unconditionalBranch(%37, %38)

block %35:
	[diffInstDecoration(Float)]
	let  %39	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %40	: Float	= mul(%sx5Fdiffx5Ft, %t)
	[diffInstDecoration(Float)]
	let  %41	: Float	= add(%39, %40)
	unconditionalBranch(%37, %41)

block %37(
		[diffInstDecoration(Float)]
		param %42	: Float):
	unconditionalBranch(%43)

block %43:
	ifElse(%20, %44, %45, %46)

block %45:
	unconditionalBranch(%46)

block %44:
	unconditionalBranch(%46)

block %46:
	unconditionalBranch(%47)

block %47:
	ifElse(%x5Fbflag1, %48, %49, %50)

block %49:
	unconditionalBranch(%50, %sx5Fdiffx5Ft)

block %48:
	unconditionalBranch(%50, %42)

block %50(
		[diffInstDecoration(Float)]
		[nameHint("s_diff_t")]
		param %sx5Fdiffx5Ft1	: Float):
	unconditionalBranch(%29, %sx5Fdiffx5Ft1)
}

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: DiffPair(Float, %1)	= param

inst with location: 0 (0)
let  %1	: Float	= PrimalParamRef(%dpy)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= DiffParamRef(%dpy)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, true, %3, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
loop(%1, %2, %1, %3)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%t, %sx5Fdiffx5Ft)

inst with location: 0 (0)
[diffInstDecoration(Float)]
return_val(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= mul(%sx5Fdiffx5Ft, %t)

inst with location: 1515058 (1)
[diffInstDecoration(Float)]
let  %1	: Float	= add(%2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
[diffInstDecoration(Float)]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 1514994 (1)
[diffInstDecoration(Float)]
[nameHint("s_diff_t")]
let  %sx5Fdiffx5Ft	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1, %sx5Fdiffx5Ft)

(applyCheckpointPolicy) ===============================
inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: Float	= param

inst with location: 0 (0)
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

inst with location: 0 (0)
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

inst with location: 0 (0)
[nameHint("_s_diff_ctx")]
let  %x5Fsx5Fdiffx5Fctx	: BwdDiffIntermediateCtxType(%testx5Fsimplex5Floop)	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
[keepAlive]
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515008 (1)
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[BackwardDerivativePrimalReturnDecoration(%t)]
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
let  %1	: Ptr(Float)	= var

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%x5Fsx5FdOut, %2)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[diffInstDecoration(Void, %1)]
[loopMaxIters(4 : Int)]
loop(%2, %3, %4)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= load(%dpy)

inst with location: 0 (0)
let  %1	: Float	= GetPrimal(%2)

inst with location: 0 (0)
let  %1	: DiffPair(Float, %2)	= MakeDiffPair(%3, %4)

inst with location: 0 (0)
store(%dpy, %1)

inst with location: 0 (0)
return_val(void_constant)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdzero()

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1, %2)

inst with location: 0 (0)
let  %1	: Float	= param

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= mul(%t, %2)

inst with location: 0 (0)
let  %1	: Float	= load(%2)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
let  %1	: Float	= call %floatx5Fdadd(%2, %3)

inst with location: 0 (0)
store(%1, %2)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 1515026 (1)
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, 0 : Int, 0 : Float)

inst with location: 1515058 (1)
[primalInstDecoration]
let  %1	: Float	= mul(%t, %t)

inst with location: 0 (0)
unconditionalBranch(%1, 1 : Int, %2)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Int	= param

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Float	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

inst with location: 0 (0)
ifElse(%1, %2, %3, %4)

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag)

inst with location: 0 (0)
unconditionalBranch(%1, false)

inst with location: 0 (0)
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

inst with location: 0 (0)
unconditionalBranch(%1)

inst with location: 0 (0)
ifElse(%x5Fbflag, %1, %2, %3)

inst with location: 0 (0)
unconditionalBranch(%1, %t, %i)

inst with location: 1515032 (1)
[primalInstDecoration]
let  %1	: Int	= add(%i, 1 : Int)

inst with location: 0 (0)
unconditionalBranch(%1, %2, %3)

inst with location: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1515017 (1)
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

inst with location: 0 (0)
unconditionalBranch(%1, %x5Fbflag, %t, %i)

Adding counter for primalLoop:
[loopMaxIters(4 : Int)]
let  %1	: _	= loop(%2, %3, %2, true, %dpy, 0 : Int)

  > sourceLoc: 1515008 (1)
>> Counter for primalLoop:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

  > sourceLoc: 1515008 (1)
### Slang::AutodiffCheckpointPolicyBase::processFunc
processing workList
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C513345E0 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
use with usedVal:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C513345E0 to storeSet
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

inst with location: 1514994 (1)
use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%i, 3 : Int)

use with usedVal:
[primalInstDecoration]
[nameHint("i")]
let  %i	: Int	= param

use with usedVal:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

use with usedVal:
[primalInstDecoration]
let  %1	: Int	= param

use with usedVal:
0

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C51311B10 to storeSet
0
inst with location: 0 (0)
use with usedVal:
1

[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C513116E0 to storeSet
1
inst with location: 0 (0)
use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

use with usedVal:


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C513397D0 to storeSet

inst with location: 0 (0)
use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[nameHint("dpy")]
let  %dpy	: InOut(DiffPair(Float, %1))	= param

use with usedVal:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param


[#] Slang::AutodiffCheckpointPolicyBase::processFunc, adding 0000020C5133F928 to storeSet
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

inst with location: 1515008 (1)
use with usedVal:
[nameHint("_s_dOut")]
let  %x5Fsx5FdOut	: Float	= param

****** (before legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1514994 (1)
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

source loc recorded: 1515008 (1)
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

****** ensureInstAvailable
ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_pc")]
[loopCounterDecoration]
let  %x5Fpc	: Int	= param

>> LOOP COUNTER!
% localVar:
let  %1	: Ptr(Int)	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("t")]
let  %t	: Float	= param

% localVar:
let  %1	: Ptr(Array(Float, 5 : Int))	= var

ensureInstAvailable, worklist element:
[primalInstDecoration]
[nameHint("_bflag")]
let  %x5Fbflag	: Bool	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpNE(%2, 1 : Int)

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Int	= param

>> NO OUT OF SCOPE USES
ensureInstAvailable, worklist element:
[primalInstDecoration]
let  %1	: Bool	= cmpLT(%2, 3 : Int)

>> NO OUT OF SCOPE USES
****** (after legalization) # of elements in the store set for hoistInfo: 2
source loc recorded: 1515008 (1)
let  %1	: Ptr(Int)	= var

tests/autodiff/reverse-loop.slang(16): note: also see pipeline definition
    for (int i = 0; i < 3; i++)
    ^~~
source loc recorded: 1514994 (1)
let  %1	: Ptr(Array(Float, 5 : Int))	= var

tests/autodiff/reverse-loop.slang(14): note: also see pipeline definition
    float t = y;
          ^
