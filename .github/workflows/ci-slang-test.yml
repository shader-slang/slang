name: CI Test Workflow

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      platform:
        required: true
        type: string
      config:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      test-category:
        required: false
        type: string
        default: smoke
      full-gpu-tests:
        required: false
        type: boolean
        default: false
      has-gpu:
        required: false
        type: boolean
        default: false
      server-count:
        required: false
        type: number
        default: 8
      enable-debug-layers:
        required: false
        type: boolean
        default: true

jobs:
  test:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        if: ${{ inputs.os == 'windows' }}
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Install dependencies
        run: |
          if [[ "${{ inputs.os }}" = "linux" ]]; then
              sudo apt-get update
              sudo apt-get install -y libx11-dev 
          fi

      - name: Setup Node.js
        if: inputs.os == 'linux'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - uses: actions/download-artifact@v4
        with:
          name: slang-build-${{ inputs.os }}-${{ inputs.platform }}-${{ inputs.compiler }}-${{ inputs.config }}
          path: ./

      - name: Setup environment
        run: |
          # Create the main artifact directory structure
          mkdir -p github_artifact/{bin,lib,include,share}
          
          # Copy all build artifacts to github_artifact
          # Artifacts are now uploaded in a staging directory structure
          if [ -d "bin" ]; then
            echo "Found direct bin directory, copying artifacts..."
            cp -r bin/* github_artifact/bin/ 2>/dev/null || echo "No binaries to copy"
          fi
          
          if [ -d "lib" ]; then
            echo "Found direct lib directory, copying artifacts..."
            cp -r lib/* github_artifact/lib/ 2>/dev/null || echo "No libraries to copy"
          fi
          
          if [ -d "include" ]; then
            echo "Found direct include directory, copying artifacts..."
            cp -r include github_artifact/ 2>/dev/null || echo "No include files to copy"
          fi
          
          if [ -d "share" ]; then
            echo "Found direct share directory, copying artifacts..."
            cp -r share github_artifact/ 2>/dev/null || echo "No share files to copy"
          fi
          
          # Fallback: check for build directory structure (shouldn't happen with new approach)
          if [ -d "build" ]; then
            echo "Found build directory, organizing all build artifacts..."
            
            # Copy all executables and DLLs from bin directory
            find build -path "*/bin/*" \( -name "*.exe" -o -name "*.dll" -o -executable \) -type f -exec cp {} github_artifact/bin/ \; 2>/dev/null || echo "No binaries found"
            
            # Copy all libraries from lib directory  
            find build -path "*/lib/*" \( -name "*.lib" -o -name "*.so" -o -name "*.dylib" -o -name "*.a" \) -type f -exec cp {} github_artifact/lib/ \; 2>/dev/null || echo "No libraries found"
            
            # Copy include files if they exist
            find build -path "*/include/*" -type f -exec cp --parents {} github_artifact/ \; 2>/dev/null || echo "No include files found"
            
            # Copy share files if they exist  
            find build -path "*/share/*" -type f -exec cp --parents {} github_artifact/ \; 2>/dev/null || echo "No share files found"
          fi
          
          # Make sure all executables are executable
          chmod +x github_artifact/bin/* 2>/dev/null || echo "No executables to make executable"
          
          # Set up bin_dir based on platform and config
          if [[ "${{ inputs.platform }}" = "wasm" ]]; then
            echo "bin_dir=build.em/Release/bin" >> $GITHUB_ENV
          else
            # The binaries are now in the github_artifact/bin/ directory
            echo "bin_dir=github_artifact/bin" >> $GITHUB_ENV
          fi
          
          # Also set lib_dir for slangpy tests
          echo "lib_dir=github_artifact/lib" >> $GITHUB_ENV
          
          # Set up library path for runtime linking
          if [[ "${{ inputs.os }}" == "linux" ]]; then
            echo "LD_LIBRARY_PATH=github_artifact/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          elif [[ "${{ inputs.os }}" == "macos" ]]; then
            echo "DYLD_LIBRARY_PATH=github_artifact/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          elif [[ "${{ inputs.os }}" == "windows" ]]; then
            # On Windows, DLLs should be in the same directory as executables or in PATH
            echo "PATH=github_artifact/bin;github_artifact/lib;$PATH" >> $GITHUB_ENV
          fi
          
          # Debug: show what we found
          echo "Directory structure after organizing artifacts:"
          ls -la
          echo "github_artifact directory contents:"
          ls -la github_artifact/ || echo "github_artifact directory not found"
          echo "Binaries found:"
          ls -la github_artifact/bin/ || echo "bin directory not found"
          echo "Libraries found:"
          ls -la github_artifact/lib/ || echo "lib directory not found"
          
          # Show sizes for debugging
          echo "Artifact sizes:"
          du -sh github_artifact/bin/ 2>/dev/null || echo "Could not calculate bin size"
          du -sh github_artifact/lib/ 2>/dev/null || echo "Could not calculate lib size"

      - name: Check backend Support
        if: inputs.platform != 'wasm'
        run: |
          smokeResult=$("$bin_dir/slang-test" tests/render/check-backend-support-on-ci.slang)
          supportedBackends="$(echo "$smokeResult" | grep 'Supported backends: ')"
          echo "$supportedBackends"

      - name: Test Slang
        if: inputs.platform != 'wasm'
        run: |
          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
          if [ "${{ inputs.enable-debug-layers }}" == "true" ]; then
            export VK_INSTANCE_LAYERS=VK_LAYER_KHRONOS_validation
          fi
          if [[ "${{ inputs.full-gpu-tests }}" == "true" ]]; then
            "$bin_dir/slang-test" \
              -use-test-server \
              -server-count ${{ inputs.server-count }} \
              -category ${{ inputs.test-category }} \
              -expected-failure-list tests/expected-failure-github.txt \
              -skip-reference-image-generation \
              -show-adapter-info \
              -enable-debug-layers ${{ inputs.enable-debug-layers }}
          else
            "$bin_dir/slang-test" \
              -use-test-server \
              -category ${{ inputs.test-category }} \
              -expected-failure-list tests/expected-failure-github.txt \
              -expected-failure-list tests/expected-failure-no-gpu.txt \
              -skip-reference-image-generation \
              -show-adapter-info \
              -enable-debug-layers ${{ inputs.enable-debug-layers }}
          fi
      - name: Run Slang examples
        # Run GLSL backend tests on release for pull requests, and not on merge_group, to reduce CI load.
        if: inputs.platform != 'wasm' && inputs.full-gpu-tests && inputs.config == 'release' && github.event_name == 'pull_request'
        run: |
          .github/workflows/ci-examples.sh \
           --bin-dir "$bin_dir" \
           --os "${{ inputs.os }}" \
           --platform "${{ inputs.platform }}" \
           --config "${{ inputs.config }}" \
           --skip-file tests/expected-example-failure-github.txt
      - name: Run slangc tests
        if: inputs.platform != 'wasm'
        run: |
          PATH=$bin_dir:$PATH tools/slangc-test/test.sh
      - name: Test Slang via glsl
        # Run GLSL backend tests on release for pull requests, and not on merge_group, to reduce CI load.
        if: inputs.platform != 'wasm' && inputs.os != 'macos' && inputs.full-gpu-tests && inputs.config == 'release'
        run: |
          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
          "$bin_dir/slang-test" \
            -use-test-server \
            -server-count ${{ inputs.server-count }} \
            -category ${{ inputs.test-category }} \
            -emit-spirv-via-glsl \
            -api vk \
            -expected-failure-list tests/expected-failure-via-glsl.txt \
            -skip-reference-image-generation \
            -show-adapter-info
      - name: Run slang-rhi tests
        # Run slang-rhi tests on debug+release for pull requests, and only on release for merge_group, to reduce CI load.
        # Some of the expensive tests that are not relevant for Slang (because they just test graphics API related things) are excluded using -tce.
        if: inputs.platform != 'wasm' && inputs.full-gpu-tests && (github.event_name == 'pull_request' || inputs.config == 'release')
        run: |
          export SLANG_RHI_EXCLUDE_TESTS="md-clear*,cmd-copy*,cmd-upload*,fence*,staging-heap*,texture-create*"
          if [[ "${{ inputs.os }}" == "macos" ]]; then
            export SLANG_RHI_EXCLUDE_TESTS="sampler-array"
          fi
          "$bin_dir/slang-rhi-tests" -check-devices -tce="$SLANG_RHI_EXCLUDE_TESTS"
      - name: Run slangpy tests
        # Run slangpy tests on debug+release for pull requests, and only on release for merge_group, to reduce CI load.
        if: inputs.platform != 'wasm' && inputs.full-gpu-tests && (github.event_name == 'pull_request' || inputs.config == 'release')
        run: |
          python --version
          echo "Cleaning up existing installations and installing slangpy..."

          # Try to uninstall existing slangpy
          python -m pip uninstall -y slangpy || echo "slangpy not found or already removed"

          # Install slangpy
          python -m pip install --verbose slangpy --user

          # Get site packages directory
          SITE_PACKAGES=$(python -c "import slangpy; import os; print(os.path.dirname(os.path.dirname(slangpy.__file__)))")
          echo "Site packages directory: $SITE_PACKAGES"
          echo "bin_dir location: $bin_dir"
          echo "lib_dir location: $lib_dir"
          # Copy library files
          if [[ "${{ inputs.os }}" == "windows" ]]; then
            cp "$bin_dir"/slang*.dll "$SITE_PACKAGES/slangpy/" || { echo "Failed to copy library files"; exit 1; }
          else
            cp "$lib_dir"/libslang*.* "$SITE_PACKAGES/slangpy/" || { echo "Failed to copy library files"; exit 1; }
          fi

          echo "Listing files in slangpy directory..."
          ls -la "$SITE_PACKAGES/slangpy/"

          echo "Installing python packages..."

          # Only install additional packages on GitHub-hosted runners, not self-hosted
          if [[ "${{ inputs.runs-on }}" != *"self-hosted"* ]]; then
            # Download and install requirements from slangpy repository
            echo "Fetching requirements-dev.txt from slangpy repository..."
            curl -fsSL https://raw.githubusercontent.com/shader-slang/slangpy/main/requirements-dev.txt -o requirements-dev.txt
            
            echo "Installing development requirements..."
            python -m pip install -r requirements-dev.txt
            python -m pip install pytest-github-actions-annotate-failures
          else
            echo "Skipping additional package installation on self-hosted runner"
          fi

          echo "Running pytest on slangpy tests..."
          export PYTHONPATH="$SITE_PACKAGES"
          python -m pytest "$SITE_PACKAGES/slangpy/tests" -ra
      - uses: actions/upload-artifact@v4
        if: ${{ ! inputs.full-gpu-tests }}
        with:
          name: slang-test-results-${{ inputs.os }}-${{ inputs.platform }}-${{ inputs.compiler }}-${{ inputs.config }}
          # Upload test results and any generated artifacts
          path: |
            github_artifact/bin/
            build.em/Release
