name: CI Build Workflow

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      platform:
        required: true
        type: string
      config:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      warnings-as-errors:
        required: false
        type: boolean
        default: true
      build-llvm:
        required: false
        type: boolean
        default: true
      server-count:
        required: false
        type: number
        default: 8

jobs:
  build:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        if: ${{ inputs.os == 'windows' }}
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"
      - name: Install dependencies
        run: |
          if [[ "${{ inputs.os }}" = "linux" ]]; then
              sudo apt-get update
              sudo apt-get install -y libx11-dev 
          fi
      - name: Setup Node.js
        if: inputs.os == 'linux'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Setup
        uses: ./.github/actions/common-setup
        with:
          os: ${{ inputs.os }}
          compiler: ${{ inputs.compiler }}
          platform: ${{ inputs.platform }}
          config: ${{ inputs.config }}
          build-llvm: ${{ inputs.build-llvm }}

      # Don't need to check this on every config
      - name: Check Stable Names Table
        if: ${{ inputs.os == 'linux' && inputs.config == 'debug' }}
        run: ./extras/check-ir-stable-names-gh-actions.sh

      - name: Check Version Constants
        id: check-ir-versions
        if: ${{ inputs.os == 'linux' && inputs.config == 'debug' && github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: ./extras/check-inst-version-changes.sh

      - name: Upload IR version check results
        if: ${{ steps.check-ir-versions.outputs.artifact_created == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ir-version-check-results
          path: ir-version-check-artifact/
          retention-days: 1

      - name: Build Slang
        run: |
          echo "cmake version: $(cmake --version)"
          
          if [[ "${{ inputs.platform }}" = "wasm" ]]; then
              git clone https://github.com/emscripten-core/emsdk.git
              pushd emsdk
                ./emsdk install latest
                ./emsdk activate latest
                source ./emsdk_env.sh
              popd
              cmake --workflow --preset generators --fresh
              mkdir generators
              cmake --install build --config Release --component generators --prefix generators
              emcmake cmake -DSLANG_GENERATORS_PATH=generators/bin --preset emscripten -DSLANG_SLANG_LLVM_FLAVOR=DISABLE
              cmake --build --preset emscripten --config "$cmake_config" --target slang-wasm
              mkdir "build.em/$cmake_config/bin/smoke"
              cp tests/wasm/smoke/* "build.em/$cmake_config/bin/smoke/"
              cd "build.em/$cmake_config/bin"
              [ -f "slang-wasm.wasm" ]
              [ -f "slang-wasm.js" ]
              node smoke/smoke-test.js smoke/rand_float.slang computeMain
          else
            if [[ "${{ inputs.os }}" =~ "windows" && "${{ inputs.config }}" != "release" && "${{ inputs.config }}" != "releaseWithDebugInfo" ]]; then
              # Doing a debug build will try to link against a release built llvm, this
              # is a problem on Windows, so make slang-llvm in release build and use
              # that as though it's a fetched binary via these presets.
              cmake --workflow --preset slang-llvm
              # Configure, pointing to our just-generated slang-llvm archive
              cmake --preset default --fresh \
                -DSLANG_SLANG_LLVM_FLAVOR=FETCH_BINARY \
                "-DSLANG_SLANG_LLVM_BINARY_URL=$(pwd)/build/dist-release/slang-llvm.zip" \
                "-DCMAKE_COMPILE_WARNING_AS_ERROR=${{ inputs.warnings-as-errors }}"
              cmake --workflow --preset "${{ inputs.config }}"
            elif [[ "${{ inputs.build-llvm }}" = "false" ]]; then
              # linux aarch64 cannot build llvm.
              cmake --preset default --fresh \
                -DSLANG_SLANG_LLVM_FLAVOR=DISABLE \
                -DCMAKE_COMPILE_WARNING_AS_ERROR=${{ inputs.warnings-as-errors }}
              cmake --workflow --preset "${{ inputs.config }}"
            else
              # Otherwise, use the "system" llvm we have just build or got from the
              # cache in the setup phase
              cmake --preset default --fresh \
                -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM \
                -DCMAKE_COMPILE_WARNING_AS_ERROR=${{ inputs.warnings-as-errors }}
              cmake --workflow --preset "${{ inputs.config }}"
            fi
          fi

      - name: Check documented compiler versions
        run: bash extras/verify-documented-compiler-version.sh

      - uses: actions/upload-artifact@v4
        with:
          name: slang-build-${{ inputs.os }}-${{ inputs.platform }}-${{ inputs.compiler }}-${{ inputs.config }}
          path: |
            build/dist-${{ inputs.config }}/slang.zip
          retention-days: 3
