name: Common Test Setup
description: 'Common setup steps for Slang test jobs'

inputs:
  os:
    required: true
    description: 'Operating system'
  compiler:
    required: true
    description: 'Compiler to use'
  platform:
    required: true
    description: 'Platform to build for'
  config:
    required: true
    description: 'Build configuration'

runs:
  using: 'composite'
  steps:
    - name: Add bash to PATH
      shell: pwsh
      if: ${{ inputs.os == 'windows' }}
      run: |
        Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
        Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        os: ${{ inputs.os }}
        compiler: ${{ inputs.compiler }}
        platform: ${{ inputs.platform }}
        config: ${{ inputs.config }}
        build-llvm: true

    - uses: actions/download-artifact@v4
      with:
        name: slang-build-${{ inputs.os }}-${{ inputs.platform }}-${{ inputs.compiler }}-${{ inputs.config }}
        path: github_artifact

    - name: Setup environment
      shell: bash
      run: |
        # Artifacts are now directly extracted to github_artifact directory
        # Just ensure all executables are executable
        chmod +x github_artifact/bin/* 2>/dev/null || echo "No executables to make executable"
        
        # Set up bin_dir based on platform and config
        if [[ "${{ inputs.platform }}" == "wasm" ]]; then
          bin_dir=build.em/Release/bin
          echo "bin_dir=$bin_dir" >> $GITHUB_ENV
        else
          # The binaries are now in the github_artifact/bin/ directory
          bin_dir=$(pwd)/github_artifact/bin
          echo "bin_dir=$bin_dir" >> $GITHUB_ENV
        fi
        
        # Also set lib_dir for slangpy tests
        lib_dir=$(pwd)/github_artifact/lib
        echo "lib_dir=$lib_dir" >> $GITHUB_ENV
        
        # Set up library path for runtime linking
        if [[ "${{ inputs.os }}" == "linux" ]]; then
          echo "LD_LIBRARY_PATH=${lib_dir}:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        elif [[ "${{ inputs.os }}" == "macos" ]]; then
          echo "DYLD_LIBRARY_PATH=${lib_dir}:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        elif [[ "${{ inputs.os }}" == "windows" ]]; then
          # On Windows, DLLs should be in the same directory as executables or in PATH
          # Use $GITHUB_PATH instead of $PATH for preservation across steps and
          # avoid unix-like/windows-like path issues
          echo "$bin_dir" >> $GITHUB_PATH
          echo "$lib_dir" >> $GITHUB_PATH
        fi
        echo "PATH: $PATH"

    - name: Check runtime environment
      if: inputs.platform != 'wasm'
      shell: bash
      run: |
        echo "$bin_dir/slang-test"
        "$bin_dir/slang-test" tests/render/check-backend-support-on-ci.slang
        smokeResult=$("$bin_dir/slang-test" tests/render/check-backend-support-on-ci.slang)
        supportedBackends="$(echo "$smokeResult" | grep 'Supported backends: ')"
        echo "$supportedBackends"
        echo "Printing CUDA compiler version: ..."
        nvcc --version 2>/dev/null || echo "CUDA compiler (nvcc) not available"
        echo "Printing GPU driver version: ..."
        nvidia-smi -q 2>/dev/null | grep Version || echo "NVIDIA driver (nvidia-smi) not available"
        echo "Printing Vulkan SDK version: ..."
        vulkaninfo 2>/dev/null | grep -i version || echo "Vulkan SDK (vulkaninfo) not available"
        echo "All environment variables:"
        env | sort
