SLANG_RAW("// TODO: These keywords are not recognized but they should be.\n")
SLANG_RAW("#define highp\n")
SLANG_RAW("#define mediump\n")
SLANG_RAW("#define lowp\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MAP_UNARY(TYPE, COUNT, FUNC, VALUE) \\\n")
SLANG_RAW("    vector<TYPE,COUNT> result; [ForceUnroll] for(int i = 0; i < COUNT; ++i) { result[i] = FUNC(VALUE[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MAP_TRINARY(TYPE, COUNT, FUNC, A, B, C) \\\n")
SLANG_RAW("    vector<TYPE,COUNT> result; [ForceUnroll] for(int i = 0; i < COUNT; ++i) { result[i] = FUNC(A[i], B[i], C[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// OpenGL 4.60 spec\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 4.1. 'asic Types'\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias vec2 = vector<float, 2>;\n")
SLANG_RAW("public typealias vec3 = vector<float, 3>;\n")
SLANG_RAW("public typealias vec4 = vector<float, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias dvec2 = vector<double, 2>;\n")
SLANG_RAW("public typealias dvec3 = vector<double, 3>;\n")
SLANG_RAW("public typealias dvec4 = vector<double, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias bvec2 = vector<bool, 2>;\n")
SLANG_RAW("public typealias bvec3 = vector<bool, 3>;\n")
SLANG_RAW("public typealias bvec4 = vector<bool, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias ivec2 = vector<int, 2>;\n")
SLANG_RAW("public typealias ivec3 = vector<int, 3>;\n")
SLANG_RAW("public typealias ivec4 = vector<int, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias uvec2 = vector<uint, 2>;\n")
SLANG_RAW("public typealias uvec3 = vector<uint, 3>;\n")
SLANG_RAW("public typealias uvec4 = vector<uint, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias i8vec2 = vector<int8_t, 2>;\n")
SLANG_RAW("public typealias i8vec3 = vector<int8_t, 3>;\n")
SLANG_RAW("public typealias i8vec4 = vector<int8_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias u8vec2 = vector<uint8_t, 2>;\n")
SLANG_RAW("public typealias u8vec3 = vector<uint8_t, 3>;\n")
SLANG_RAW("public typealias u8vec4 = vector<uint8_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias i16vec2 = vector<int16_t, 2>;\n")
SLANG_RAW("public typealias i16vec3 = vector<int16_t, 3>;\n")
SLANG_RAW("public typealias i16vec4 = vector<int16_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias u16vec2 = vector<uint16_t, 2>;\n")
SLANG_RAW("public typealias u16vec3 = vector<uint16_t, 3>;\n")
SLANG_RAW("public typealias u16vec4 = vector<uint16_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias i64vec2 = vector<int64_t, 2>;\n")
SLANG_RAW("public typealias i64vec3 = vector<int64_t, 3>;\n")
SLANG_RAW("public typealias i64vec4 = vector<int64_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias u64vec2 = vector<uint64_t, 2>;\n")
SLANG_RAW("public typealias u64vec3 = vector<uint64_t, 3>;\n")
SLANG_RAW("public typealias u64vec4 = vector<uint64_t, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias mat2 = matrix<float, 2, 2>;\n")
SLANG_RAW("public typealias mat3 = matrix<float, 3, 3>;\n")
SLANG_RAW("public typealias mat4 = matrix<float, 4, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias mat2x2 = matrix<float, 2, 2>;\n")
SLANG_RAW("public typealias mat2x3 = matrix<float, 2, 3>;\n")
SLANG_RAW("public typealias mat2x4 = matrix<float, 2, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias mat3x2 = matrix<float, 3, 2>;\n")
SLANG_RAW("public typealias mat3x3 = matrix<float, 3, 3>;\n")
SLANG_RAW("public typealias mat3x4 = matrix<float, 3, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias mat4x2 = matrix<float, 4, 2>;\n")
SLANG_RAW("public typealias mat4x3 = matrix<float, 4, 3>;\n")
SLANG_RAW("public typealias mat4x4 = matrix<float, 4, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias dmat2 = matrix<double, 2, 2>;\n")
SLANG_RAW("public typealias dmat3 = matrix<double, 3, 3>;\n")
SLANG_RAW("public typealias dmat4 = matrix<double, 4, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias dmat2x2 = matrix<double, 2, 2>;\n")
SLANG_RAW("public typealias dmat2x3 = matrix<double, 2, 3>;\n")
SLANG_RAW("public typealias dmat2x4 = matrix<double, 2, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias dmat3x2 = matrix<double, 3, 2>;\n")
SLANG_RAW("public typealias dmat3x3 = matrix<double, 3, 3>;\n")
SLANG_RAW("public typealias dmat3x4 = matrix<double, 3, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias dmat4x2 = matrix<double, 4, 2>;\n")
SLANG_RAW("public typealias dmat4x3 = matrix<double, 4, 3>;\n")
SLANG_RAW("public typealias dmat4x4 = matrix<double, 4, 4>;\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("public out float4 gl_Position : SV_Position;\n")
SLANG_RAW("public out float gl_PointSize : SV_PointSize;\n")
SLANG_RAW("public in float2 gl_PointCoord : SV_PointCoord;\n")
SLANG_RAW("\n")
SLANG_RAW("public in vec4 gl_FragCoord : SV_Position;\n")
SLANG_RAW("public out float gl_FragDepth : SV_Depth;\n")
SLANG_RAW("public out int gl_FragStencilRef : SV_StencilRef;\n")
SLANG_RAW("\n")
SLANG_RAW("public in uvec3 gl_GlobalInvocationID : SV_DispatchThreadID;\n")
SLANG_RAW("public in uvec3 gl_WorkGroupID : SV_GroupID;\n")
SLANG_RAW("public in uint gl_LocalInvocationIndex : SV_GroupIndex;\n")
SLANG_RAW("public in uvec3 gl_LocalInvocationID : SV_GroupThreadID;\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint3 gl_NumWorkGroups {\n")
SLANG_RAW("\n")
SLANG_RAW("    [require(glsl_spirv, GLSL_430_SPIRV_1_0_compute)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_NumWorkGroups)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                    result:$$uint3 = OpLoad builtin(NumWorkgroups:uint3);\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(compute)]\n")
SLANG_RAW("public property uint3 gl_WorkGroupSize\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    [require(compute)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return WorkgroupSize();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: define overload for tessellation control stage.\n")
SLANG_RAW("public in int gl_InvocationID : SV_GSInstanceID;\n")
SLANG_RAW("\n")
SLANG_RAW("internal in int __sv_InstanceIndex : SV_InstanceID;\n")
SLANG_RAW("\n")
SLANG_RAW("// SPIRV InstanceIndex builtin for vertex shader\n")
SLANG_RAW("public property int gl_InstanceIndex\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(vertex)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        default:\n")
SLANG_RAW("            return __sv_InstanceIndex;\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"gl_InstanceIndex\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                result:$$int = OpLoad builtin(InstanceIndex:int);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("public in bool gl_FrontFacing : SV_IsFrontFace;\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: define overload for geometry stage.\n")
SLANG_RAW("public in int gl_Layer : SV_RenderTargetArrayIndex;\n")
SLANG_RAW("\n")
SLANG_RAW("public in int gl_SampleID : SV_SampleIndex;\n")
SLANG_RAW("public in int gl_VertexIndex : SV_VertexID;\n")
SLANG_RAW("public in int gl_ViewIndex : SV_ViewID;\n")
SLANG_RAW("public in int gl_ViewportIndex : SV_ViewportArrayIndex;\n")
SLANG_RAW("public in int gl_BaseVertex : SV_StartVertexLocation;\n")
SLANG_RAW("public in int gl_BaseInstance : SV_StartInstanceLocation;\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Override operator* behavior to compute algebric product of matrices and vectors.\n")
SLANG_RAW("\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public matrix<float, N, N> operator*<let N:int>(matrix<float, N, N> m1, matrix<float, N, N> m2)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(m2, m1);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public matrix<half, N, N> operator*<let N:int>(matrix<half, N, N> m1, matrix<half, N, N> m2)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(m2, m1);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public matrix<double, N, N> operator*<let N:int>(matrix<double, N, N> m1, matrix<double, N, N> m2)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(m2, m1);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public matrix<T, R, L> operator*<T:__BuiltinFloatingPointType, let L : int, let C : int, let R : int>(matrix<T, C, L> m1, matrix<T, R, C> m2)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(m2, m1);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, R> operator*<T:__BuiltinFloatingPointType, let C : int, let R : int>(vector<T, C> v, matrix<T, R, C> m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(m, v);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, C> operator*<T:__BuiltinFloatingPointType, let C : int, let R : int>(matrix<T, R, C> m, vector<T, R> v)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return mul(v, m);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(mul)\n")
SLANG_RAW("public matrix<T, N, M> matrixCompMult<T:__BuiltinFloatingPointType, let N:int, let M : int>(matrix<T,N,M> left, matrix<T,N,M> right);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(cmpLE)\n")
SLANG_RAW("public vector<bool, N> lessThanEqual<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("__intrinsic_op(cmpLT)\n")
SLANG_RAW("public vector<bool, N> lessThan<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("__intrinsic_op(cmpGT)\n")
SLANG_RAW("public vector<bool, N> greaterThan<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("__intrinsic_op(cmpGE)\n")
SLANG_RAW("public vector<bool, N> greaterThanEqual<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("__intrinsic_op(cmpEQ)\n")
SLANG_RAW("public vector<bool, N> equal<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("__intrinsic_op(cmpNE)\n")
SLANG_RAW("public vector<bool, N> notEqual<T, let N:int>(vector<T, N> x, vector<T, N> y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("public extension vector<T, 2>\n")
SLANG_RAW("{\n")
SLANG_RAW("    [ForceInline] public __init(vector<T, 3> bigger) { this = bigger.xy; }\n")
SLANG_RAW("    [ForceInline] public __init(vector<T, 4> bigger) { this = bigger.xy; }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("public extension vector<T, 3>\n")
SLANG_RAW("{\n")
SLANG_RAW("    [ForceInline] public __init(vector<T, 4> bigger) { this = bigger.xyz; }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator==<T:__BuiltinArithmeticType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return all(equal(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator!=<T:__BuiltinArithmeticType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return any(notEqual(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(14)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator==<T:__BuiltinFloatingPointType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return all(equal(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(14)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator!=<T:__BuiltinFloatingPointType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return any(notEqual(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(14)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator==<T:__BuiltinLogicalType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return all(equal(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(14)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator!=<T:__BuiltinLogicalType, let N:int>(vector<T, N> left, vector<T, N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return any(notEqual(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

for (auto type : kBaseTypes) {
    char const* typeName = type.name;
    if (!type.flags) continue;
SLANG_RAW("#line 306 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator==<let N:int>(vector<")
SLANG_SPLICE(typeName
)
SLANG_RAW(", N> left, vector<")
SLANG_SPLICE(typeName
)
SLANG_RAW(", N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return all(equal(left, right));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("public bool operator!=<let N:int>(vector<")
SLANG_SPLICE(typeName
)
SLANG_RAW(", N> left, vector<")
SLANG_SPLICE(typeName
)
SLANG_RAW(", N> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return any(notEqual(left, right));\n")
SLANG_RAW("}\n")

}
SLANG_RAW("#line 324 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("/// Array length\n")
SLANG_RAW("__generic<T, let N : int>\n")
SLANG_RAW("public extension Array<T, N>\n")
SLANG_RAW("{\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    public int length()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return this.getCount();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.1. Angle and Trigonometry Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T atan(T y, T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return atan2(y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T,N> atan(vector<T,N> y, vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return atan2(y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.2. Exponential Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T inversesqrt(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return rsqrt(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> inversesqrt(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return rsqrt(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.3. Common Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T roundEven(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return rint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T,N> roundEven(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return rint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T mod(T x, T y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    // SPIR-V doesn't have \"modulus\".\n")
SLANG_RAW("    // All of Op?Mod and OpFRem are \"remainder\".\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mod\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return x - y * floor(x / y);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> mod(vector<T, N> x, T y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mod\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return x - y * floor(x / y);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> mod(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mod\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return x - y * floor(x / y);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T,N> min(vector<T,N> x, T y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"min\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return min(x, vector<T,N>(y));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T,N> max(vector<T,N> x, T y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"max\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return max(x, vector<T,N>(y));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T,N> clamp(vector<T,N> x, T minBound, T maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"clamp\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return clamp(x, vector<T,N>(minBound), vector<T,N>(maxBound));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T mix(T x, T y, T a)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return lerp(x, y, a);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> mix(vector<T, N> x, vector<T, N> y, T a)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mix\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return mix(x, y, vector<T, N>(a));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> mix(vector<T, N> x, vector<T, N> y, vector<T, N> a)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return lerp(x, y, a);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public T mix(T x, T y, bool a)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mix\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$T = OpSelect $a $y $x\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return (a ? y : x);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, sm_4_0_version)]\n")
SLANG_RAW("public vector<T, N> mix(vector<T, N> x, vector<T, N> y, vector<bool, N> a)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"mix\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T,N> = OpSelect $a $y $x\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        vector<T, N> result;\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int i = 0; i < N; i++)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result[i] = (a[i] ? y[i] : x[i]);\n")
SLANG_RAW("        }\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public int floatBitsToInt(highp float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public vector<int, N> floatBitsToInt(highp vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public uint floatBitsToUint(highp float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asuint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public vector<uint, N> floatBitsToUint(highp vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asuint(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public float intBitsToFloat(highp int x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asfloat(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public vector<float, N> intBitsToFloat(highp vector<int, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asfloat(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public float uintBitsToFloat(highp uint x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asfloat(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public vector<float, N> uintBitsToFloat(highp vector<uint, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return asfloat(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.4. Floating-Point Pack and Unpack Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, pack_vector)]\n")
SLANG_RAW("public vec2 unpackUnorm2x16(uint p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return unpackUnorm2x16ToFloat(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, pack_vector)]\n")
SLANG_RAW("public vec2 unpackSnorm2x16(uint p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return unpackSnorm2x16ToFloat(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, pack_vector)]\n")
SLANG_RAW("public vec4 unpackUnorm4x8(highp uint p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return unpackUnorm4x8ToFloat(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, pack_vector)]\n")
SLANG_RAW("public vec4 unpackSnorm4x8(highp uint p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return unpackSnorm4x8ToFloat(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public float half2float(uint h)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"half2float\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        uint s = ((h & uint(0x8000)) << uint(16));\n")
SLANG_RAW("        uint e = 0;\n")
SLANG_RAW("        uint m = ((h & uint(0x03ff)) << uint(13));\n")
SLANG_RAW("        if (m != 0)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            e = (((h & uint(0x7c00)) + uint(0x1c000)) << uint(13));\n")
SLANG_RAW("        }\n")
SLANG_RAW("        return uintBitsToFloat(s | e | m); \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, pack_vector)]\n")
SLANG_RAW("public vec2 unpackHalf2x16(uint p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return unpackHalf2x16ToFloat(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public double packDouble2x32(uvec2 v)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"packDouble2x32\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$double = OpExtInst glsl450 PackDouble2x32 $v\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: there is no \"asdouble()\"\n")
SLANG_RAW("        //return asdouble(uint64_t(v.x) | (uint64_t(v.y) << 32));\n")
SLANG_RAW("        return 0.0;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_4_0)]\n")
SLANG_RAW("public uvec2 unpackDouble2x32(double v)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"unpackDouble2x32\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$uvec2 = OpExtInst glsl450 UnpackDouble2x32 $v\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: there is no \"asuint64()\"\n")
SLANG_RAW("        uint64_t u = 0; // asuint64(v);\n")
SLANG_RAW("        return uvec2(uint(u & 0xFFFFFFFF), uint(u >> 32));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.5. Geometric Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public T faceforward(T n, T i, T ng)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"faceforward\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        OpExtInst $$T result glsl450 FaceForward $n $i $ng\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return dot(ng, i) < T(0.0f) ? n : -n;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.6. Matrix Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let C : int, let R : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[OverloadRank(15)]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public matrix<T, R, C> outerProduct(vector<T, C> c, vector<T, R> r)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"outerProduct\";\n")
SLANG_RAW("\n")
SLANG_RAW("    // Note: SPIR-V takes the input arguments in an opposite order\n")
SLANG_RAW("    // compared to GLSL. SPIR-V spec document says,\n")
SLANG_RAW("    // \"Its (second argument) number of components must equal the\n")
SLANG_RAW("    //  number of columns in Result Type.\"\n")
SLANG_RAW("    //\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$matrix<T,R,C> = OpOuterProduct $c $r\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        matrix<T, R, C> result;\n")
SLANG_RAW("        for (int j = 0; j < R; ++j)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            for (int i = 0; i < C; ++i)\n")
SLANG_RAW("            {\n")
SLANG_RAW("                result[j][i] = c[i] * r[j];\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[require(glsl_spirv, GLSL_400)]\n")
SLANG_RAW("public matrix<T,N,N> inverse(matrix<T,N,N> m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"inverse\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        OpExtInst $$matrix<T,N,N> result glsl450 MatrixInverse $m\n")
SLANG_RAW("    };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.8. Integer Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public uint uaddCarry(highp uint x, highp uint y, out lowp uint carry)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"uaddCarry\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$uint $$uint;\n")
SLANG_RAW("        %temp:%ResType = OpIAddCarry $x $y;\n")
SLANG_RAW("        %carry:$$uint = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &carry %carry;\n")
SLANG_RAW("        result:$$uint = OpCompositeExtract %temp 0\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        let result = x * y;\n")
SLANG_RAW("        carry = ((result < x || result < y) ? 1 : 0);\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public vector<uint,N> uaddCarry(highp vector<uint,N> x, highp vector<uint,N> y, out lowp vector<uint,N> carry)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"uaddCarry\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$vector<uint,N> $$vector<uint,N>;\n")
SLANG_RAW("        %temp:%ResType = OpIAddCarry $x $y;\n")
SLANG_RAW("        %carry:$$vector<uint,N> = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &carry %carry;\n")
SLANG_RAW("        result:$$vector<uint,N> = OpCompositeExtract %temp 0\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        VECTOR_MAP_TRINARY(uint, N, uaddCarry, x, y, carry);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public uint usubBorrow(highp uint x, highp uint y, out lowp uint borrow)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"usubBorrow\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$uint $$uint;\n")
SLANG_RAW("        %temp:%ResType = OpISubBorrow $x $y;\n")
SLANG_RAW("        %borrow:$$uint = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &borrow %borrow;\n")
SLANG_RAW("        result:$$uint = OpCompositeExtract %temp 0\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        borrow = (y > x) ? 1 : 0;\n")
SLANG_RAW("        return x - y;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public vector<uint,N> usubBorrow(highp vector<uint,N> x, highp vector<uint,N> y, out lowp vector<uint,N> borrow)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"usubBorrow\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$vector<uint,N> $$vector<uint,N>;\n")
SLANG_RAW("        %temp:%ResType = OpISubBorrow $x $y;\n")
SLANG_RAW("        %borrow:$$vector<uint,N> = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &borrow %borrow;\n")
SLANG_RAW("        result:$$vector<uint,N> = OpCompositeExtract %temp 0\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        VECTOR_MAP_TRINARY(uint, N, usubBorrow, x, y, borrow);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public void umulExtended(highp uint x, highp uint y, out highp uint msb, out highp uint lsb)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"umulExtended\";\n")
SLANG_RAW("    case spirv: spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$uint $$uint;\n")
SLANG_RAW("        %temp:%ResType = OpUMulExtended $x $y;\n")
SLANG_RAW("        %lsb:$$uint = OpCompositeExtract %temp 0;\n")
SLANG_RAW("        %msb:$$uint = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &lsb %lsb;\n")
SLANG_RAW("        OpStore &msb %msb;\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        uint64_t result = x * y;\n")
SLANG_RAW("        msb = uint(result >> 32);\n")
SLANG_RAW("        lsb = uint(result);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public void umulExtended(highp vector<uint,N> x, highp vector<uint,N> y, out highp vector<uint,N> msb, out highp vector<uint,N> lsb)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"umulExtended\";\n")
SLANG_RAW("    case spirv: spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$vector<uint,N> $$vector<uint,N>;\n")
SLANG_RAW("        %temp:%ResType = OpUMulExtended $x $y;\n")
SLANG_RAW("        %lsb:$$vector<uint,N> = OpCompositeExtract %temp 0;\n")
SLANG_RAW("        %msb:$$vector<uint,N> = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &lsb %lsb;\n")
SLANG_RAW("        OpStore &msb %msb;\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            umulExtended(x[i], y[i], msb[i], lsb[i]);\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public void imulExtended(highp int x, highp int y, out highp int msb, out highp int lsb)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"imulExtended\";\n")
SLANG_RAW("    case spirv: spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$int $$int;\n")
SLANG_RAW("        %temp:%ResType = OpSMulExtended $x $y;\n")
SLANG_RAW("        %lsb:$$int = OpCompositeExtract %temp 0;\n")
SLANG_RAW("        %msb:$$int = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &lsb %lsb;\n")
SLANG_RAW("        OpStore &msb %msb;\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        int64_t result = x * y;\n")
SLANG_RAW("        msb = int(result >> 32);\n")
SLANG_RAW("        lsb = int(result);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public void imulExtended(highp vector<int,N> x, highp vector<int,N> y, out highp vector<int,N> msb, out highp vector<int,N> lsb)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"imulExtended\";\n")
SLANG_RAW("    case spirv: spirv_asm {\n")
SLANG_RAW("        %ResType = OpTypeStruct $$vector<int,N> $$vector<int,N>;\n")
SLANG_RAW("        %temp:%ResType = OpSMulExtended $x $y;\n")
SLANG_RAW("        %lsb:$$vector<int,N> = OpCompositeExtract %temp 0;\n")
SLANG_RAW("        %msb:$$vector<int,N> = OpCompositeExtract %temp 1;\n")
SLANG_RAW("        OpStore &lsb %lsb;\n")
SLANG_RAW("        OpStore &msb %msb;\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        {\n")
SLANG_RAW("           imulExtended(x[i], y[i], msb[i], lsb[i]);\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public int bitfieldReverse(highp int value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitfieldReverse\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$int = OpBitReverse $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        value = ((value & 0xAAAAAAAA) >> 1) | ((value & 0x55555555) << 1);\n")
SLANG_RAW("        value = ((value & 0xCCCCCCCC) >> 2) | ((value & 0x33333333) << 2);\n")
SLANG_RAW("        value = ((value & 0xF0F0F0F0) >> 4) | ((value & 0x0F0F0F0F) << 4);\n")
SLANG_RAW("        value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);\n")
SLANG_RAW("        value = ((value & 0xFFFF0000) >> 16) | ((value & 0x0000FFFF) << 16);\n")
SLANG_RAW("        return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public vector<int,N> bitfieldReverse(highp vector<int,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitfieldReverse\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<int,N> = OpBitReverse $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        VECTOR_MAP_UNARY(int, N, bitfieldReverse, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public uint bitfieldReverse(highp uint value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitfieldReverse\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$uint = OpBitReverse $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        value = ((value & 0xAAAAAAAA) >> 1) | ((value & 0x55555555) << 1);\n")
SLANG_RAW("        value = ((value & 0xCCCCCCCC) >> 2) | ((value & 0x33333333) << 2);\n")
SLANG_RAW("        value = ((value & 0xF0F0F0F0) >> 4) | ((value & 0x0F0F0F0F) << 4);\n")
SLANG_RAW("        value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);\n")
SLANG_RAW("        value = ((value & 0xFFFF0000) >> 16) | ((value & 0x0000FFFF) << 16);\n")
SLANG_RAW("        return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, GLSL_400)]\n")
SLANG_RAW("public vector<uint,N> bitfieldReverse(highp vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitfieldReverse\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<uint,N> = OpBitReverse $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        VECTOR_MAP_UNARY(int, N, bitfieldReverse, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone] \n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public uint bitCount(uint value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return countbits(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone] \n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<uint,N> bitCount(vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return countbits(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone] \n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public int bitCount(int value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitCount\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$int = OpBitCount $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return countbits(uint(value));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("    \n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone] \n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<int,N> bitCount(vector<int,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"bitCount\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<int,N> = OpBitCount $value\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        VECTOR_MAP_UNARY(int, N, countbits, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public int findLSB(int v)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbitlow(v);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<int,N> findLSB(vector<int,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbitlow(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public uint findLSB(uint v)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbitlow(v);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<uint,N> findLSB(vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbitlow(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public int findMSB(int value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbithigh(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<int,N> findMSB(vector<int,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbithigh(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public uint findMSB(uint value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbithigh(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, shader5_sm_5_0)]\n")
SLANG_RAW("public vector<uint,N> findMSB(vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return firstbithigh(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N:int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vector<bool,N> not(vector<bool,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return !x;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(vectorReshape)\n")
SLANG_RAW("vector<T,N> __vectorReshape2<T, let N : int, U>(U vin);\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.9.1. Texture Query Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usampler1D = Sampler1D<uint4>;\n")
SLANG_RAW("public typealias isampler1D = Sampler1D<int4>;\n")
SLANG_RAW("public typealias sampler1D = Sampler1D<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usampler2D = Sampler2D<uint4>;\n")
SLANG_RAW("public typealias isampler2D = Sampler2D<int4>;\n")
SLANG_RAW("public typealias sampler2D = Sampler2D<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usampler3D = Sampler3D<uint4>;\n")
SLANG_RAW("public typealias isampler3D = Sampler3D<int4>;\n")
SLANG_RAW("public typealias sampler3D = Sampler3D<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usamplerCube = SamplerCube<uint4>;\n")
SLANG_RAW("public typealias isamplerCube = SamplerCube<int4>;\n")
SLANG_RAW("public typealias samplerCube = SamplerCube<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias sampler1DShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __Shape1D,\n")
SLANG_RAW("    0, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias sampler2DShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __Shape2D,\n")
SLANG_RAW("    0, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias samplerCubeShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __ShapeCube,\n")
SLANG_RAW("    0, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usampler1DArray = Sampler1DArray<uint4>;\n")
SLANG_RAW("public typealias isampler1DArray = Sampler1DArray<int4>;\n")
SLANG_RAW("public typealias sampler1DArray = Sampler1DArray<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usampler2DArray = Sampler2DArray<uint4>;\n")
SLANG_RAW("public typealias isampler2DArray = Sampler2DArray<int4>;\n")
SLANG_RAW("public typealias sampler2DArray = Sampler2DArray<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias usamplerCubeArray = SamplerCubeArray<uint4>;\n")
SLANG_RAW("public typealias isamplerCubeArray = SamplerCubeArray<int4>;\n")
SLANG_RAW("public typealias samplerCubeArray = SamplerCubeArray<float4>;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias sampler1DArrayShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __Shape1D,\n")
SLANG_RAW("    1, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias sampler2DArrayShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __Shape2D,\n")
SLANG_RAW("    1, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias samplerCubeArrayShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __ShapeCube,\n")
SLANG_RAW("    1, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias sampler2DMS = Sampler2DMS<float4>;\n")
SLANG_RAW("public typealias isampler2DMS = Sampler2DMS<int4>;\n")
SLANG_RAW("public typealias usampler2DMS = Sampler2DMS<uint4>;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias sampler2DMSArray = Sampler2DMSArray<float4>;\n")
SLANG_RAW("public typealias isampler2DMSArray = Sampler2DMSArray<int4>;\n")
SLANG_RAW("public typealias usampler2DMSArray = Sampler2DMSArray<uint4>;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement=float4, let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias Sampler2DRect = _Texture<T, __Shape2D, 0, 0, sampleCount, 0, 0, 1, format>;\n")
SLANG_RAW("public typealias sampler2DRect = Sampler2DRect<float4>;\n")
SLANG_RAW("public typealias isampler2DRect = Sampler2DRect<int4>;\n")
SLANG_RAW("public typealias usampler2DRect = Sampler2DRect<uint4>;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let sampleCount:int=0, let format:int=0>\n")
SLANG_RAW("public typealias sampler2DRectShadow = _Texture<\n")
SLANG_RAW("    float,\n")
SLANG_RAW("    __Shape2D,\n")
SLANG_RAW("    0, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    sampleCount,\n")
SLANG_RAW("    0, // access\n")
SLANG_RAW("    1, // isShadow\n")
SLANG_RAW("    1, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let format:int=0>\n")
SLANG_RAW("public typealias SamplerBuffer = _Texture<\n")
SLANG_RAW("    T,\n")
SLANG_RAW("    __ShapeBuffer,\n")
SLANG_RAW("    0, // isArray\n")
SLANG_RAW("    0, // isMS\n")
SLANG_RAW("    0, // sampleCount\n")
SLANG_RAW("    1, // RW\n")
SLANG_RAW("    0, // isShadow\n")
SLANG_RAW("    0, // isCombined\n")
SLANG_RAW("    format\n")
SLANG_RAW(">;\n")
SLANG_RAW("public typealias samplerBuffer = SamplerBuffer<vec4>;\n")
SLANG_RAW("public typealias isamplerBuffer = SamplerBuffer<int4>;\n")
SLANG_RAW("public typealias usamplerBuffer = SamplerBuffer<uint4>;\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureSize\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public int textureSize(Sampler1D<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    int result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(Sampler2D<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec3 textureSize(Sampler3D<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, result.z, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(SamplerCube<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public int textureSize(sampler1DShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    int result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(sampler2DShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(samplerCubeShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec3 textureSize(SamplerCubeArray<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, result.z, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec3 textureSize(samplerCubeArrayShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, result.z, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec2 textureSize(Sampler2DRect<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(sampler2DRectShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(result.x, result.y);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec2 textureSize(Sampler1DArray<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec2 textureSize(sampler1DArrayShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec3 textureSize(Sampler2DArray<T> sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, result.z, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("public ivec3 textureSize(sampler2DArrayShadow sampler, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(lod, result.x, result.y, result.z, numberOfLevels);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public int textureSize(SamplerBuffer<T,format> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    uint result;\n")
SLANG_RAW("    sampler.GetDimensions(result);\n")
SLANG_RAW("    return int(result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement, let sampleCount:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec2 textureSize(Sampler2DMS<T,sampleCount> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> result;\n")
SLANG_RAW("    int sampleCount;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(result.x, result.y, sampleCount);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_size)]\n")
SLANG_RAW("__generic<T:ITexelElement, let sampleCount:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public ivec3 textureSize(Sampler2DMSArray<T,sampleCount> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> result;\n")
SLANG_RAW("    int sampleCount;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(result.x, result.y, result.z, sampleCount);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureQueryLod\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let isArray:int, let sampleCount:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv, texture_querylod)]\n")
SLANG_RAW("public vec2 textureQueryLod(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        __Shape1D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        isShadow,\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureQueryLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability ImageQuery;\n")
SLANG_RAW("            result:$$float2 = OpImageQueryLod $sampler $p\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return vec2(\n")
SLANG_RAW("            sampler.CalculateLevelOfDetail(p),\n")
SLANG_RAW("            sampler.CalculateLevelOfDetailUnclamped(p)\n")
SLANG_RAW("            );\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv, texture_querylod)]\n")
SLANG_RAW("public vec2 textureQueryLod(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        isShadow,\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureQueryLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability ImageQuery;\n")
SLANG_RAW("            result:$$float2 = OpImageQueryLod $sampler $p\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return vec2(\n")
SLANG_RAW("            sampler.CalculateLevelOfDetail(p),\n")
SLANG_RAW("            sampler.CalculateLevelOfDetailUnclamped(p)\n")
SLANG_RAW("            );\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureQueryLevels\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(Sampler1D<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    int width;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, width, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(Sampler2D<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(Sampler3D<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, dim.z, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(SamplerCube<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(Sampler1DArray<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(Sampler2DArray<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, dim.z, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(SamplerCubeArray<T> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, dim.z, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(sampler1DShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    int dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(sampler2DShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(samplerCubeShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(sampler1DArrayShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(sampler2DArrayShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, dim.z, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_metal_spirv, texture_querylevels)]\n")
SLANG_RAW("public int textureQueryLevels(samplerCubeArrayShadow sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(0, dim.x, dim.y, dim.z, numberOfLevels);\n")
SLANG_RAW("    return numberOfLevels;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureSamples\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let sampleCount:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, image_samples)]\n")
SLANG_RAW("public int textureSamples(Sampler2DMS<T,sampleCount> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,2> dim;\n")
SLANG_RAW("    int sampleCount;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions( dim.x, dim.y, sampleCount);\n")
SLANG_RAW("    return sampleCount;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let sampleCount:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, image_samples)]\n")
SLANG_RAW("public int textureSamples(Sampler2DMSArray<T,sampleCount> sampler)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<int,3> dim;\n")
SLANG_RAW("    int sampleCount;\n")
SLANG_RAW("    int numberOfLevels;\n")
SLANG_RAW("    sampler.GetDimensions(dim.x, dim.y, dim.z, sampleCount);\n")
SLANG_RAW("    return sampleCount;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.9.2. Texel Lookup Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// texture\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> texture(Sampler1D<T> sampler, float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element, 4>(sampler.Sample(p));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> texture(Sampler1D<T> sampler, float p, constexpr float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element, 4>(sampler.SampleBias(p, bias));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> texture(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element, 4>(sampler.Sample(p));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> texture(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, constexpr float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler1DShadow sampler, vec3 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.x, p.z);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler1DShadow sampler, vec3 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    float location = p.x;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"texture\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias $bias;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler2DShadow sampler, vec3 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.xy, p.z);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler2DShadow sampler, vec3 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec2 location = p.xy;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"texture\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias $bias;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default: \n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public float texture(samplerCubeShadow sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.xyz, p.w);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public float texture(samplerCubeShadow sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec3 location = p.xyz;\n")
SLANG_RAW("    float compareValue = p.w;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"texture\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias $bias;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default: \n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler1DArrayShadow sampler, vec3 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.xy, p.z);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler1DArrayShadow sampler, vec3 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec2 location = p.xy;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"texture\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias $bias;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default: \n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(sampler2DArrayShadow sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.xyz, p.w);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float texture(samplerCubeArrayShadow sampler, vec4 p, float compare)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p, compare);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProj\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler1D<T> sampler, vec2 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.x / p.y);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler1D<T> sampler, vec2 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias $bias\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.x / p.y, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler1D<T> sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.x / p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler1D<T> sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias $bias\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.x / p.w, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler2D<T> sampler, vec3 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xy / p.z);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler2D<T> sampler, vec3 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias $bias\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xy / p.z, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler2D<T> sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xy / p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler2D<T> sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias $bias\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xy / p.w, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler3D<T> sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProj(Sampler3D<T> sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias $bias\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProj(sampler1DShadow sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xw__ $compareValue\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProj(sampler1DShadow sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xw__ $compareValue Bias $bias\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProj(sampler2DShadow sampler, vec4 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xyw_ $compareValue\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProj(sampler2DShadow sampler, vec4 p, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProj\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xyw_ $compareValue Bias $bias\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return texture(sampler, p.xyz / p.w, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureLod\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureLod(Sampler1D<T> sampler, float p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleLevel(p, lod));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureLod(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleLevel(p, lod));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLod(sampler2DShadow sampler, vec3 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return sampler.SampleCmp(p.xy, p.z);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLod(sampler2DArrayShadow sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.w;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return sampler.SampleCmp(p.xyz, p.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLod(sampler1DShadow sampler, vec3 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return sampler.SampleCmp(p.x, p.z);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLod(sampler1DArrayShadow sampler, vec3 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return sampler.SampleCmp(p.xy, p.z);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureOffset(Sampler1D<T> sampler, float p, constexpr int offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureOffset(Sampler2D<T> sampler, vec2 p, constexpr ivec2 offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureOffset(Sampler3D<T> sampler, vec3 p, constexpr ivec3 offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler2DShadow sampler, vec3 p, constexpr ivec2 offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec2 location = p.xy;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias|ConstOffset $bias $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler1DShadow sampler, vec3 p, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    float location = p.x;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue ConstOffset $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler1DShadow sampler, vec3 p, constexpr int offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    float location = p.x;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias|ConstOffset $bias $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureOffset(Sampler1DArray<T> sampler, vec2 p, constexpr int offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureOffset(Sampler2DArray<T> sampler, vec3 p, constexpr ivec2 offset, float bias = 0.0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleBias(p, bias, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler1DArrayShadow sampler, vec3 p, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec2 location = p.xy;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue ConstOffset $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue, vector<int,1>(offset));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler1DArrayShadow sampler, vec3 p, constexpr int offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vec2 location = p.xy;\n")
SLANG_RAW("    float compareValue = p.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefImplicitLod $sampler $location $compareValue Bias|ConstOffset $bias $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply bias\n")
SLANG_RAW("        return sampler.SampleCmp(location, compareValue, vector<int,1>(offset));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureOffset(sampler2DArrayShadow sampler, vec4 p, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.SampleCmp(p.xyz, p.w, offset);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// texelFetch\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetch(Sampler1D<T> sampler, int p, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(int2(p, lod)));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetch(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<int,Shape.dimensions+isArray> p, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(__makeVector(p,lod)));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetch(Sampler2DRect<T> sampler, ivec2 p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(int3(p.xy,0)));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetch(SamplerBuffer<T,format> sampler, int p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(p));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetch(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        __Shape2D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        1, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<int,2+isArray> p, int lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"texelFetch\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply lod\n")
SLANG_RAW("        return __vectorReshape2<T.Element,4>(sampler.Load(__makeVector(p, 0)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// texelFetchOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetchOffset(Sampler1D<T> sampler, int p, int lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(int2(p, lod), offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetchOffset(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<int,Shape.dimensions+isArray> p, int lod, constexpr vector<int,Shape.planeDimensions> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(__makeVector(p,lod), offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1_samplerless)]\n")
SLANG_RAW("public vector<T.Element,4> texelFetchOffset(Sampler2DRect<T> sampler, ivec2 p, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.Load(__makeVector(p, 0), offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProjOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler1D<T> sampler, vec2 p, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p ConstOffset $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.x / p.y, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler1D<T> sampler, vec2 p, constexpr int offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias|ConstOffset $bias $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.x / p.y, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler1D<T> sampler, vec4 p, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $xw__ ConstOffset $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.x / p.w, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler1D<T> sampler, vec4 p, constexpr int offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $xw__ Bias|ConstOffset $bias $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.x / p.w, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler2D<T> sampler, vec3 p, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p ConstOffset $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xy / p.z, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler2D<T> sampler, vec3 p, constexpr ivec2 offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias|ConstOffset $bias $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xy / p.z, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler2D<T> sampler, vec4 p, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw__ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $xyw__ ConstOffset $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xy / p.w, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler2D<T> sampler, vec4 p, constexpr ivec2 offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $xyw_ Bias|ConstOffset $bias $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xy / p.w, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler3D<T> sampler, vec4 p, constexpr ivec3 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p ConstOffset $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjOffset(Sampler3D<T> sampler, vec4 p, constexpr ivec3 offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjImplicitLod $sampler $p Bias|ConstOffset $bias $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjOffset(sampler1DShadow sampler, vec4 p, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xw__ $compareValue ConstOffset $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjOffset(sampler1DShadow sampler, vec4 p, constexpr int offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xw__ $compareValue Bias|ConstOffset $bias $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjOffset(sampler2DShadow sampler, vec4 p, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xyw_ $compareValue ConstOffset $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjOffset(sampler2DShadow sampler, vec4 p, constexpr ivec2 offset, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefImplicitLod $sampler $xyw_ $compareValue Bias|ConstOffset $bias $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureOffset(sampler, p.xyz / p.w, offset, bias);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureLodOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0)]\n")
SLANG_RAW("public vector<T.Element,4> textureLodOffset(Sampler1D<T> sampler, float p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleLevel(p, lod, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0)]\n")
SLANG_RAW("public vector<T.Element,4> textureLodOffset(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, float lod, constexpr vector<int,Shape.planeDimensions> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleLevel(p, lod, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLodOffset(sampler1DShadow sampler, vec3 p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply lod\n")
SLANG_RAW("        return sampler.SampleCmpLevelZero(p.x, p.z, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLodOffset(sampler2DShadow sampler, vec3 p, float lod, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply lod\n")
SLANG_RAW("        return sampler.SampleCmpLevelZero(p.xy, p.z, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureLodOffset(sampler1DArrayShadow sampler, vec3 p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        // TODO: Need to apply lod\n")
SLANG_RAW("        return sampler.SampleCmpLevelZero(p.xy, p.z, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProjLod\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLod(Sampler1D<T> sampler, vec2 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod $lod\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.x / p.y, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLod(Sampler1D<T> sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xw__ Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.x / p.w, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLod(Sampler2D<T> sampler, vec3 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod $lod\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.xy / p.z, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLod(Sampler2D<T> sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xyw_ Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.xy / p.w, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLod(Sampler3D<T> sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod $lod\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.xyz / p.w, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjLod(sampler1DShadow sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xw__ $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.xyz / p.w, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjLod(sampler2DShadow sampler, vec4 p, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLod\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xyw_ $compareValue Lod $lod\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLod(sampler, p.xyz / p.w, lod);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProjLodOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLodOffset(Sampler1D<T> sampler, vec2 p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod|ConstOffset $lod $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.x / p.y, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLodOffset(Sampler1D<T> sampler, vec4 p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xw__ Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.x / p.w, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLodOffset(Sampler2D<T> sampler, vec3 p, float lod, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod|ConstOffset $lod $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.xy / p.z, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLodOffset(Sampler2D<T> sampler, vec4 p, float lod, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xyw_ Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.xy / p.w, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjLodOffset(Sampler3D<T> sampler, vec4 p, float lod, constexpr ivec3 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Lod|ConstOffset $lod $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.xyz / p.w, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjLodOffset(sampler1DShadow sampler, vec4 p, float lod, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xw__ $compareValue Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.xyz / p.w, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjLodOffset(sampler2DShadow sampler, vec4 p, float lod, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjLodOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xyw_ $compareValue Lod|ConstOffset $lod $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureLodOffset(sampler, p.xyz / p.w, lod, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureGrad\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureGrad(Sampler1D<T> sampler, float p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleGrad(p, dPdx, dPdy));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureGrad(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, vector<float,Shape.dimensions> dPdx, vector<float,Shape.dimensions> dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleGrad(p, dPdx, dPdy));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGrad(sampler1DShadow sampler, vec3 p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGrad(sampler1DArrayShadow sampler, vec3 p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGrad(sampler2DShadow sampler, vec3 p, vec2 dPdx, vec2 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGrad(samplerCubeShadow sampler, vec4 p, vec3 dPdx, vec3 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.w;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGrad(sampler2DArrayShadow sampler, vec4 p, vec2 dPdx, vec2 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.w;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureGradOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureGradOffset(Sampler1D<T> sampler, float p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleGrad(p, dPdx, dPdy, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vector<T.Element,4> textureGradOffset(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, vector<float,Shape.dimensions> dPdx, vector<float,Shape.dimensions> dPdy, constexpr vector<int,Shape.dimensions> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __vectorReshape2<T.Element,4>(sampler.SampleGrad(p, dPdx, dPdy, offset));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGradOffset(sampler1DShadow sampler, vec3 p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGradOffset(sampler2DShadow sampler, vec3 p, vec2 dPdx, vec2 dPdy, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGradOffset(sampler1DArrayShadow sampler, vec3 p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureGradOffset(sampler2DArrayShadow sampler, vec4 p, vec2 dPdx, vec2 dPdy, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.w;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleDrefExplicitLod $sampler $p $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProjGrad\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGrad(Sampler1D<T> sampler, vec2 p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad $dPdx $dPdy\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.x / p.y, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGrad(Sampler1D<T> sampler, vec4 p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xw__ Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.x / p.w, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGrad(Sampler2D<T> sampler, vec3 p, vec2 dPdx, vec2 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad $dPdx $dPdy\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.xy / p.z, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGrad(Sampler2D<T> sampler, vec4 p, vec2 dPdx, vec2 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xyw_ Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.xy / p.w, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGrad(Sampler3D<T> sampler, vec4 p, vec3 dPdx, vec3 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad $dPdx $dPdy\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.xyz / p.w, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjGrad(sampler1DShadow sampler, vec4 p, float dPdx, float dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xw__ $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.xyz / p.w, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjGrad(sampler2DShadow sampler, vec4 p, vec2 dPdx, vec2 dPdy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGrad\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xyw_ $compareValue Grad $dPdx $dPdy\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGrad(sampler, p.xyz / p.w, dPdx, dPdy);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureProjGradOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGradOffset(Sampler1D<T> sampler, vec2 p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.x / p.y, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGradOffset(Sampler1D<T> sampler, vec4 p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xw__ Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.x / p.w, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGradOffset(Sampler2D<T> sampler, vec3 p, vec2 dPdx, vec2 dPdy, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.xy / p.z, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGradOffset(Sampler2D<T> sampler, vec4 p, vec2 dPdx, vec2 dPdy, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $xyw_ Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.xy / p.w, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_1)]\n")
SLANG_RAW("public vector<T.Element,4> textureProjGradOffset(Sampler3D<T> sampler, vec4 p, vec3 dPdx, vec3 dPdy, constexpr ivec3 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv: return spirv_asm {\n")
SLANG_RAW("        result:$$vector<T.Element,4> = OpImageSampleProjExplicitLod $sampler $p Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("    };\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.xyz / p.w, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjGradOffset(sampler1DShadow sampler, vec4 p, float dPdx, float dPdy, constexpr int offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xw__ = p.xwww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xw__ $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.xyz / p.w, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public float textureProjGradOffset(sampler2DShadow sampler, vec4 p, vec2 dPdx, vec2 dPdy, constexpr ivec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"textureProjGradOffset\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float compareValue = p.z;\n")
SLANG_RAW("        vec4 xyw_ = p.xyww;\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            result:$$float = OpImageSampleProjDrefExplicitLod $sampler $xyw_ $compareValue Grad|ConstOffset $dPdx $dPdy $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return textureGradOffset(sampler, p.xyz / p.w, dPdx, dPdy, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.9.4. Texture Gather Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureGather\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vector<T.Element,4> textureGather(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, int comp = 0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    switch (comp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        case 1: return sampler.GatherGreen(p);\n")
SLANG_RAW("        case 2: return sampler.GatherBlue(p);\n")
SLANG_RAW("        case 3: return sampler.GatherAlpha(p);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return sampler.GatherRed(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<Shape:__ITextureShape, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vec4 textureGather(_Texture<\n")
SLANG_RAW("        float,\n")
SLANG_RAW("        Shape,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        1, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,Shape.dimensions+isArray> p, float refZ)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.GatherCmp(p, refZ);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureGatherOffset\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vector<T.Element,4> textureGatherOffset(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        __Shape2D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,2+isArray> p, constexpr vector<int,2> offset, int comp = 0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    switch (comp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        case 1: return sampler.GatherGreen(p, offset);\n")
SLANG_RAW("        case 2: return sampler.GatherBlue(p, offset);\n")
SLANG_RAW("        case 3: return sampler.GatherAlpha(p, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return sampler.Gather(p, offset);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vec4 textureGatherOffset(_Texture<\n")
SLANG_RAW("        float,\n")
SLANG_RAW("        __Shape2D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        1, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,2+isArray> p, float refZ, constexpr vector<int,2> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.GatherCmp(p, refZ, offset);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("// textureGatherOffsets\n")
SLANG_RAW("// -------------------\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:ITexelElement, let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vector<T.Element,4> textureGatherOffsets(_Texture<\n")
SLANG_RAW("        T,\n")
SLANG_RAW("        __Shape2D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        0, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,2+isArray> p, constexpr vector<int,2> offsets[4], int comp = 0)\n")
SLANG_RAW("{\n")
SLANG_RAW("    switch (comp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        case 1: return sampler.GatherGreen(p, offsets[0], offsets[1], offsets[2], offsets[3]);\n")
SLANG_RAW("        case 2: return sampler.GatherBlue(p, offsets[0], offsets[1], offsets[2], offsets[3]);\n")
SLANG_RAW("        case 3: return sampler.GatherAlpha(p, offsets[0], offsets[1], offsets[2], offsets[3]);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return sampler.Gather(p, offsets[0], offsets[1], offsets[2], offsets[3]);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let isArray:int, let sampleCount:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_gather)]\n")
SLANG_RAW("public vec4 textureGatherOffsets(_Texture<\n")
SLANG_RAW("        float,\n")
SLANG_RAW("        __Shape2D,\n")
SLANG_RAW("        isArray,\n")
SLANG_RAW("        0, // isMS\n")
SLANG_RAW("        sampleCount,\n")
SLANG_RAW("        0, // access\n")
SLANG_RAW("        1, // isShadow\n")
SLANG_RAW("        1, // isCombined\n")
SLANG_RAW("        format\n")
SLANG_RAW("    > sampler, vector<float,2+isArray> p, float refZ, constexpr vector<int,2> offsets[4])\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sampler.GatherCmp(p, refZ, offsets[0], offsets[1], offsets[2], offsets[3]);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Section 8.9.5. Compatibility Profile Texture Functions\n")
SLANG_RAW("//\n")
SLANG_RAW("// Note: the following functions exist for GLSL but not for SPIR-V.\n")
SLANG_RAW("// If we use `case glsl: __intrinsic_asm \"XXX\";`, it will cause an\n")
SLANG_RAW("// error when we try to translate the GLSL to SPIR-V.\n")
SLANG_RAW("// So we cannot use them.\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1D(sampler1D sampler, float coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1D(sampler1D sampler, float coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProj(sampler1D sampler, vec2 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProj(sampler1D sampler, vec2 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProj(sampler1D sampler, vec4 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProj(sampler1D sampler, vec4 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DLod(sampler1D sampler, float coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProjLod(sampler1D sampler, vec2 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture1DProjLod(sampler1D sampler, vec4 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2D(sampler2D sampler, vec2 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2D(sampler2D sampler, vec2 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProj(sampler2D sampler, vec3 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProj(sampler2D sampler, vec3 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProj(sampler2D sampler, vec4 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProj(sampler2D sampler, vec4 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DLod(sampler2D sampler, vec2 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProjLod(sampler2D sampler, vec3 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture2DProjLod(sampler2D sampler, vec4 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3D(sampler3D sampler, vec3 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3D(sampler3D sampler, vec3 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3DProj(sampler3D sampler, vec4 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3DProj(sampler3D sampler, vec4 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3DLod(sampler3D sampler, vec3 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 texture3DProjLod(sampler3D sampler, vec4 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 textureCube(samplerCube sampler, vec3 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 textureCube(samplerCube sampler, vec3 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_glsl_hlsl_spirv, texture_sm_4_0_fragment)]\n")
SLANG_RAW("public vec4 textureCubeLod(samplerCube sampler, vec3 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1D(sampler1DShadow sampler, vec3 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1D(sampler1DShadow sampler, vec3 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2D(sampler2DShadow sampler, vec3 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2D(sampler2DShadow sampler, vec3 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return texture(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1DProj(sampler1DShadow sampler, vec4 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1DProj(sampler1DShadow sampler, vec4 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2DProj(sampler2DShadow sampler, vec4 coord)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2DProj(sampler2DShadow sampler, vec4 coord, float bias)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProj(sampler, coord, bias);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1DLod(sampler1DShadow sampler, vec3 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2DLod(sampler2DShadow sampler, vec3 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow1DProjLod(sampler1DShadow sampler, vec4 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(glsl_spirv, texture_shadowlod)]\n")
SLANG_RAW("public vec4 shadow2DProjLod(sampler2DShadow sampler, vec4 coord, float lod)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return textureProjLod(sampler, coord, lod);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//// gimageDim Implementation\n")
SLANG_RAW("\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0;\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 1;\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 2;\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 3;\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 4;\n")
SLANG_RAW("public static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 5;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline] void typeRequireChecks_image_atomic_tier1()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float\");\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\";\n")
SLANG_RAW("                OpCapability AtomicFloat32AddEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline] void typeRequireChecks_image_atomic_tier2()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float2\");\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_min_max\";\n")
SLANG_RAW("                OpCapability AtomicFloat32MinMaxEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline] void typeRequireChecks_image_atomic_int64()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__type_equals<T, uint64_t>()\n")
SLANG_RAW("            || __type_equals<T, int64_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpCapability Int64Atomics\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

{
    struct ImageTypeInfo
    {
        const char *prefix;
        const char *type;
        bool isInt;
        const char *SPVTypePrefix;
        const char *SPVSubTypePrefix;
        const char *SPVAtomicSuffix;
    };
    static const ImageTypeInfo kTypeWithPrefix[] =
        {
            { "", "float", false, "F", "F", "EXT"},
            { "u", "uint", true, "I", "U", ""},
            { "i", "int", true, "I", "S", ""},
            { "u64", "uint64_t", true, "I", "U", ""},
            { "i64", "int64_t", true, "I", "S", ""},
        };
    struct ShapeTypeInfo
    {
        const char *suffix;
        int imageSizeIVecDim;
        int imageCoordIVecIndexerDim;
        const char *shape;
        int isArray;
        int isMS;
        bool isRect;
    }
    static const kShapeType[] =
        {
            { "1D", 1, 1,"__Shape1D", 0, 0, 0},

            { "2D", 2, 2, "__Shape2D", 0, 0, 0},
            { "3D", 3, 3, "__Shape3D", 0, 0, 0},
            { "Cube", 2, 3, "__ShapeCube", 0, 0, 0},
            { "2DRect", 2, 2, "__Shape2D", 0, 0, 1},
            { "1DArray", 2, 2, "__Shape1D", 1, 0, 0},

            { "2DArray", 3, 3, "__Shape2D", 1, 0, 0},
            { "CubeArray", 3, 3, "__ShapeCube", 1, 0, 0},
            { "Buffer", 1, 1, "__ShapeBuffer", 0, 0, 0},
            { "2DMS", 2, 2, "__Shape2D", 0, 1, 0},
            { "2DMSArray", 3, 3, "__Shape2D", 1, 1, 0},
        };
    for (const auto& targetType : kTypeWithPrefix)
    for (const auto& targetShape : kShapeType)
    {
        // gimageDim is the format of image buffers, we
        // need to resolve a type name from the format:
        // targetType.prefix is the 'g'
        // targetShape.suffix is the 'Dim'
        StringBuilder fullTypeNameBuilder;
        fullTypeNameBuilder << targetType.prefix << "image" << targetShape.suffix;
        auto fullTypeName = fullTypeNameBuilder.toString();

        // We need a string to resolve for the imageSize return type
        // since each shape has a different return which may not be
        // a vec
        StringBuilder imageSizeIntOrIVecBuilder;
        if (targetShape.imageSizeIVecDim == 1)
            imageSizeIntOrIVecBuilder << "int";
        else
            imageSizeIntOrIVecBuilder << "ivec" << targetShape.imageSizeIVecDim;
        auto imageSizeIntOrIVec = imageSizeIntOrIVecBuilder.toString();

        // Following OpenGL/Vulkan semantics, IMAGE_PARAMS string represents
        // the changing list of parameters per gimageDim type
        // https://registry.khronos.org/OpenGL/specs/gl/GLSLangSpec.4.60.pdf
        StringBuilder IMAGE_PARAMSBuilder;
        IMAGE_PARAMSBuilder << fullTypeName << " image,";
        int paramC = targetShape.imageCoordIVecIndexerDim;
        if (paramC == 1)
            IMAGE_PARAMSBuilder << "int";
        else
            IMAGE_PARAMSBuilder << "ivec" << paramC;
        IMAGE_PARAMSBuilder << " P";
        if (targetShape.isMS)
        {
            IMAGE_PARAMSBuilder << ", int sample";
        }
        auto IMAGE_PARAMS = IMAGE_PARAMSBuilder.toString();

        // SPIR-V requires a 'sample' parameter for all texture
        // functions. We need to handle a dynamic creation of
        // 'sample' if 'sample' parameter is not in IMAGE_PARAMS
        StringBuilder SPV_PREFIX_IMAGE_PARAMSBuilder;
        StringBuilder SPV_SUFFIX_IMAGE_PARAMSBuilder;
        StringBuilder SPV_DEFAULT_SAMPLE_VAR_IF_MISSINGBuilder;

        SPV_PREFIX_IMAGE_PARAMSBuilder << "$image $P";
        if (targetShape.isMS)
        {
            SPV_SUFFIX_IMAGE_PARAMSBuilder << " Sample $sample";
        }
        else
        {
            SPV_DEFAULT_SAMPLE_VAR_IF_MISSINGBuilder << "let sample = 0;";
        }

        auto SPV_PREFIX_IMAGE_PARAMS = SPV_PREFIX_IMAGE_PARAMSBuilder.toString();
        auto SPV_SUFFIX_IMAGE_PARAMS = SPV_SUFFIX_IMAGE_PARAMSBuilder.toString();
        auto SPV_DEFAULT_SAMPLE_VAR_IF_MISSING = SPV_DEFAULT_SAMPLE_VAR_IF_MISSINGBuilder.toString();
    
SLANG_RAW("#line 4265 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("        __generic<let format:int=0>\n")
SLANG_RAW("        public typealias ")
SLANG_SPLICE(fullTypeName
)
SLANG_RAW(" = _Texture<\n")
SLANG_RAW("            ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(",\n")
SLANG_RAW("            ")
SLANG_SPLICE(targetShape.shape
)
SLANG_RAW(",\n")
SLANG_RAW("            ")
SLANG_SPLICE(targetShape.isArray
)
SLANG_RAW(", // isArray\n")
SLANG_RAW("            ")
SLANG_SPLICE(targetShape.isMS
)
SLANG_RAW(", // isMS\n")
SLANG_RAW("            0, // sampleCount\n")
SLANG_RAW("            1, // access\n")
SLANG_RAW("            0, // isShadow\n")
SLANG_RAW("            0, // isCombined\n")
SLANG_RAW("            format\n")
SLANG_RAW("        >;\n")
SLANG_RAW("\n")

        if(targetShape.isRect)
            continue;
SLANG_RAW("#line 4283 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("        // readonly writeonly in GLSL means an object only allows information queries.\n")
SLANG_RAW("        [__readNone]\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_size)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(imageSizeIntOrIVec
)
SLANG_RAW(" imageSize(readonly writeonly ")
SLANG_SPLICE(fullTypeName
)
SLANG_RAW(" image)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageSize($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(imageSizeIntOrIVec
)
SLANG_RAW(" = OpImageQuerySize $image;\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.prefix
)
SLANG_RAW("vec4 imageLoad(readonly ")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(")\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageLoad($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.prefix
)
SLANG_RAW("vec4 = OpImageRead ")
SLANG_SPLICE(SPV_PREFIX_IMAGE_PARAMS
)
SLANG_RAW(" ")
SLANG_SPLICE(SPV_SUFFIX_IMAGE_PARAMS
)
SLANG_RAW(";\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public void imageStore(writeonly ")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.prefix
)
SLANG_RAW("vec4 data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageStore($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpImageWrite ")
SLANG_SPLICE(SPV_PREFIX_IMAGE_PARAMS
)
SLANG_RAW(" $data ")
SLANG_SPLICE(SPV_SUFFIX_IMAGE_PARAMS
)
SLANG_RAW(";\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("\n")

        if (targetShape.isMS)
        {
SLANG_RAW("#line 4341 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("            // readonly writeonly in GLSL means an object only allows information queries.\n")
SLANG_RAW("            [__readNone]\n")
SLANG_RAW("            [ForceInline]\n")
SLANG_RAW("            [require(glsl_spirv, image_samples)]\n")
SLANG_RAW("            public int imageSamples(readonly writeonly ")
SLANG_SPLICE(fullTypeName
)
SLANG_RAW(" image)\n")
SLANG_RAW("            {\n")
SLANG_RAW("                __target_switch\n")
SLANG_RAW("                {\n")
SLANG_RAW("                case glsl: __intrinsic_asm \"imageSamples($*0)\";\n")
SLANG_RAW("                case spirv:\n")
SLANG_RAW("                    return spirv_asm\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        OpCapability ImageQuery;\n")
SLANG_RAW("                        result:$$int = OpImageQuerySamples $image;\n")
SLANG_RAW("                    };\n")
SLANG_RAW("                }\n")
SLANG_RAW("            }\n")

        }
SLANG_RAW("#line 4361 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicAdd(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            typeRequireChecks_image_atomic_tier1<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicAdd($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomic")
SLANG_SPLICE(targetType.SPVTypePrefix
)
SLANG_RAW("Add")
SLANG_SPLICE(targetType.SPVAtomicSuffix
)
SLANG_RAW(" %ptr Device None $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicExchange(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            typeRequireChecks_image_atomic_tier1<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicExchange($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomicExchange %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicMin(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            typeRequireChecks_image_atomic_tier2<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicMin($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomic")
SLANG_SPLICE(targetType.SPVSubTypePrefix
)
SLANG_RAW("Min")
SLANG_SPLICE(targetType.SPVAtomicSuffix
)
SLANG_RAW(" %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicMax(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            typeRequireChecks_image_atomic_tier2<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicMax($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomic")
SLANG_SPLICE(targetType.SPVSubTypePrefix
)
SLANG_RAW("Max")
SLANG_SPLICE(targetType.SPVAtomicSuffix
)
SLANG_RAW(" %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")

        if (!targetType.isInt)
            continue;
SLANG_RAW("#line 4457 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicAnd(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicAnd($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomicAnd %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicOr(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicOr($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomicOr %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        \n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicXor(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicXor($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomicXor %ptr Device ImageMemory $data\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        [require(glsl_spirv, image_loadstore)]\n")
SLANG_RAW("        public ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" imageAtomicCompSwap(")
SLANG_SPLICE(IMAGE_PARAMS
)
SLANG_RAW(", ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" compare, ")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" data)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("            case glsl: __intrinsic_asm \"imageAtomicCompSwap($*0)\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            {\n")
SLANG_RAW("                let imageP = __getLegalizedSPIRVGlobalParamAddr(image);\n")
SLANG_RAW("                typeRequireChecks_image_atomic_int64<")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(">();\n")
SLANG_RAW("                ")
SLANG_SPLICE(SPV_DEFAULT_SAMPLE_VAR_IF_MISSING
)
SLANG_RAW("\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability ImageQuery;\n")
SLANG_RAW("                    %ptrType = OpTypePointer Image $$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(";\n")
SLANG_RAW("                    %ptr:%ptrType = OpImageTexelPointer $imageP $P $sample;\n")
SLANG_RAW("                    result:$$")
SLANG_SPLICE(targetType.type
)
SLANG_RAW(" = OpAtomicCompareExchange %ptr Device ImageMemory ImageMemory $data $compare\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")

    }
}
SLANG_RAW("#line 4550 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("//// RayTracing\n")
SLANG_RAW("\n")
SLANG_RAW("// Ray Tracing variables\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias rayQueryEXT = RayQuery;\n")
SLANG_RAW("public typealias accelerationStructureEXT = RaytracingAccelerationStructure;\n")
SLANG_RAW("public typealias accelerationStructureNV = RaytracingAccelerationStructure;\n")
SLANG_RAW("\n")
SLANG_RAW("public typealias hitObjectNV = HitObject;\n")
SLANG_RAW("\n")
SLANG_RAW("//GL_EXT_ray_tracing BuiltIn's \n")
SLANG_RAW("\n")
SLANG_RAW("[require(any_target, raytracing_allstages)]\n")
SLANG_RAW("void requireGLSLExtForRayTracingBuiltin() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __requireTargetExtension(\"GL_EXT_ray_tracing\");\n")
SLANG_RAW("        __intrinsic_asm \"\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.4) \n")
SLANG_RAW("[require(any_target, raytracing_allstages)]\n")
SLANG_RAW("void setupExtForRayTracingBuiltIn() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        requireGLSLExtForRayTracingBuiltin();\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint3 gl_LaunchIDNV \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_allstages)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_LaunchIDNV)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                result:$$uint3 = OpLoad builtin(LaunchIdNV:uint3);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }    \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint3 gl_LaunchIDEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(cuda_glsl_hlsl_spirv, raytracing_allstages)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return DispatchRaysIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint3 gl_LaunchSizeNV \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_allstages)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_LaunchSizeNV)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                result:$$uint3 = OpLoad builtin(LaunchSizeNV:uint3);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint3 gl_LaunchSizeEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(cuda_glsl_hlsl_spirv, raytracing_allstages)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return DispatchRaysDimensions();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("internal in int __gl_PrimitiveID : SV_PrimitiveID;\n")
SLANG_RAW("\n")
SLANG_RAW("public property int gl_PrimitiveID \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        __stage_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case anyhit:\n")
SLANG_RAW("        case closesthit:\n")
SLANG_RAW("        case intersection:\n")
SLANG_RAW("            setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("            return PrimitiveIndex();\n")
SLANG_RAW("        default:\n")
SLANG_RAW("            return __gl_PrimitiveID;   \n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property int gl_InstanceID \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(cuda_glsl_hlsl_spirv)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        __stage_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case anyhit:\n")
SLANG_RAW("        case closesthit:\n")
SLANG_RAW("        case intersection:\n")
SLANG_RAW("            setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("            return InstanceIndex();\n")
SLANG_RAW("        default:\n")
SLANG_RAW("            return gl_InstanceIndex;\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property int gl_InstanceCustomIndexEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(cuda_glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get \n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return InstanceID();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property int gl_GeometryIndexEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return GeometryIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property vec3 gl_WorldRayOriginEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return WorldRayOrigin();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property vec3 gl_WorldRayDirectionEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return WorldRayDirection();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property vec3 gl_ObjectRayOriginEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return ObjectRayOrigin();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property vec3 gl_ObjectRayDirectionEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return ObjectRayDirection();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property float gl_RayTminEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return RayTMin();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property float gl_RayTmaxEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return RayTCurrent();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_IncomingRayFlagsEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return RayFlags();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property float gl_HitTEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit_closesthit)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_HitTEXT)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                result:$$float = OpLoad builtin(RayTmaxKHR:float);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_HitKindEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, raytracing_anyhit_closesthit)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        return HitKind();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property mat4x3 gl_ObjectToWorldEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_ObjectToWorldEXT)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                result:$$mat4x3 = OpLoad builtin(ObjectToWorldKHR:mat4x3);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property mat3x4 gl_ObjectToWorld3x4EXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_ObjectToWorld3x4EXT)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                %mat:$$mat4x3 = OpLoad builtin(ObjectToWorldKHR:mat4x3);\n")
SLANG_RAW("                result:$$mat3x4 = OpTranspose %mat\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property mat4x3 gl_WorldToObjectEXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_WorldToObjectEXT)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                result:$$mat4x3 = OpLoad builtin(WorldToObjectKHR:mat4x3);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property mat3x4 gl_WorldToObject3x4EXT \n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit_closesthit_intersection)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __intrinsic_asm \"(gl_WorldToObject3x4EXT)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("        {\n")
SLANG_RAW("            return spirv_asm \n")
SLANG_RAW("            {\n")
SLANG_RAW("                %mat:$$mat4x3 = OpLoad builtin(WorldToObjectKHR:mat4x3);\n")
SLANG_RAW("                result:$$mat3x4 = OpTranspose %mat\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_EXT_ray_tracing functions\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("[require(glsl_spirv, raytracing_raygen_closesthit_miss)]\n")
SLANG_RAW("public void traceRayEXT(\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    uint rayFlags,\n")
SLANG_RAW("    uint cullMask,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    uint missIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    constexpr int payload)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __traceRay(\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            rayFlags,\n")
SLANG_RAW("            cullMask,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            missIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            payload);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm \n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpTraceRayKHR \n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $rayFlags\n")
SLANG_RAW("                /**/ $cullMask\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $missIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ __rayPayloadFromLocation(payload);\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("[require(glsl_spirv, raytracing_intersection)]\n")
SLANG_RAW("public bool reportIntersectionEXT(float hitT, uint hitKind)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __reportIntersection(hitT, hitKind);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property int terminateRayEXT\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit)]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        AcceptHitAndEndSearch();\n")
SLANG_RAW("        return 0;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property int ignoreIntersectionEXT\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_anyhit)]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        setupExtForRayTracingBuiltIn();\n")
SLANG_RAW("        IgnoreHit();\n")
SLANG_RAW("        return 0;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("[require(glsl_spirv, raytracing_raygen_closesthit_miss_callable)]\n")
SLANG_RAW("public void executeCallableEXT(\n")
SLANG_RAW("    uint sbtRecordIndex, \n")
SLANG_RAW("    int callable /*callableDataEXT and callableDataInEXT*/)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __executeCallable(sbtRecordIndex, callable);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            OpExecuteCallableKHR $sbtRecordIndex __rayCallableFromLocation(callable)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_EXT_ray_tracing constants\n")
SLANG_RAW("\n")
SLANG_RAW("public static const uint gl_HitKindFrontFacingTriangleEXT = 0xFEU;\n")
SLANG_RAW("public static const uint gl_HitKindBackFacingTriangleEXT = 0xFFU;\n")
SLANG_RAW("\n")
SLANG_RAW("/// GL_EXT_ray_query\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_EXT_ray_query constants\n")
SLANG_RAW("\n")
SLANG_RAW("public static const uint gl_RayFlagsNoneEXT = 0U;\n")
SLANG_RAW("public static const uint gl_RayFlagsOpaqueEXT = 1U;\n")
SLANG_RAW("public static const uint gl_RayFlagsNoOpaqueEXT = 2U;\n")
SLANG_RAW("public static const uint gl_RayFlagsTerminateOnFirstHitEXT = 4U;\n")
SLANG_RAW("public static const uint gl_RayFlagsSkipClosestHitShaderEXT = 8U;\n")
SLANG_RAW("public static const uint gl_RayFlagsCullBackFacingTrianglesEXT = 16U;\n")
SLANG_RAW("public static const uint gl_RayFlagsCullFrontFacingTrianglesEXT = 32U;\n")
SLANG_RAW("public static const uint gl_RayFlagsCullOpaqueEXT = 64U;\n")
SLANG_RAW("public static const uint gl_RayFlagsCullNoOpaqueEXT = 128U;\n")
SLANG_RAW("\n")
SLANG_RAW("public static const uint gl_RayQueryCommittedIntersectionNoneEXT = 0U;\n")
SLANG_RAW("public static const uint gl_RayQueryCommittedIntersectionTriangleEXT = 1U;\n")
SLANG_RAW("public static const uint gl_RayQueryCommittedIntersectionGeneratedEXT = 2U;\n")
SLANG_RAW("\n")
SLANG_RAW("public static const uint gl_RayQueryCandidateIntersectionTriangleEXT = 0U;\n")
SLANG_RAW("public static const uint gl_RayQueryCandidateIntersectionAABBEXT = 1U;\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_EXT_ray_query functions\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public void rayQueryInitializeEXT(\n")
SLANG_RAW("    inout rayQueryEXT q,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    uint rayFlags, uint cullMask, vec3 origin,\n")
SLANG_RAW("    float tMin, vec3 direction, float tMax)\n")
SLANG_RAW("{\n")
SLANG_RAW("    q.TraceRayInline(\n")
SLANG_RAW("        topLevel, \n")
SLANG_RAW("        rayFlags, \n")
SLANG_RAW("        cullMask, \n")
SLANG_RAW("        { origin, tMin, direction, tMax });\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public bool rayQueryProceedEXT(inout rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.Proceed();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("[mutating]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public void rayQueryTerminateEXT(inout rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    q.Abort();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public void rayQueryGenerateIntersectionEXT(inout rayQueryEXT q, float tHit)\n")
SLANG_RAW("{\n")
SLANG_RAW("    q.CommitProceduralPrimitiveHit(tHit);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public void rayQueryConfirmIntersectionEXT(inout rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    q.CommitNonOpaqueTriangleHit();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public uint rayQueryGetIntersectionTypeEXT(rayQueryEXT q, bool committed)\n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedStatus();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateType();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public float rayQueryGetRayTMinEXT(rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.RayTMin();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public uint rayQueryGetRayFlagsEXT(rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.RayFlags();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public vec3 rayQueryGetWorldRayOriginEXT(rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.WorldRayOrigin();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public vec3 rayQueryGetWorldRayDirectionEXT(rayQueryEXT q)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.WorldRayDirection();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public float rayQueryGetIntersectionTEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayT();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateTriangleRayT();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public int rayQueryGetIntersectionInstanceCustomIndexEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayInstanceCustomIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayInstanceCustomIndex();;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public int rayQueryGetIntersectionInstanceIdEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayInstanceId();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayInstanceId();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public uint rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayInstanceShaderBindingTableRecordOffset();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayInstanceShaderBindingTableRecordOffset();    \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public int rayQueryGetIntersectionGeometryIndexEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayGeometryIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayGeometryIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public int rayQueryGetIntersectionPrimitiveIndexEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayPrimitiveIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayPrimitiveIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public vec2 rayQueryGetIntersectionBarycentricsEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayBarycentrics();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayBarycentrics();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public bool rayQueryGetIntersectionFrontFaceEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayFrontFace();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayFrontFace();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public bool rayQueryGetIntersectionCandidateAABBOpaqueEXT(rayQueryEXT q) \n")
SLANG_RAW("{\n")
SLANG_RAW("    return q.CandidateProceduralPrimitiveNonOpaque();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public vec3 rayQueryGetIntersectionObjectRayDirectionEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayObjectRayDirection();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayObjectRayDirection();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public vec3 rayQueryGetIntersectionObjectRayOriginEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayObjectRayOrigin();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayObjectRayOrigin();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public mat4x3 rayQueryGetIntersectionObjectToWorldEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayObjectToWorld();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayObjectToWorld();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, rayquery)]\n")
SLANG_RAW("public mat4x3 rayQueryGetIntersectionWorldToObjectEXT(rayQueryEXT q, bool committed) \n")
SLANG_RAW("{\n")
SLANG_RAW("    if (committed) \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CommittedRayWorldToObject();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else \n")
SLANG_RAW("    {\n")
SLANG_RAW("        return q.CandidateRayWorldToObject();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// GL_NV_shader_invocation_reorder\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectTraceRayNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    uint rayFlags,\n")
SLANG_RAW("    uint cullMask,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    uint missIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    constexpr int payload) \n")
SLANG_RAW("    {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslTraceRay(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            rayFlags,\n")
SLANG_RAW("            cullMask,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            missIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            payload);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpHitObjectTraceRayNV\n")
SLANG_RAW("                &hitObject\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $rayFlags\n")
SLANG_RAW("                /**/ $cullMask\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $missIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ __rayPayloadFromLocation(payload)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_motion_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectTraceRayMotionNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject, \n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    uint rayFlags,\n")
SLANG_RAW("    uint cullMask,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    uint missIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    float currentTime,\n")
SLANG_RAW("    constexpr int payload)\n")
SLANG_RAW("    {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslTraceMotionRay(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            rayFlags,\n")
SLANG_RAW("            cullMask,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            missIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            currentTime,\n")
SLANG_RAW("            payload);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability RayTracingMotionBlurNV;\n")
SLANG_RAW("            OpExtension \"SPV_NV_ray_tracing_motion_blur\";\n")
SLANG_RAW("            OpHitObjectTraceRayMotionNV\n")
SLANG_RAW("                /**/ &hitObject \n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $rayFlags\n")
SLANG_RAW("                /**/ $cullMask\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $missIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ $currentTime\n")
SLANG_RAW("                /**/ __rayPayloadFromLocation(payload)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordHitNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    int instanceid,\n")
SLANG_RAW("    int primitiveid,\n")
SLANG_RAW("    int geometryindex,\n")
SLANG_RAW("    uint hitKind,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    constexpr int attributeLocation)\n")
SLANG_RAW("    {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslMakeHit(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            instanceid,\n")
SLANG_RAW("            primitiveid,\n")
SLANG_RAW("            geometryindex,\n")
SLANG_RAW("            hitKind,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            attributeLocation);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpHitObjectRecordHitNV\n")
SLANG_RAW("                /**/ &hitObject\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $instanceid\n")
SLANG_RAW("                /**/ $primitiveid\n")
SLANG_RAW("                /**/ $geometryindex\n")
SLANG_RAW("                /**/ $hitKind\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ __rayAttributeFromLocation(attributeLocation)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_motion_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordHitMotionNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    int instanceid,\n")
SLANG_RAW("    int primitiveid,\n")
SLANG_RAW("    int geometryindex,\n")
SLANG_RAW("    uint hitKind,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    float currentTime,\n")
SLANG_RAW("    constexpr int attributeLocation)\n")
SLANG_RAW("    {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslMakeMotionHit(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            instanceid,\n")
SLANG_RAW("            primitiveid,\n")
SLANG_RAW("            geometryindex,\n")
SLANG_RAW("            hitKind,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            currentTime,\n")
SLANG_RAW("            attributeLocation);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpHitObjectRecordHitMotionNV\n")
SLANG_RAW("                /**/ &hitObject\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $instanceid\n")
SLANG_RAW("                /**/ $primitiveid\n")
SLANG_RAW("                /**/ $geometryindex\n")
SLANG_RAW("                /**/ $hitKind\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ $currentTime\n")
SLANG_RAW("                /**/ __rayAttributeFromLocation(attributeLocation)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordHitWithIndexNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    int instanceid,\n")
SLANG_RAW("    int primitiveid,\n")
SLANG_RAW("    int geometryindex,\n")
SLANG_RAW("    uint hitKind,\n")
SLANG_RAW("    uint sbtRecordIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    constexpr int attributeLocation)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslMakeHitWithIndex(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            instanceid,\n")
SLANG_RAW("            primitiveid,\n")
SLANG_RAW("            geometryindex,\n")
SLANG_RAW("            hitKind,\n")
SLANG_RAW("            sbtRecordIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            attributeLocation);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpHitObjectRecordHitWithIndexNV\n")
SLANG_RAW("                /**/ &hitObject\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $instanceid\n")
SLANG_RAW("                /**/ $primitiveid\n")
SLANG_RAW("                /**/ $geometryindex\n")
SLANG_RAW("                /**/ $hitKind\n")
SLANG_RAW("                /**/ $sbtRecordIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ __rayAttributeFromLocation(attributeLocation)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_motion_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordHitWithIndexMotionNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject,\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    int instanceid,\n")
SLANG_RAW("    int primitiveid,\n")
SLANG_RAW("    int geometryindex,\n")
SLANG_RAW("    uint hitKind,\n")
SLANG_RAW("    uint sbtRecordIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    float currentTime,\n")
SLANG_RAW("    constexpr int attributeLocation)\n")
SLANG_RAW("    {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslMakeMotionHitWithIndex(\n")
SLANG_RAW("            hitObject,\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            instanceid,\n")
SLANG_RAW("            primitiveid,\n")
SLANG_RAW("            geometryindex,\n")
SLANG_RAW("            hitKind,\n")
SLANG_RAW("            sbtRecordIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            currentTime,\n")
SLANG_RAW("            attributeLocation);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability RayTracingMotionBlurNV;\n")
SLANG_RAW("            OpExtension \"SPV_NV_ray_tracing_motion_blur\";\n")
SLANG_RAW("            OpHitObjectRecordHitWithIndexMotionNV\n")
SLANG_RAW("                /**/ &hitObject\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $instanceid\n")
SLANG_RAW("                /**/ $primitiveid\n")
SLANG_RAW("                /**/ $geometryindex\n")
SLANG_RAW("                /**/ $hitKind\n")
SLANG_RAW("                /**/ $sbtRecordIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ $currentTime\n")
SLANG_RAW("                /**/ __rayAttributeFromLocation(attributeLocation)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordMissNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject, \n")
SLANG_RAW("    uint sbtRecordIndex, \n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax)\n")
SLANG_RAW("{\n")
SLANG_RAW("    hitObject = HitObject::MakeMiss(\n")
SLANG_RAW("        sbtRecordIndex,\n")
SLANG_RAW("        { origin, Tmin, direction, Tmax }\n")
SLANG_RAW("        );\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_motion_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordMissMotionNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject, \n")
SLANG_RAW("    uint sbtRecordIndex, \n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    float currentTime)\n")
SLANG_RAW("{\n")
SLANG_RAW("    hitObject = HitObject::MakeMotionMiss(\n")
SLANG_RAW("        sbtRecordIndex,\n")
SLANG_RAW("        { origin, Tmin, direction, Tmax },\n")
SLANG_RAW("        currentTime\n")
SLANG_RAW("        );\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectRecordEmptyNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    hitObject = HitObject::MakeNop();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectExecuteShaderNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject, \n")
SLANG_RAW("    constexpr int payload)\n")
SLANG_RAW("{    \n")
SLANG_RAW("    __target_switch \n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject::__glslInvoke(hitObject, payload);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm \n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpHitObjectExecuteShaderNV &hitObject __rayPayloadFromLocation(payload)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public bool hitObjectIsEmptyNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.IsNop();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public bool hitObjectIsMissNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.IsMiss();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public bool hitObjectIsHitNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.IsHit();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public float hitObjectGetRayTMinNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetRayDesc().TMin;  \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public float hitObjectGetRayTMaxNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetRayDesc().TMax; \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public vec3 hitObjectGetWorldRayOriginNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetRayDesc().Origin;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public vec3 hitObjectGetWorldRayDirectionNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetRayDesc().Direction; \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public vec3 hitObjectGetObjectRayOriginNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetObjectRayOrigin();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public vec3 hitObjectGetObjectRayDirectionNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetObjectRayDirection();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public mat4x3 hitObjectGetObjectToWorldNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetObjectToWorld();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public mat4x3 hitObjectGetWorldToObjectNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetWorldToObject(); \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public int hitObjectGetInstanceCustomIndexNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetInstanceID();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public int hitObjectGetInstanceIdNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetInstanceIndex();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public int hitObjectGetGeometryIndexNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetGeometryIndex();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public int hitObjectGetPrimitiveIndexNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetPrimitiveIndex();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public uint hitObjectGetHitKindNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetHitKind();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public void hitObjectGetAttributesNV(\n")
SLANG_RAW("    inout hitObjectNV hitObject, \n")
SLANG_RAW("    constexpr int attributeLocation)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __intrinsic_asm \"hitObjectGetAttributesNV($0, $1)\";\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm \n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability ShaderInvocationReorderNV; \n")
SLANG_RAW("            OpHitObjectGetAttributesNV &hitObject __rayAttributeFromLocation(attributeLocation)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public uvec2 hitObjectGetShaderRecordBufferHandleNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetShaderRecordBufferHandle();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public uint hitObjectGetShaderBindingTableRecordIndexNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetShaderTableIndex();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen_closesthit_miss)]\n")
SLANG_RAW("public float hitObjectGetCurrentTimeNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return hitObject.GetCurrentTime();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen)]\n")
SLANG_RAW("public void reorderThreadNV(uint hint, uint bits)\n")
SLANG_RAW("{\n")
SLANG_RAW("    ReorderThread(hint, bits);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen)]\n")
SLANG_RAW("public void reorderThreadNV(hitObjectNV hitObject)\n")
SLANG_RAW("{\n")
SLANG_RAW("    ReorderThread(hitObject);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GLSL_EXT_buffer_reference_uvec2)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, ser_raygen)]\n")
SLANG_RAW("public void reorderThreadNV(hitObjectNV hitObject, uint hint, uint bits)\n")
SLANG_RAW("{\n")
SLANG_RAW("    ReorderThread(hitObject, hint, bits);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// GL_NV_ray_tracing_motion_blur\n")
SLANG_RAW("\n")
SLANG_RAW("public property float gl_CurrentRayTimeNV\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, raytracing_motionblur_anyhit_closesthit_intersection_miss)]\n")
SLANG_RAW("    get\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_CurrentRayTimeNV)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpCapability RayTracingMotionBlurNV;\n")
SLANG_RAW("                OpExtension \"SPV_NV_ray_tracing_motion_blur\";\n")
SLANG_RAW("                result:$$float = OpLoad builtin(CurrentRayTimeNV:float);\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing) \n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, raytracing_motionblur_raygen_closesthit_miss)]\n")
SLANG_RAW("public void traceRayMotionNV(\n")
SLANG_RAW("    accelerationStructureEXT topLevel,\n")
SLANG_RAW("    uint rayFlags,\n")
SLANG_RAW("    uint cullMask,\n")
SLANG_RAW("    uint sbtRecordOffset,\n")
SLANG_RAW("    uint sbtRecordStride,\n")
SLANG_RAW("    uint missIndex,\n")
SLANG_RAW("    vec3 origin,\n")
SLANG_RAW("    float Tmin,\n")
SLANG_RAW("    vec3 direction,\n")
SLANG_RAW("    float Tmax,\n")
SLANG_RAW("    float currentTime,\n")
SLANG_RAW("    constexpr int payload)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch \n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __traceMotionRay(\n")
SLANG_RAW("            topLevel,\n")
SLANG_RAW("            rayFlags,\n")
SLANG_RAW("            cullMask,\n")
SLANG_RAW("            sbtRecordOffset,\n")
SLANG_RAW("            sbtRecordStride,\n")
SLANG_RAW("            missIndex,\n")
SLANG_RAW("            origin,\n")
SLANG_RAW("            Tmin,\n")
SLANG_RAW("            direction,\n")
SLANG_RAW("            Tmax,\n")
SLANG_RAW("            currentTime,\n")
SLANG_RAW("            payload);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm \n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability RayTracingMotionBlurNV;\n")
SLANG_RAW("            OpExtension \"SPV_NV_ray_tracing_motion_blur\";\n")
SLANG_RAW("            OpTraceRayMotionNV\n")
SLANG_RAW("                /**/ $topLevel\n")
SLANG_RAW("                /**/ $rayFlags\n")
SLANG_RAW("                /**/ $cullMask\n")
SLANG_RAW("                /**/ $sbtRecordOffset\n")
SLANG_RAW("                /**/ $sbtRecordStride\n")
SLANG_RAW("                /**/ $missIndex\n")
SLANG_RAW("                /**/ $origin\n")
SLANG_RAW("                /**/ $Tmin\n")
SLANG_RAW("                /**/ $direction\n")
SLANG_RAW("                /**/ $Tmax\n")
SLANG_RAW("                /**/ $currentTime\n")
SLANG_RAW("                /**/ __rayPayloadFromLocation(payload)\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_basic Built-in Variables\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv_wgsl, subgroup_basic)]\n")
SLANG_RAW("void requireGLSLExtForSubgroupBasicBuiltin() {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __requireTargetExtension(\"GL_KHR_shader_subgroup_basic\");\n")
SLANG_RAW("        __intrinsic_asm \"\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_basic)]\n")
SLANG_RAW("void setupExtForSubgroupBasicBuiltIn() {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        requireGLSLExtForSubgroupBasicBuiltin();\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("void requireGLSLExtForSubgroupBallotBuiltin() {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __requireTargetExtension(\"GL_KHR_shader_subgroup_ballot\");\n")
SLANG_RAW("        __intrinsic_asm \"\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("void setupExtForSubgroupBallotBuiltIn() {\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        requireGLSLExtForSubgroupBallotBuiltin();\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_NumSubgroups {\n")
SLANG_RAW("    \n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_NumSubgroups)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                    OpCapability GroupNonUniform;\n")
SLANG_RAW("                    result:$$uint = OpLoad builtin(NumSubgroups:uint);\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_SubgroupID\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupID)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniform;\n")
SLANG_RAW("                        result:$$uint = OpLoad builtin(SubgroupId:uint);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_SubgroupSize\n")
SLANG_RAW("{\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    [require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_basic)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        return WaveGetLaneCount();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uint gl_SubgroupInvocationID\n")
SLANG_RAW("{\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    [require(cpp_cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_basic)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        return WaveGetLaneIndex();\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uvec4 gl_SubgroupEqMask\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic_ballot)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        setupExtForSubgroupBallotBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupEqMask)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniformBallot;\n")
SLANG_RAW("                        result:$$uvec4 = OpLoad builtin(SubgroupEqMask:uvec4);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uvec4 gl_SubgroupGeMask\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic_ballot)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        setupExtForSubgroupBallotBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupGeMask)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniformBallot;\n")
SLANG_RAW("                        result:$$uvec4 = OpLoad builtin(SubgroupGeMask:uvec4);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uvec4 gl_SubgroupGtMask\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic_ballot)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        setupExtForSubgroupBallotBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupGtMask)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniformBallot;\n")
SLANG_RAW("                        result:$$uvec4 = OpLoad builtin(SubgroupGtMask:uvec4);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uvec4 gl_SubgroupLeMask\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic_ballot)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        setupExtForSubgroupBallotBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupLeMask)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniformBallot;\n")
SLANG_RAW("                        result:$$uvec4 = OpLoad builtin(SubgroupLeMask:uvec4);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("public property uvec4 gl_SubgroupLtMask\n")
SLANG_RAW("{\n")
SLANG_RAW("    [require(glsl_spirv, subgroup_basic_ballot)]\n")
SLANG_RAW("    get {\n")
SLANG_RAW("        setupExtForSubgroupBasicBuiltIn();\n")
SLANG_RAW("        setupExtForSubgroupBallotBuiltIn();\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"(gl_SubgroupLtMask)\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                        OpCapability GroupNonUniformBallot;\n")
SLANG_RAW("                        result:$$uvec4 = OpLoad builtin(SubgroupLtMask:uvec4);\n")
SLANG_RAW("                    };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_basic\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv, subgroup_basic)]\n")
SLANG_RAW("public void subgroupBarrier()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"__syncwarp()\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        __intrinsic_asm \"AllMemoryBarrierWithGroupSync()\";\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBarrier()\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simdgroup_barrier(mem_flags::mem_none)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpControlBarrier Subgroup Subgroup AcquireRelease|SubgroupMemory|ImageMemory|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv, subgroup_basic)]\n")
SLANG_RAW("public void subgroupMemoryBarrier()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"__threadfence_block()\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        __intrinsic_asm \"AllMemoryBarrier()\";\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupMemoryBarrier()\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simdgroup_barrier(mem_flags::mem_device)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Subgroup AcquireRelease|SubgroupMemory|ImageMemory|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv, subgroup_basic)]\n")
SLANG_RAW("public void subgroupMemoryBarrierBuffer()\n")
SLANG_RAW("{\n")
SLANG_RAW("    // the following implementation is NOT the same as DeviceMemoryBarrier\n")
SLANG_RAW("    // HLSL lacks the same granularity of blocking on subgroup memory within a subgroup\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"__threadfence_block()\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        __intrinsic_asm \"DeviceMemoryBarrier()\";\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupMemoryBarrierBuffer()\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simdgroup_barrier(mem_flags::mem_device)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Subgroup AcquireRelease|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv, subgroup_basic)]\n")
SLANG_RAW("public void subgroupMemoryBarrierImage()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"__threadfence_block()\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        __intrinsic_asm \"DeviceMemoryBarrier()\";\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupMemoryBarrierImage()\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simdgroup_barrier(mem_flags::mem_texture)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            OpMemoryBarrier Subgroup AcquireRelease|ImageMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv, subgroup_basic)]\n")
SLANG_RAW("public void subgroupMemoryBarrierShared()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"__threadfence_block()\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        __intrinsic_asm \"GroupMemoryBarrier()\";\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupMemoryBarrierShared()\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simdgroup_barrier(mem_flags::mem_threadgroup)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        spirv_asm {\n")
SLANG_RAW("            // SubgroupMemory triggers vulkan validation layer error; \n")
SLANG_RAW("            // WorkgroupMemory is the next level of granularity \n")
SLANG_RAW("            OpMemoryBarrier Subgroup AcquireRelease|WorkgroupMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic) \n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_basic)]\n")
SLANG_RAW("public bool subgroupElect()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"( (__activemask() & (__activemask()*-1)) == _getLaneId())\";    \n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return WaveIsFirstLane();\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_vote\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_vote)]\n")
SLANG_RAW("public bool subgroupAll(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveAllTrue(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_vote)]\n")
SLANG_RAW("public bool subgroupAny(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveAnyTrue(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_spirv, subgroup_vote)]\n")
SLANG_RAW("public bool subgroupAllEqual(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveAllEqual(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_spirv, subgroup_vote)]\n")
SLANG_RAW("public bool subgroupAllEqual(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveAllEqual(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_arithmetic\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupAdd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveSum(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupMul(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveProduct(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupMin(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveMin(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupMax(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveMax(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupAnd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupAnd($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_and\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalAnd $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseAnd $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupOr(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupOr($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_or\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalOr $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseOr $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupXor(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupXor($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_xor\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalXor $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseXor $$T result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveAdd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveAdd($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_prefix_inclusive_sum\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFAdd $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformIAdd $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveMul(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMul($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_prefix_inclusive_product\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMul $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformIMul $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveMin(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMin($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMin $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMin $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMin $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveMax(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMax($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMax $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMax $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMax $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveAnd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupInclusiveAnd($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalAnd $$T result Subgroup InclusiveScan $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseAnd $$T result Subgroup InclusiveScan $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveOr(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupInclusiveOr($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalOr $$T result Subgroup InclusiveScan $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseOr $$T result Subgroup InclusiveScan $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupInclusiveXor(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveXor($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalXor $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseXor $$T result Subgroup InclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return T(0);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveAdd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WavePrefixSum(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveMul(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WavePrefixProduct(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveMin(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupExclusiveMin($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMin $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMin $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMin $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveMax(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupExclusiveMax($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMax $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMax $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMax $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveAnd(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveAnd($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalAnd $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseAnd $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveOr(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveOr($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalOr $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseOr $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public T subgroupExclusiveXor(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveXor($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalXor $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseXor $$T result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_arithmetic\n")
SLANG_RAW("//note: this is a seperate section because it is so huge that the only reasonable way to implement this is to just regex replace code\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupAdd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveSum(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupMul(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveProduct(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupMin(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveMin(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupMax(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveActiveMax(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupAnd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        // TODO: Bool inputs are invalid for Metal and WGSL, cast them to int or don't allow them to compile.\n")
SLANG_RAW("        __intrinsic_asm \"subgroupAnd($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_and\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalAnd $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseAnd $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupOr(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupOr($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_or\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalOr $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseOr $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupXor(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupXor($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_xor\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformLogicalXor $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else {\n")
SLANG_RAW("            return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformArithmetic;\n")
SLANG_RAW("                OpGroupNonUniformBitwiseXor $$vector<T,N> result Subgroup 0 $value\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveAdd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveAdd($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_prefix_inclusive_sum\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFAdd $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformIAdd $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveMul(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMul($0)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_prefix_inclusive_product\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMul $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformIMul $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveMin(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMin($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMin $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMin $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMin $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveMax(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveMax($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMax $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMax $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMax $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveAnd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveAnd($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalAnd $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseAnd $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveOr(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveOr($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalOr $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseOr $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupInclusiveXor(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInclusiveXor($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalXor $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseXor $$vector<T,N> result Subgroup InclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveAdd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WavePrefixSum(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveMul(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WavePrefixProduct(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveMin(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupExclusiveMin($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMin $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMin $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMin $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveMax(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupExclusiveMax($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformFMax $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformSMax $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformUMax $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveAnd(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveAnd($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalAnd $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseAnd $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveOr(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveOr($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalOr $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseOr $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_arithmetic)]\n")
SLANG_RAW("public vector<T,N> subgroupExclusiveXor(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"subgroupExclusiveXor($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformLogicalXor $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpGroupNonUniformBitwiseXor $$vector<T,N> result Subgroup ExclusiveScan $value};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_ballot\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("public T subgroupBroadcast(T value, uint id)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        // WGSL's intrinsic does not accept non-const ids, do shuffle instead.\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffle\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return WaveBroadcastLaneAt(value, id);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("public vector<T,N> subgroupBroadcast(vector<T,N> value, uint id)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        // WGSL's intrinsic does not accept non-const ids, do shuffle instead.\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffle\";\n")
SLANG_RAW("    default:\n")
SLANG_RAW("        return WaveBroadcastLaneAt(value, id);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("public T subgroupBroadcastFirst(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveReadLaneFirst(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("public vector<T,N> subgroupBroadcastFirst(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveReadLaneFirst(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// WaveMaskBallot is not the same; it force trunc's\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_ballot)]\n")
SLANG_RAW("public uvec4 subgroupBallot(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveBallot(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// logic for HLSL and CUDA which lack InverseBalloc\n")
SLANG_RAW("// CUDA: works exclusivly 32 waves, therefore only need comp x\n")
SLANG_RAW("// HLSL:{\n")
SLANG_RAW("// 1. index into comp I want: index = trunc(float(lane)*(1/32))\n")
SLANG_RAW("// 2. lane & value[index]\n")
SLANG_RAW("// note: 1/32 wil be converted to multiplication\n")
SLANG_RAW("// we do 1/32 since 1 uint stores 32 threads \n")
SLANG_RAW("// note 2: we have a waveLaneCount check because based on wave lane count we can determine if we can do a \n")
SLANG_RAW("// fast path or slow path (know index is 0 or non 0)\n")
SLANG_RAW("// }\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public bool subgroupInverseBallot(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        // only has 32 warps\n")
SLANG_RAW("        __intrinsic_asm \"(($0).x >> (_getLaneId()) & 1)\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        // much like _WaveCountBits, but here we hope that we hit case 0; we can then avoid the expensive logic\n")
SLANG_RAW("        const uint waveLaneCount = WaveGetLaneCount();\n")
SLANG_RAW("        switch ((waveLaneCount - 1) / 32)\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case 0:\n")
SLANG_RAW("            __intrinsic_asm \"(($0)[0] >> WaveGetLaneIndex()) & 1)\";\n")
SLANG_RAW("        case 1:\n")
SLANG_RAW("        case 2:\n")
SLANG_RAW("        case 3:\n")
SLANG_RAW("            __intrinsic_asm \"((($0)[uint(float(WaveGetLaneIndex())*0.03125f)] >> WaveGetLaneIndex()) & 1)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupInverseBallot($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("                OpGroupNonUniformInverseBallot $$bool result Subgroup $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return false;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// same logic as subgroupInverseBallot\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public bool subgroupBallotBitExtract(uvec4 value, uint index)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case cuda:\n")
SLANG_RAW("        __intrinsic_asm \"($1 & ($0).x) != 0\";\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("        const uint waveLaneCount = WaveGetLaneCount();\n")
SLANG_RAW("        switch ((waveLaneCount - 1) / 32)\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case 0:\n")
SLANG_RAW("            __intrinsic_asm \"($0)[0] & ($1)\";\n")
SLANG_RAW("        case 1:\n")
SLANG_RAW("        case 2:\n")
SLANG_RAW("        case 3:\n")
SLANG_RAW("            __intrinsic_asm \"($0)[uint(float($1)*0.03125f)] & ($1)\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotBitExtract($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("                OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("                OpGroupNonUniformBallotBitExtract $$bool result Subgroup $value $index\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return false;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// the count is only supposed to use uvec4 values within bottom bits of subgroup launched, not a simple countbits\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public uint subgroupBallotBitCount(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotBitCount($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformBallotBitCount $$uint result Subgroup Reduce $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public uint subgroupBallotInclusiveBitCount(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotInclusiveBitCount($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformBallotBitCount $$uint result Subgroup InclusiveScan $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public uint subgroupBallotExclusiveBitCount(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotExclusiveBitCount($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformBallotBitCount $$uint result Subgroup ExclusiveScan $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public uint subgroupBallotFindLSB(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotFindLSB($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformBallotFindLSB $$uint result Subgroup $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_ballot)]\n")
SLANG_RAW("public uint subgroupBallotFindMSB(uvec4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupBallotFindMSB($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformBallotFindMSB $$uint result Subgroup $value\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_shuffle\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_shuffle)]\n")
SLANG_RAW("public T subgroupShuffle(T value, uint index)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveShuffle(value, index);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shuffle)]\n")
SLANG_RAW("[ForceInline] public T subgroupShuffleXor(T value, uint mask)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleXor($0,$1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_xor($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformShuffleXor $$T result Subgroup $value $mask\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(cuda_glsl_hlsl_metal_spirv_wgsl, subgroup_shuffle)]\n")
SLANG_RAW("public vector<T,N> subgroupShuffle(vector<T,N> value, uint index)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return WaveShuffle(value, index);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shuffle)]\n")
SLANG_RAW("public vector<T,N> subgroupShuffleXor(vector<T,N> value, uint mask)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleXor($0,$1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_xor($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformBallot; \n")
SLANG_RAW("            OpGroupNonUniformShuffleXor $$vector<T,N> result Subgroup $value $mask\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_shuffle_relative\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle_relative)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shufflerelative)]\n")
SLANG_RAW("public T subgroupShuffleUp(T value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleUp($0, $1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_up($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformShuffleRelative;\n")
SLANG_RAW("            OpGroupNonUniformShuffleUp $$T result Subgroup $value $delta\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle_relative)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shufflerelative)]\n")
SLANG_RAW("public T subgroupShuffleDown(T value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleDown($0, $1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_down($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformShuffleRelative; \n")
SLANG_RAW("            OpGroupNonUniformShuffleDown $$T result Subgroup $value $delta\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle_relative)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shufflerelative)]\n")
SLANG_RAW("public vector<T,N> subgroupShuffleUp(vector<T,N> value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleUp($0, $1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_up($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformShuffleRelative;\n")
SLANG_RAW("            OpGroupNonUniformShuffleUp $$vector<T,N> result Subgroup $value $delta\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle_relative)\n")
SLANG_RAW("__wgsl_extension(subgroups)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_metal_spirv_wgsl, subgroup_shufflerelative)]\n")
SLANG_RAW("public vector<T,N> subgroupShuffleDown(vector<T,N> value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    case wgsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupShuffleDown($0, $1)\";\n")
SLANG_RAW("    case metal:\n")
SLANG_RAW("        __intrinsic_asm \"simd_shuffle_down($0, ushort($1))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability GroupNonUniformShuffleRelative;\n")
SLANG_RAW("            OpGroupNonUniformShuffleDown $$vector<T,N> result Subgroup $value $delta\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("// GL_KHR_shader_subgroup_clustered\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredAdd(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredAdd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFAdd $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformIAdd $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredMul(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMul($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMul $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformIMul $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    } \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredMin(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMin($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMin $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformSMin $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformUMin $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredMax(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMax($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMax $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformSMax $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered;  OpGroupNonUniformUMax $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredAnd(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredAnd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalAnd $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseAnd $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredOr(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredOr($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalOr $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseOr $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public T subgroupClusteredXor(T value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredXor($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalXor $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseXor $$T result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredAdd(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredAdd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; \n")
SLANG_RAW("            OpGroupNonUniformFAdd $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformIAdd $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredMul(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMul($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMul $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformIMul $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    } \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredMin(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMin($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMin $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformSMin $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformUMin $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredMax(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredMax($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isFloat<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformFMax $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isSignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformSMax $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else if (__isUnsignedInt<T>())\n")
SLANG_RAW("            return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered;  OpGroupNonUniformUMax $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return value;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredAnd(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredAnd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalAnd $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseAnd $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredOr(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredOr($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalOr $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseOr $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_clustered)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, subgroup_clustered)]\n")
SLANG_RAW("public vector<T,N> subgroupClusteredXor(vector<T,N> value, uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"subgroupClusteredXor($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        if (__isBool<T>()) return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformLogicalXor $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("        else return spirv_asm {OpCapability GroupNonUniformArithmetic; OpCapability GroupNonUniformClustered; OpGroupNonUniformBitwiseXor $$vector<T,N> result Subgroup ClusteredReduce $value $clusterSize};\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_quad\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, subgroup_quad)]\n")
SLANG_RAW("public T subgroupQuadBroadcast(T value, uint id)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadLaneAt(value, id);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public T subgroupQuadSwapHorizontal(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossX(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public T subgroupQuadSwapVertical(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossY(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public T subgroupQuadSwapDiagonal(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossDiagonal(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, subgroup_quad)]\n")
SLANG_RAW("public vector<T,N> subgroupQuadBroadcast(vector<T,N> value, uint id)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadLaneAt(value, id);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public vector<T,N> subgroupQuadSwapHorizontal(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossX(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public vector<T,N> subgroupQuadSwapVertical(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossY(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_quad)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_metal_spirv_wgsl, subgroup_quad)]\n")
SLANG_RAW("public vector<T,N> subgroupQuadSwapDiagonal(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    shader_subgroup_preamble<T>();\n")
SLANG_RAW("    return QuadReadAcrossDiagonal(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// GL_KHR_shader_subgroup_rotate\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[require(glsl_metal_spirv, subgroup_rotate)]\n")
SLANG_RAW("public T subgroupRotate(T value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveRotate(value, delta);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("[require(glsl_metal_spirv, subgroup_rotate)]\n")
SLANG_RAW("public vector<T, N> subgroupRotate(vector<T, N> value, uint delta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveRotate(value, delta);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[require(glsl_spirv, subgroup_rotate)]\n")
SLANG_RAW("public T subgroupClusteredRotate(T value, uint delta, constexpr uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveClusteredRotate(value, delta, clusterSize);\n")
SLANG_RAW("\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("[require(glsl_spirv, subgroup_rotate)]\n")
SLANG_RAW("public vector<T, N> subgroupClusteredRotate(vector<T, N> value, uint delta, constexpr uint clusterSize)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveClusteredRotate(value, delta, clusterSize);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//// GLSL atomic\n")
SLANG_RAW("\n")
SLANG_RAW("// The following type internally is a Shader Storage Buffer \n")
SLANG_RAW("// as per GL_EXT_vulkan_glsl_relaxed\n")
SLANG_RAW("__magic_type(GLSLAtomicUintType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_GLSLAtomicUintType
)
SLANG_RAW(")\n")
SLANG_RAW("public struct atomic_uint\n")
SLANG_RAW("{\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// tier of float refers to atomic extension support of float1 or float2.\n")
SLANG_RAW("// if we are inside a atomic_float function we will run the check for float1 tier\n")
SLANG_RAW("// types and operations to enable the according ext needed for these operations\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_float0_tier() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, uint64_t>() || __type_equals<T, int64_t>())\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_int64\");\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return; \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_float1_tier() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, float>()) \n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float\");\n")
SLANG_RAW("        else if (__type_equals<T, half>() || __type_equals<T, float16_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float2\");\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_explicit_arithmetic_types\");\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, double>()) \n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float\");\n")
SLANG_RAW("        else if (__type_equals<T, uint64_t>() || __type_equals<T, int64_t>())\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_int64\");\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_float2_tier() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {    \n")
SLANG_RAW("        if (__type_equals<T, float>()) \n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float2\");\n")
SLANG_RAW("        else if (__type_equals<T, half>() || __type_equals<T, float16_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float2\");\n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_explicit_arithmetic_types\");\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, double>()) \n")
SLANG_RAW("            __requireTargetExtension(\"GL_EXT_shader_atomic_float2\");\n")
SLANG_RAW("        else if (__type_equals<T, uint64_t>() || __type_equals<T, int64_t>())\n")
SLANG_RAW("             __requireTargetExtension(\"GL_EXT_shader_atomic_int64\");\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv: \n")
SLANG_RAW("        return; \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_add()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat32AddEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, half>() \n")
SLANG_RAW("            || __type_equals<T, float16_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat16AddEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, double>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat64AddEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, uint64_t>()\n")
SLANG_RAW("            || __type_equals<T, int64_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpCapability Int64Atomics\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }    \n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_MinMax()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, float>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat32MinMaxEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, half>() \n")
SLANG_RAW("            || __type_equals<T, float16_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat16MinMaxEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, double>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                OpExtension \"SPV_EXT_shader_atomic_float_add\"; \n")
SLANG_RAW("                OpCapability AtomicFloat64MinMaxEXT\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("        else if (__type_equals<T, uint64_t>()\n")
SLANG_RAW("            || __type_equals<T, int64_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            { \n")
SLANG_RAW("                OpCapability Int64Atomics\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("void typeRequireChecks_atomic_using_Logical_CAS() \n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        return;\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        if (__type_equals<T, uint64_t>()\n")
SLANG_RAW("            || __type_equals<T, int64_t>())\n")
SLANG_RAW("        {\n")
SLANG_RAW("            spirv_asm\n")
SLANG_RAW("            { \n")
SLANG_RAW("                OpCapability Int64Atomics\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

static const struct {
    const char* name;
    const char* classType;
    const char *subclassType;
    const char *suffix;
    const bool isFloat;
} atomics[] =
    {
        { 
            "uint", "I", "U", "", false
        },
        { 
            "uint64_t", "I", "U", "", false
        },
        { 
            "int", "I", "S", "", false
        },
        { 
            "int64_t", "I", "S", "", false
        },
        { 
            "float16_t", "F", "F", "EXT", true
        },
        { 
            "float", "F", "F", "EXT", true
        },
        { 
            "double", "F", "F", "EXT", true
        },
    };
for (const auto& item : atomics) 
{
SLANG_RAW("#line 8400 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicAdd
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicAddWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicAdd(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float1_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_add<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicAddWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicMin
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicMinWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicMin(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float2_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_MinMax<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicMinWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicMax
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicMaxWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicMax(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float2_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_MinMax<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicMaxWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicExchange
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicExchangeWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicExchange(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float1_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicExchangeWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

if(item.isFloat) 
    continue;
SLANG_RAW("#line 8469 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicAnd
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicAndWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicAnd(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float0_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_Logical_CAS<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicAndWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicOr
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicOrWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicOr(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float0_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_Logical_CAS<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicOrWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicXor
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicXorWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder order);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicXor(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float0_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_Logical_CAS<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicXorWithOrder(mem, data, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_AtomicCompareExchange
)
SLANG_RAW(")\n")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicCompSwapWithOrder(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" compare, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data, MemoryOrder successOrder, MemoryOrder failOrder);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" atomicCompSwap(inout ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" mem, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" compare, ")
SLANG_SPLICE(item.name
)
SLANG_RAW(" data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    typeRequireChecks_atomic_using_float0_tier<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    typeRequireChecks_atomic_using_Logical_CAS<")
SLANG_SPLICE(item.name
)
SLANG_RAW(">();\n")
SLANG_RAW("    return atomicCompSwapWithOrder(mem, compare, data, MemoryOrder::Relaxed, MemoryOrder::Relaxed);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

}
SLANG_RAW("#line 8539 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// all atomic_uint functions are mangled at compile time, \n")
SLANG_RAW("// all types are converted into a field address of a 'uint'\n")
SLANG_RAW("// relative to the layout(offset) of the atomic_uint \n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterIncrement(atomic_uint c)\n")
SLANG_RAW("{\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicAdd($0, 1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicIIncrement $$uint result $c Device UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430) \n")
SLANG_RAW("[require(glsl, atomic_glsl)]\n")
SLANG_RAW("[ForceInline] public uint atomicCounterDecrement_GLSL_helper(atomic_uint c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __intrinsic_asm \"atomicExchange($0,$0-1)\";\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounter(atomic_uint c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __intrinsic_asm \"($0)\";\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpLoad $$uint result $c \n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterDecrement(atomic_uint c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        atomicCounterDecrement_GLSL_helper(c);\n")
SLANG_RAW("        return atomicCounter(c);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        // spirv OpAtomicIDecrement returns pre-sub-1, glsl returns the new value\n")
SLANG_RAW("        // we want a discarded side effect and then return the new value\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            %discardedValue:$$uint = OpAtomicIDecrement $c Device UniformMemory;\n")
SLANG_RAW("            OpLoad $$uint result $c\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }   \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterAdd(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicAdd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicIAdd $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterSubtract(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __intrinsic_asm \"atomicExchange($0,$0-$1)\";\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicISub $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }   \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterMin(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicMin($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicUMin $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterMax(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicMax($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicUMax $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterAnd(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicAnd($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicAnd $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }   \n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterOr(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicOr($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicOr $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterXor(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicXor($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicXor $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterExchange(atomic_uint c, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicExchange($0, $1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicExchange $$uint result $c Device UniformMemory $data\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_spirv, atomic_glsl)]\n")
SLANG_RAW("public uint atomicCounterCompSwap(atomic_uint c, uint compare, uint data)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"atomicCompSwap($0, $1, $2)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpAtomicCompareExchange $$uint result $c Device UniformMemory UniformMemory $data $compare\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.14. Fragment Processing Functions\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public float dFdx(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public vector<float, N> dFdx(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public float dFdy(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public vector<float, N> dFdy(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float dFdxFine(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx_fine(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> dFdxFine(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx_fine(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float dFdyFine(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy_fine(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> dFdyFine(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy_fine(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float dFdxCoarse(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx_coarse(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> dFdxCoarse(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddx_coarse(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float dFdyCoarse(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy_coarse(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> dFdyCoarse(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return ddy_coarse(p);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float fwidthFine(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return abs(ddx_fine(p)) + abs(ddy_fine(p));\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"fwidthFine($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability DerivativeControl;\n")
SLANG_RAW("            OpFwidthFine $$float result $p;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> fwidthFine(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return abs(ddx_fine(p)) + abs(ddy_fine(p));\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"fwidthFine($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability DerivativeControl;\n")
SLANG_RAW("            OpFwidthFine $$vector<float, N> result $p;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public float fwidthCoarse(float p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return abs(ddx_coarse(p)) + abs(ddy_coarse(p));\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"fwidthCoarse($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability DerivativeControl;\n")
SLANG_RAW("            OpFwidthCoarse $$float result $p;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, fragmentprocessing_derivativecontrol)]\n")
SLANG_RAW("public vector<float, N> fwidthCoarse(vector<float, N> p)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __requireComputeDerivative();\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return abs(ddx_coarse(p)) + abs(ddy_coarse(p));\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"fwidthCoarse($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability DerivativeControl;\n")
SLANG_RAW("            OpFwidthCoarse $$vector<float, N> result $p;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public float interpolateAtCentroid(__constref float interpolant)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtCentroid($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$float result glsl450 InterpolateAtCentroid &interpolant\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public vector<float, N> interpolateAtCentroid(__constref vector<float, N> interpolant)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtCentroid($0)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$vector<float, N> result glsl450 InterpolateAtCentroid &interpolant\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public float interpolateAtSample(__constref float interpolant, int sample)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtSample($0,$1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$float result glsl450 InterpolateAtSample &interpolant $sample\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public vector<float, N> interpolateAtSample(__constref vector<float, N> interpolant, int sample)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtSample($0,$1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$vector<float, N> result glsl450 InterpolateAtSample &interpolant $sample\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public float interpolateAtOffset(__constref float interpolant, vec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtOffset($0,$1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$float result glsl450 InterpolateAtOffset &interpolant $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[__GLSLRequireShaderInputParameter(0)]\n")
SLANG_RAW("[require(glsl_spirv, fragmentprocessing)]\n")
SLANG_RAW("public vector<float, N> interpolateAtOffset(__constref vector<float, N> interpolant, vec2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"interpolateAtOffset($0,$1)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability InterpolationFunction;\n")
SLANG_RAW("            OpExtInst $$vector<float, N> result glsl450 InterpolateAtOffset &interpolant $offset\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.15. Noise Functions (deprecated)\n")
SLANG_RAW("\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public float noise1(float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return 0.0f;\n")
SLANG_RAW("}\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public float noise1(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return 0.0f;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec2 noise2(float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec2(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec2 noise2(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec2(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec3 noise3(float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec3(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec3 noise3(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec3(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec4 noise4(float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec4(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("[deprecated(\"Always returns 0\")]\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__NoSideEffect]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public vec4 noise4(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vec4(0.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.16. Shader Invocation Control Functions\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: for tessellation control shader: barrier() function may only\n")
SLANG_RAW("// be placed inside the main() of the shader and may not be called within\n")
SLANG_RAW("// control flow.\n")
SLANG_RAW("// TODO: if called after a return, error.\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, memorybarrier)]\n")
SLANG_RAW("public void barrier()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        GroupMemoryBarrier();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"barrier()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpControlBarrier Workgroup Workgroup AcquireRelease|WorkgroupMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.17. Shader Memory Control Functions\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol)]\n")
SLANG_RAW("public void memoryBarrier()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"AllMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"memoryBarrier()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Device AcquireRelease|WorkgroupMemory|ImageMemory|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Does not exist in vulkan. The equivlent is now `memoryBarrierBuffer`\n")
SLANG_RAW("// for vulkan since GL_EXT_vulkan_glsl_relaxed states that a atomic_counter\n")
SLANG_RAW("// is a storage buffer object in implementation.\n")
SLANG_RAW("\n")
SLANG_RAW("// glslang will compile with `AtomicCounterMemory` since it does not use\n")
SLANG_RAW("// the `AtomicStorage` OpCapability which is required for `AtomicCounterMemory`.\n")
SLANG_RAW("// this is invalid/undefined spir-v for vulkan targets and should not be followed\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol_compute)]\n")
SLANG_RAW("public void memoryBarrierAtomicCounter()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"AllMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"memoryBarrierBuffer()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Device AcquireRelease|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol)]\n")
SLANG_RAW("public void memoryBarrierBuffer()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"DeviceMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"memoryBarrierBuffer()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Device AcquireRelease|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol_compute)]\n")
SLANG_RAW("public void memoryBarrierShared()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"GroupMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"memoryBarrierShared()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpCapability Shader;\n")
SLANG_RAW("            OpMemoryBarrier Device AcquireRelease|WorkgroupMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol)]\n")
SLANG_RAW("public void memoryBarrierImage()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"DeviceMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"memoryBarrierImage()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpMemoryBarrier Device AcquireRelease|ImageMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shadermemorycontrol_compute)]\n")
SLANG_RAW("public void groupMemoryBarrier()\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case hlsl: __intrinsic_asm \"GroupMemoryBarrier()\";\n")
SLANG_RAW("    case glsl: __intrinsic_asm \"groupMemoryBarrier()\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("    {\n")
SLANG_RAW("        spirv_asm\n")
SLANG_RAW("        {\n")
SLANG_RAW("            OpMemoryBarrier Workgroup AcquireRelease|WorkgroupMemory|ImageMemory|UniformMemory\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.18. Subpass-Input Functions\n")
SLANG_RAW("\n")

struct SubpassLoadEntriesType
{
    const char* typeName;
    const char* prefix;
};
static const SubpassLoadEntriesType kSubpassLoadEntries[] =
    {
        { "vec4", "" },
        { "uvec4", "u" },
        { "ivec4", "i" },
    };
for (const auto& subpassLoadEntry : kSubpassLoadEntries)
{
SLANG_RAW("#line 9334 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("    [require(glsl_spirv, subpass)]\n")
SLANG_RAW("    public typealias ")
SLANG_SPLICE(subpassLoadEntry.prefix
)
SLANG_RAW("subpassInput = __SubpassImpl<\n")
SLANG_RAW("        ")
SLANG_SPLICE(subpassLoadEntry.typeName
)
SLANG_RAW(",\n")
SLANG_RAW("        0 // isMS\n")
SLANG_RAW("    >;\n")
SLANG_RAW("\n")
SLANG_RAW("    [require(glsl_spirv, subpass)]\n")
SLANG_RAW("    public typealias ")
SLANG_SPLICE(subpassLoadEntry.prefix
)
SLANG_RAW("subpassInputMS = __SubpassImpl<\n")
SLANG_RAW("        ")
SLANG_SPLICE(subpassLoadEntry.typeName
)
SLANG_RAW(",\n")
SLANG_RAW("        1 // isMS\n")
SLANG_RAW("    >;\n")

}
SLANG_RAW("#line 9348 \"glsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T>\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, subpass)]\n")
SLANG_RAW("    public T subpassLoad(__SubpassImpl<T,0> subpass)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return subpass.SubpassLoad();\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __generic<T>\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    [require(glsl_hlsl_spirv, subpass)]\n")
SLANG_RAW("    public T subpassLoad(__SubpassImpl<T,1> subpass, int sample)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return subpass.SubpassLoad(sample);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("/// Section 8.19. Shader Invocation Group Functions\n")
SLANG_RAW("\n")
SLANG_RAW("// Invocation functions compiles into SubgroupVoteKHR operations.\n")
SLANG_RAW("// Instead of using these, we directly emit the non deprecated\n")
SLANG_RAW("// alternatives\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("[NonUniformReturn]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shaderinvocationgroup)]\n")
SLANG_RAW("public bool anyInvocation(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveAnyTrue(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("[NonUniformReturn]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shaderinvocationgroup)]\n")
SLANG_RAW("public bool allInvocations(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveAllTrue(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("[NonUniformReturn]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[require(glsl_hlsl_spirv, shaderinvocationgroup)]\n")
SLANG_RAW("public bool allInvocationsEqual(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveActiveAllEqual(value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("/// extensions\n")
SLANG_RAW("/// https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GL_EXT_nonuniform_qualifier.txt\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:__BuiltinArithmeticType>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_NonUniformResourceIndex
)
SLANG_RAW(")\n")
SLANG_RAW("[require(cpp_cuda_glsl_hlsl_spirv, nonuniformqualifier)]\n")
SLANG_RAW("public T nonuniformEXT(T index);\n")
SLANG_RAW("\n")
SLANG_RAW("/// Debug output printing\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("public void debugPrintfEXT<each T>(NativeString format, expand each T args)\n")
SLANG_RAW("{\n")
SLANG_RAW("    printf(format, args);\n")
SLANG_RAW("}\n")
