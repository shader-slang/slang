SLANG_RAW("// Slang HLSL compatibility library\n")
SLANG_RAW("\n")
SLANG_RAW("typedef uint UINT;\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLAppendStructuredBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLAppendStructuredBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct AppendStructuredBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    void Append(T value);\n")
SLANG_RAW("\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint numStructs,\n")
SLANG_RAW("        out uint stride);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(HLSLByteAddressBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLByteAddressBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct ByteAddressBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$1 = $0._data.length() * 4\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint dim);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4]\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint Load(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint Load(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec2($0._data[$1/4], $0._data[$1/4+1])\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint2 Load2(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint2 Load2(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec3($0._data[$1/4], $0._data[$1/4+1], $0._data[$1/4+2])\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint3 Load3(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint3 Load3(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec4($0._data[$1/4], $0._data[$1/4+1], $0._data[$1/4+2], $0._data[$1/4+3])\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint4 Load4(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint4 Load4(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Load<T>(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<T>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// AtomicAdd\n")
SLANG_RAW("\n")
SLANG_RAW("// Make the GLSL atomicAdd available.\n")
SLANG_RAW("// We have separate int/float implementations, as the float version requires some specific extensions\n")
SLANG_RAW("// https://www.khronos.org/registry/OpenGL/extensions/NV/NV_shader_atomic_float.txt\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_float)\n")
SLANG_RAW("float __atomicAdd(__ref float value, float amount);\n")
SLANG_RAW("\n")
SLANG_RAW("// Helper for hlsl, using NVAPI\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedAddUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicAdd(RWByteAddressBuffer buf, uint offset, uint2);\n")
SLANG_RAW("\n")
SLANG_RAW("// atomic add for hlsl using SM6.6\n")
SLANG_RAW("__target_intrinsic(hlsl, \"$0.InterlockedAdd64($1, $2, $3)\")\n")
SLANG_RAW("void __atomicAdd(RWByteAddressBuffer buf, uint offset, int64_t value, out int64_t originalValue);\n")
SLANG_RAW("__target_intrinsic(hlsl, \"$0.InterlockedAdd64($1, $2, $3)\")\n")
SLANG_RAW("void __atomicAdd(RWByteAddressBuffer buf, uint offset, uint64_t value, out uint64_t originalValue);\n")
SLANG_RAW("\n")
SLANG_RAW("// Int versions require glsl 4.30\n")
SLANG_RAW("// https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/atomicAdd.xhtml\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("int __atomicAdd(__ref int value, int amount);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("uint __atomicAdd(__ref uint value, uint amount);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("int64_t __atomicAdd(__ref int64_t value, int64_t amount);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicAdd(__ref uint64_t value, uint64_t amount);\n")
SLANG_RAW("\n")
SLANG_RAW("// Cas - Compare and swap\n")
SLANG_RAW("\n")
SLANG_RAW("// Helper for HLSL, using NVAPI\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedCompareExchangeUint64($0, $1, $2, $3)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __cas(RWByteAddressBuffer buf, uint offset, uint2 compareValue, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("// CAS using SM6.6\n")
SLANG_RAW("__target_intrinsic(hlsl, \"$0.InterlockedCompareExchange64($1, $2, $3, $4)\")\n")
SLANG_RAW("void __cas(RWByteAddressBuffer buf, uint offset, in int64_t compare_value, in int64_t value, out int64_t original_value);\n")
SLANG_RAW("__target_intrinsic(hlsl, \"$0.InterlockedCompareExchange64($1, $2, $3, $4)\")\n")
SLANG_RAW("void __cas(RWByteAddressBuffer buf, uint offset, in uint64_t compare_value, in uint64_t value, out uint64_t original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicCompSwap($0, $1, $2)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __cas(__ref int64_t ioValue, int64_t compareValue, int64_t newValue);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicCompSwap($0, $1, $2)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __cas(__ref uint64_t ioValue, uint64_t compareValue, uint64_t newValue);\n")
SLANG_RAW("\n")
SLANG_RAW("// Max\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedMaxUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicMax(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicMax($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicMax(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Min\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedMinUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicMin(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicMin($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicMin(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// And\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedAndUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicAnd(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicAnd($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicAnd(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Or\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedOrUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicOr(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicOr($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicOr(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Xor\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedXorUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicXor(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicXor($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicXor(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Exchange\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvInterlockedExchangeUint64($0, $1, $2)\")\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("uint2 __atomicExchange(RWByteAddressBuffer buf, uint offset, uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"atomicExchange($0, $1)\")\n")
SLANG_RAW("__glsl_version(430)\n")
SLANG_RAW("__glsl_extension(GL_EXT_shader_atomic_int64)\n")
SLANG_RAW("uint64_t __atomicExchange(__ref uint64_t ioValue, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Conversion between uint64_t and uint2\n")
SLANG_RAW("\n")
SLANG_RAW("uint2 __asuint2(uint64_t i)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return uint2(uint(i), uint(uint64_t(i) >> 32));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("uint64_t __asuint64(uint2 i)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return (uint64_t(i.y) << 32) | i.x;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_ByteAddressBufferLoad
)
SLANG_RAW(")\n")
SLANG_RAW("T __byteAddressBufferLoad<T>(ByteAddressBuffer buffer, int offset);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_ByteAddressBufferLoad
)
SLANG_RAW(")\n")
SLANG_RAW("T __byteAddressBufferLoad<T>(RWByteAddressBuffer buffer, int offset);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_ByteAddressBufferLoad
)
SLANG_RAW(")\n")
SLANG_RAW("T __byteAddressBufferLoad<T>(RasterizerOrderedByteAddressBuffer buffer, int offset);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_ByteAddressBufferStore
)
SLANG_RAW(")\n")
SLANG_RAW("void __byteAddressBufferStore<T>(RWByteAddressBuffer buffer, int offset, T value);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_ByteAddressBufferStore
)
SLANG_RAW(")\n")
SLANG_RAW("void __byteAddressBufferStore<T>(RasterizerOrderedByteAddressBuffer buffer, int offset, T value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLStructuredBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLStructuredBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct StructuredBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$1 = $0._data.length(); $2 = 0\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint numStructs,\n")
SLANG_RAW("        out uint stride);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1]\")\n")
SLANG_RAW("    __target_intrinsic(spirv_direct, \"%addr = OpAccessChain resultType*StorageBuffer resultId _0 const(int, 0) _1; OpLoad resultType resultId %addr;\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Load(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Load(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint index) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_intrinsic(glsl, \"$0._data[$1]\")\n")
SLANG_RAW("        __target_intrinsic(spirv_direct, \"%addr = OpAccessChain resultType*StorageBuffer resultId _0 const(int, 0) _1; OpLoad resultType resultId %addr;\")\n")
SLANG_RAW("        [__readNone]\n")
SLANG_RAW("        get;\n")
SLANG_RAW("    };\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLConsumeStructuredBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLConsumeStructuredBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct ConsumeStructuredBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    T Consume();\n")
SLANG_RAW("\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint numStructs,\n")
SLANG_RAW("        out uint stride);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, let N : int>\n")
SLANG_RAW("__magic_type(HLSLInputPatchType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLInputPatchType
)
SLANG_RAW(")\n")
SLANG_RAW("struct InputPatch\n")
SLANG_RAW("{\n")
SLANG_RAW("    __subscript(uint index) -> T;\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, let N : int>\n")
SLANG_RAW("__magic_type(HLSLOutputPatchType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLOutputPatchType
)
SLANG_RAW(")\n")
SLANG_RAW("struct OutputPatch\n")
SLANG_RAW("{\n")
SLANG_RAW("    __subscript(uint index) -> T;\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")

static const struct {
    IROp op;
    char const* name;
} kMutableByteAddressBufferCases[] =
{
    { kIROp_HLSLRWByteAddressBufferType,                "RWByteAddressBuffer" },
    { kIROp_HLSLRasterizerOrderedByteAddressBufferType, "RasterizerOrderedByteAddressBuffer" },
};
for(auto item : kMutableByteAddressBufferCases) {
SLANG_RAW("#line 289 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(HLSL")
SLANG_SPLICE(item.name
)
SLANG_RAW("Type)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(item.op
)
SLANG_RAW(")\n")
SLANG_RAW("struct ")
SLANG_SPLICE(item.name
)
SLANG_RAW("\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Note(tfoley): supports all operations from `ByteAddressBuffer`\n")
SLANG_RAW("    // TODO(tfoley): can this be made a sub-type?\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$1 = $0._data.length() * 4\")\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint dim);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4]\")\n")
SLANG_RAW("    uint Load(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    uint Load(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec2($0._data[$1/4], $0._data[$1/4+1])\")\n")
SLANG_RAW("    uint2 Load2(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    uint2 Load2(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec3($0._data[$1/4], $0._data[$1/4+1], $0._data[$1/4+2])\")\n")
SLANG_RAW("    uint3 Load3(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    uint3 Load3(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"uvec4($0._data[$1/4], $0._data[$1/4+1], $0._data[$1/4+2], $0._data[$1/4+3])\")\n")
SLANG_RAW("    uint4 Load4(int location);\n")
SLANG_RAW("\n")
SLANG_RAW("    uint4 Load4(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    T Load<T>(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<T>(this, location);\n")
SLANG_RAW("    }\n")

    if (item.op == kIROp_HLSLRWByteAddressBufferType)
    {
SLANG_RAW("#line 329 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("    // float32 and int64 atomic support. This is a Slang specific extension, it uses\n")
SLANG_RAW("    // GL_EXT_shader_atomic_float on Vulkan\n")
SLANG_RAW("    // NvAPI support on DX\n")
SLANG_RAW("    // NOTE! To use this feature on HLSL based targets the path to 'nvHLSLExtns.h' from the NvAPI SDK must\n")
SLANG_RAW("    // be set. That this include will be added to the *output* that is passed to a downstram compiler.\n")
SLANG_RAW("    // Also note that you *can* include NVAPI headers in your Slang source, and directly use NVAPI functions\n")
SLANG_RAW("    // Directly using NVAPI functions does *not* add the #include on the output\n")
SLANG_RAW("    // Finally note you can *mix* NVAPI direct calls, and use of NVAPI intrinsics below. This doesn't cause\n")
SLANG_RAW("    // any clashes, as Slang will emit any NVAPI function it parsed (say via a include in Slang source) with\n")
SLANG_RAW("    // unique functions.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VK_EXT_shader_atomic_float\n")
SLANG_RAW("    // https://htmlpreview.github.io/?https://github.com/KhronosGroup/SPIRV-Registry/blob/master/extensions/EXT/SPV_EXT_shader_atomic_float_add.html\n")
SLANG_RAW("\n")
SLANG_RAW("    // F32 Add\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($3 = NvInterlockedAddFp32($0, $1, $2))\")\n")
SLANG_RAW("    __cuda_sm_version(2.0)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"(*$3 = atomicAdd($0._getPtrAt<float>($1), $2))\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    void InterlockedAddF32(uint byteAddress, float valueToAdd, out float originalValue);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAddF32(uint byteAddress, float valueToAdd, out float originalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<float> buf = __getEquivalentStructuredBuffer<float>(this);\n")
SLANG_RAW("        originalValue = __atomicAdd(buf[byteAddress / 4], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Without returning original value\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"(NvInterlockedAddFp32($0, $1, $2))\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __cuda_sm_version(2.0)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicAdd($0._getPtrAt<float>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAddF32(uint byteAddress, float valueToAdd);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAddF32(uint byteAddress, float valueToAdd)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<float> buf = __getEquivalentStructuredBuffer<float>(this);\n")
SLANG_RAW("        __atomicAdd(buf[byteAddress / 4], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Int64 Add\n")
SLANG_RAW("    __cuda_sm_version(6.0)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"(*$3 = atomicAdd($0._getPtrAt<uint64_t>($1), $2))\")\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd, out int64_t originalValue);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd, out int64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        outOriginalValue = __asuint64(__atomicAdd(this, byteAddress, __asuint2(valueToAdd)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd, out int64_t originalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<int64_t> buf = __getEquivalentStructuredBuffer<int64_t>(this);\n")
SLANG_RAW("        originalValue = __atomicAdd(buf[byteAddress / 8], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Without returning original value\n")
SLANG_RAW("    __cuda_sm_version(6.0)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicAdd($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __atomicAdd(this, byteAddress, __asuint2(valueToAdd));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAddI64(uint byteAddress, int64_t valueToAdd)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<int64_t> buf = __getEquivalentStructuredBuffer<int64_t>(this);\n")
SLANG_RAW("        __atomicAdd(buf[byteAddress / 8], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Cas uint64_t\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"(*$4 = atomicCAS($0._getPtrAt<uint64_t>($1), $2, $3))\")\n")
SLANG_RAW("    void InterlockedCompareExchangeU64(uint byteAddress, uint64_t compareValue, uint64_t value, out uint64_t outOriginalValue);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedCompareExchangeU64(uint byteAddress, uint64_t compareValue, uint64_t value, out uint64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        outOriginalValue = __asuint64(__cas(this, byteAddress, __asuint2(compareValue), __asuint2(value)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedCompareExchangeU64(uint byteAddress, uint64_t compareValue, uint64_t value, out uint64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        outOriginalValue = __cas(buf[byteAddress / 8], compareValue, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Max\n")
SLANG_RAW("\n")
SLANG_RAW("    __cuda_sm_version(3.5)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicMax($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedMaxU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedMaxU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicMax(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedMaxU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicMax(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Min\n")
SLANG_RAW("\n")
SLANG_RAW("    __cuda_sm_version(3.5)\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicMin($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedMinU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedMinU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicMin(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedMinU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicMin(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // And\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicAnd($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedAndU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedAndU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicAnd(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedAndU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicAnd(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Or\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicOr($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedOrU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedOrU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicOr(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedOrU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicOr(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Xor\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicXor($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedXorU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedXorU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicXor(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedXorU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicXor(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Exchange\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicExch($0._getPtrAt<uint64_t>($1), $2)\")\n")
SLANG_RAW("    uint64_t InterlockedExchangeU64(uint byteAddress, uint64_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    uint64_t InterlockedExchangeU64(uint byteAddress, uint64_t value) { return __asuint64(__atomicExchange(this, byteAddress, __asuint2(value))); }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    uint64_t InterlockedExchangeU64(uint byteAddress, uint64_t value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        return __atomicExchange(buf[byteAddress / 8], value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // SM6.6 6 64bit atomics.\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedAdd64(uint byteAddress, int64_t valueToAdd, out int64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __atomicAdd(this, byteAddress, valueToAdd, outOriginalValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAdd64(uint byteAddress, int64_t valueToAdd, out int64_t originalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<int64_t> buf = __getEquivalentStructuredBuffer<int64_t>(this);\n")
SLANG_RAW("        originalValue = __atomicAdd(buf[byteAddress / 8], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedAdd64(uint byteAddress, uint64_t valueToAdd, out uint64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __atomicAdd(this, byteAddress, valueToAdd, outOriginalValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedAdd64(uint byteAddress, uint64_t valueToAdd, out uint64_t originalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        originalValue = __atomicAdd(buf[byteAddress / 8], valueToAdd);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedCompareExchange64(uint byteAddress, int64_t compareValue, int64_t value, out int64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __cas(this, byteAddress, compareValue, value, outOriginalValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedCompareExchange64(uint byteAddress, int64_t compareValue, int64_t value, out int64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<int64_t> buf = __getEquivalentStructuredBuffer<int64_t>(this);\n")
SLANG_RAW("        outOriginalValue = __cas(buf[byteAddress / 8], compareValue, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    void InterlockedCompareExchange64(uint byteAddress, uint64_t compareValue, uint64_t value, out uint64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __cas(this, byteAddress, compareValue, value, outOriginalValue);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void InterlockedCompareExchange64(uint byteAddress, uint64_t compareValue, uint64_t value, out uint64_t outOriginalValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RWStructuredBuffer<uint64_t> buf = __getEquivalentStructuredBuffer<uint64_t>(this);\n")
SLANG_RAW("        outOriginalValue = __cas(buf[byteAddress / 8], compareValue, value);\n")
SLANG_RAW("    }\n")

    }
SLANG_RAW("#line 568 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("    // Added operations:\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicAdd($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedAdd(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicAdd($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedAdd(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicAnd($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedAnd(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicAnd($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedAnd(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($4 = atomicCompSwap($0._data[$1/4], $2, $3))\")\n")
SLANG_RAW("    void InterlockedCompareExchange(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT compare_value,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicCompSwap($0._data[$1/4], $2, $3)\")\n")
SLANG_RAW("    void InterlockedCompareStore(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT compare_value,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicExchange($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedExchange(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicMax($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedMax(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicMax($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedMax(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicMin($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedMin(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicMin($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedMin(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicOr($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedOr(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicOr($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedOr(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"($3 = atomicXor($0._data[$1/4], $2))\")\n")
SLANG_RAW("    void InterlockedXor(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value,\n")
SLANG_RAW("        out UINT original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"atomicXor($0._data[$1/4], $2)\")\n")
SLANG_RAW("    void InterlockedXor(\n")
SLANG_RAW("        UINT dest,\n")
SLANG_RAW("        UINT value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4] = $2\")\n")
SLANG_RAW("    void Store(\n")
SLANG_RAW("        uint address,\n")
SLANG_RAW("        uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4] = $2.x, $0._data[$1/4+1] = $2.y\")\n")
SLANG_RAW("    void Store2(\n")
SLANG_RAW("        uint address,\n")
SLANG_RAW("        uint2 value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4] = $2.x, $0._data[$1/4+1] = $2.y, $0._data[$1/4+2] = $2.z\")\n")
SLANG_RAW("    void Store3(\n")
SLANG_RAW("        uint address,\n")
SLANG_RAW("        uint3 value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1/4] = $2.x, $0._data[$1/4+1] = $2.y, $0._data[$1/4+2] = $2.z, $0._data[$1/4+3] = $2.w\")\n")
SLANG_RAW("    void Store4(\n")
SLANG_RAW("        uint address,\n")
SLANG_RAW("        uint4 value);\n")
SLANG_RAW("\n")
SLANG_RAW("    void Store<T>(int offset, T value)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __byteAddressBufferStore(this, offset, value);\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")

}
SLANG_RAW("#line 685 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")

static const struct {
    IROp op;
    char const* name;
} kMutableStructuredBufferCases[] =
{
    { kIROp_HLSLRWStructuredBufferType,                "RWStructuredBuffer" },
    { kIROp_HLSLRasterizerOrderedStructuredBufferType, "RasterizerOrderedStructuredBuffer" },
};
for(auto item : kMutableStructuredBufferCases) {
SLANG_RAW("#line 697 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSL")
SLANG_SPLICE(item.name
)
SLANG_RAW("Type)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(item.op
)
SLANG_RAW(")\n")
SLANG_RAW("struct ")
SLANG_SPLICE(item.name
)
SLANG_RAW("\n")
SLANG_RAW("{\n")
SLANG_RAW("    uint DecrementCounter();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$1 = $0._data.length(); $2 = 0\")\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint numStructs,\n")
SLANG_RAW("        out uint stride);\n")
SLANG_RAW("\n")
SLANG_RAW("    uint IncrementCounter();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"$0._data[$1]\")\n")
SLANG_RAW("    __target_intrinsic(spirv_direct, \"%addr = OpAccessChain resultType*StorageBuffer resultId _0 const(int, 0) _1; OpLoad resultType resultId %addr;\")\n")
SLANG_RAW("    T Load(int location);\n")
SLANG_RAW("    T Load(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint index) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_intrinsic(glsl, \"$0._data[$1]\")\n")
SLANG_RAW("        __target_intrinsic(spirv_direct, \"*StorageBuffer OpAccessChain resultType resultId _0 const(int, 0) _1\")\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")

}
SLANG_RAW("#line 729 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLPointStreamType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLPointStreamType
)
SLANG_RAW(")\n")
SLANG_RAW("struct PointStream\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EmitVertex()\")\n")
SLANG_RAW("    void Append(T value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EndPrimitive()\")\n")
SLANG_RAW("    void RestartStrip();\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLLineStreamType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLLineStreamType
)
SLANG_RAW(")\n")
SLANG_RAW("struct LineStream\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EmitVertex()\")\n")
SLANG_RAW("    void Append(T value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EndPrimitive()\")\n")
SLANG_RAW("    void RestartStrip();\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLTriangleStreamType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLTriangleStreamType
)
SLANG_RAW(")\n")
SLANG_RAW("struct TriangleStream\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EmitVertex()\")\n")
SLANG_RAW("    void Append(T value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"EndPrimitive()\")\n")
SLANG_RAW("    void RestartStrip();\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MAP_UNARY(TYPE, COUNT, FUNC, VALUE) \\\n")
SLANG_RAW("    vector<TYPE,COUNT> result; for(int i = 0; i < COUNT; ++i) { result[i] = FUNC(VALUE[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define MATRIX_MAP_UNARY(TYPE, ROWS, COLS, FUNC, VALUE) \\\n")
SLANG_RAW("    matrix<TYPE,ROWS,COLS> result; for(int i = 0; i < ROWS; ++i) { result[i] = FUNC(VALUE[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MAP_BINARY(TYPE, COUNT, FUNC, LEFT, RIGHT) \\\n")
SLANG_RAW("    vector<TYPE,COUNT> result; for(int i = 0; i < COUNT; ++i) { result[i] = FUNC(LEFT[i], RIGHT[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define MATRIX_MAP_BINARY(TYPE, ROWS, COLS, FUNC, LEFT, RIGHT) \\\n")
SLANG_RAW("    matrix<TYPE,ROWS,COLS> result; for(int i = 0; i < ROWS; ++i) { result[i] = FUNC(LEFT[i], RIGHT[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MAP_TRINARY(TYPE, COUNT, FUNC, A, B, C) \\\n")
SLANG_RAW("    vector<TYPE,COUNT> result; for(int i = 0; i < COUNT; ++i) { result[i] = FUNC(A[i], B[i], C[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("#define MATRIX_MAP_TRINARY(TYPE, ROWS, COLS, FUNC, A, B, C) \\\n")
SLANG_RAW("    matrix<TYPE,ROWS,COLS> result; for(int i = 0; i < ROWS; ++i) { result[i] = FUNC(A[i], B[i], C[i]); } return result\n")
SLANG_RAW("\n")
SLANG_RAW("// Try to terminate the current draw or dispatch call (HLSL SM 4.0)\n")
SLANG_RAW("void abort();\n")
SLANG_RAW("\n")
SLANG_RAW("// Absolute value (HLSL SM 1.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_abs($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_abs($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FAbs, SAbs) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T abs(T x);\n")
SLANG_RAW("/*{\n")
SLANG_RAW("    // Note: this simple definition may not be appropriate for floating-point inputs\n")
SLANG_RAW("    return x < 0 ? -x : x;\n")
SLANG_RAW("}*/\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FAbs, SAbs) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> abs(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, abs, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> abs(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, abs, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_abs($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_abs($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FAbs, SAbs) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T abs(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FAbs, SAbs) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> abs(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, abs, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> abs(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, abs, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Inverse cosine (HLSL SM 1.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_acos($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_acos($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Acos _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T acos(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Acos _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> acos(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, acos, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> acos(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, acos, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Test if all components are non-zero (HLSL SM 1.0)\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__target_intrinsic(cpp, \"bool($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"bool($0)\")\n")
SLANG_RAW("__target_intrinsic(glsl, \"bool($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool all(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"all(bvec$N0($0))\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool all(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    bool result = true;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result = result && all(x[i]);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool all(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    bool result = true;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result = result && all(x[i]);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Barrier for writes to all memory spaces (HLSL SM 5.0)\n")
SLANG_RAW("__target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__threadfence()\")\n")
SLANG_RAW("void AllMemoryBarrier();\n")
SLANG_RAW("\n")
SLANG_RAW("// Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\n")
SLANG_RAW("__target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__syncthreads()\")\n")
SLANG_RAW("void AllMemoryBarrierWithGroupSync();\n")
SLANG_RAW("\n")
SLANG_RAW("// Test if any components is non-zero (HLSL SM 1.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__target_intrinsic(cpp, \"bool($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"bool($0)\")\n")
SLANG_RAW("__target_intrinsic(glsl, \"bool($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool any(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"any(bvec$N0($0))\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool any(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    bool result = false;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result = result || any(x[i]);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool any(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    bool result = false;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result = result || any(x[i]);\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Reinterpret bits as a double (HLSL SM 5.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"packDouble2x32(uvec2($0, $1))\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asdouble($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asdouble($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"%v = OpCompositeConstruct _type(uint2) resultId _0 _1; OpExtInst resultType resultId glsl450 59 %v\")\n")
SLANG_RAW("__glsl_extension(GL_ARB_gpu_shader5)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("double asdouble(uint lowbits, uint highbits);\n")
SLANG_RAW("\n")
SLANG_RAW("// Reinterpret bits as a float (HLSL SM 4.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"intBitsToFloat\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asfloat($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asfloat($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float asfloat(int x);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"uintBitsToFloat\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asfloat($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asfloat($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float asfloat(uint x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"intBitsToFloat\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float, N> asfloat(vector< int, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(float, N, asfloat, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"uintBitsToFloat\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float,N> asfloat(vector<uint,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(float, N, asfloat, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<float,N,M> asfloat(matrix< int,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(float, N, M, asfloat, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<float,N,M> asfloat(matrix<uint,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(float, N, M, asfloat, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// No op\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float asfloat(float x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float,N> asfloat(vector<float,N> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<float,N,M> asfloat(matrix<float,N,M> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("// Inverse sine (HLSL SM 1.0)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asin($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asin($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Asin _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T asin(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Asin _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> asin(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T,N,asin,x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> asin(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T,N,M,asin,x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Reinterpret bits as an int (HLSL SM 4.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"floatBitsToInt\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asint($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asint($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int asint(float x);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"int($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asint($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asint($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int asint(uint x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"floatBitsToInt\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int, N> asint(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(int, N, asint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"ivec$N0($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int, N> asint(vector<uint, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(int, N, asint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<int, N, M> asint(matrix<float, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(int, N, M, asint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<int, N, M> asint(matrix<uint, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(int, N, M, asint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// No op\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int asint(int x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int,N> asint(vector<int,N> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<int,N,M> asint(matrix<int,N,M> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("// Reinterpret bits of double as a uint (HLSL SM 5.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"{ uvec2 v = unpackDouble2x32($0); $1 = v.x; $2 = v.y; }\")\n")
SLANG_RAW("__glsl_extension(GL_ARB_gpu_shader5)\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asuint($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asuint($0, $1, $2)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void asuint(double value, out uint lowbits, out uint highbits);\n")
SLANG_RAW("\n")
SLANG_RAW("// Reinterpret bits as a uint (HLSL SM 4.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"floatBitsToUint\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asuint($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asuint($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint asuint(float x);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"uint($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_asuint($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_asuint($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint asuint(int x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"floatBitsToUint\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint,N> asuint(vector<float,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, asuint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"uvec$N0($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpBitcast resultType resultId _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint, N> asuint(vector<int, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, asuint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<uint,N,M> asuint(matrix<float,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(uint, N, M, asuint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<uint, N, M> asuint(matrix<int, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(uint, N, M, asuint, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint asuint(uint x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint,N> asuint(vector<uint,N> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<uint,N,M> asuint(matrix<uint,N,M> x)\n")
SLANG_RAW("{ return x; }\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// 16-bit bitcast ops (HLSL SM 6.2)\n")
SLANG_RAW("//\n")
SLANG_RAW("// TODO: We need to map these to GLSL/SPIR-V\n")
SLANG_RAW("// operations that don't require an intermediate\n")
SLANG_RAW("// conversion to fp32.\n")
SLANG_RAW("\n")
SLANG_RAW("// Identity cases:\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] float16_t asfloat16(float16_t value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] vector<float16_t,N> asfloat16<let N : int>(vector<float16_t,N> value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] matrix<float16_t,R,C> asfloat16<let R : int, let C : int>(matrix<float16_t,R,C> value) { return value; }\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] int16_t asint16(int16_t value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] vector<int16_t,N> asint16<let N : int>(vector<int16_t,N> value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] matrix<int16_t,R,C> asint16<let R : int, let C : int>(matrix<int16_t,R,C> value) { return value; }\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] uint16_t asuint16(uint16_t value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] vector<uint16_t,N> asuint16<let N : int>(vector<uint16_t,N> value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] matrix<uint16_t,R,C> asuint16<let R : int, let C : int>(matrix<uint16_t,R,C> value) { return value; }\n")
SLANG_RAW("\n")
SLANG_RAW("// Signed<->unsigned cases:\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] int16_t asint16(uint16_t value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] vector<int16_t,N> asint16<let N : int>(vector<uint16_t,N> value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] matrix<int16_t,R,C> asint16<let R : int, let C : int>(matrix<uint16_t,R,C> value) { return value; }\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] uint16_t asuint16(int16_t value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] vector<uint16_t,N> asuint16<let N : int>(vector<int16_t,N> value) { return value; }\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] matrix<uint16_t,R,C> asuint16<let R : int, let C : int>(matrix<int16_t,R,C> value) { return value; }\n")
SLANG_RAW("\n")
SLANG_RAW("// Float->unsigned cases:\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"uint16_t(packHalf2x16(vec2($0, 0.0)))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half_as_ushort\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint16_t asuint16(float16_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint16_t,N> asuint16<let N : int>(vector<float16_t,N> value)\n")
SLANG_RAW("{ VECTOR_MAP_UNARY(uint16_t, N, asuint16, value); }\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<uint16_t,R,C> asuint16<let R : int, let C : int>(matrix<float16_t,R,C> value)\n")
SLANG_RAW("{ MATRIX_MAP_UNARY(uint16_t, R, C, asuint16, value); }\n")
SLANG_RAW("\n")
SLANG_RAW("// Unsigned->float cases:\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"float16_t(unpackHalf2x16($0).x)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__ushort_as_half\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float16_t asfloat16(uint16_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float16_t,N> asfloat16<let N : int>(vector<uint16_t,N> value)\n")
SLANG_RAW("{ VECTOR_MAP_UNARY(float16_t, N, asfloat16, value); }\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<float16_t,R,C> asfloat16<let R : int, let C : int>(matrix<uint16_t,R,C> value)\n")
SLANG_RAW("{ MATRIX_MAP_UNARY(float16_t, R, C, asfloat16, value); }\n")
SLANG_RAW("\n")
SLANG_RAW("// Float<->signed cases:\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half_as_short\")\n")
SLANG_RAW("[__unsafeForceInlineEarly][__readNone] int16_t asint16(float16_t value) { return asuint16(value); }\n")
SLANG_RAW("__target_intrinsic(hlsl) [__unsafeForceInlineEarly][__readNone] vector<int16_t,N> asint16<let N : int>(vector<float16_t,N> value) { return asuint16(value); }\n")
SLANG_RAW("__target_intrinsic(hlsl) [__unsafeForceInlineEarly][__readNone] matrix<int16_t,R,C> asint16<let R : int, let C : int>(matrix<float16_t,R,C> value) { return asuint16(value); }\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__short_as_half\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[__unsafeForceInlineEarly] float16_t asfloat16(int16_t value) { return asfloat16(asuint16(value)); }\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl) [__unsafeForceInlineEarly][__readNone] vector<float16_t,N> asfloat16<let N : int>(vector<int16_t,N> value) { return asfloat16(asuint16(value)); }\n")
SLANG_RAW("__target_intrinsic(hlsl) [__unsafeForceInlineEarly][__readNone] matrix<float16_t,R,C> asfloat16<let R : int, let C : int>(matrix<int16_t,R,C> value) { return asfloat16(asuint16(value)); }\n")
SLANG_RAW("\n")
SLANG_RAW("// Inverse tangent (HLSL SM 1.0)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_atan($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_atan($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Atan _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T atan(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Atan _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> atan(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, atan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> atan(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, atan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"atan($0,$1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_atan2($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_atan2($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Atan2 _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T atan2(T y, T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"atan($0,$1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Atan2 _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> atan2(vector<T, N> y, vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, atan2, y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> atan2(matrix<T,N,M> y, matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, atan2, y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Ceiling (HLSL SM 1.0)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_ceil($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_ceil($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Ceil _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ceil(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Ceil _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ceil(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ceil, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ceil(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ceil, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Check access status to tiled resource\n")
SLANG_RAW("bool CheckAccessFullyMapped(uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("// Clamp (HLSL SM 1.0)\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FClamp, UClamp, SClamp) _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T clamp(T x, T minBound, T maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FClamp, UClamp, SClamp) _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> clamp(vector<T, N> x, vector<T, N> minBound, vector<T, N> maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> clamp(matrix<T,N,M> x, matrix<T,N,M> minBound, matrix<T,N,M> maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FClamp, UClamp, SClamp) _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T clamp(T x, T minBound, T maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FClamp, UClamp, SClamp) _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> clamp(vector<T, N> x, vector<T, N> minBound, vector<T, N> maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> clamp(matrix<T,N,M> x, matrix<T,N,M> minBound, matrix<T,N,M> maxBound)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return min(max(x, minBound), maxBound);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Clip (discard) fragment conditionally\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void clip(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    if(x < T(0)) discard;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void clip(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    if(any(x < T(0))) discard;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void clip(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    if(any(x < T(0))) discard;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Cosine\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_cos($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_cos($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cos _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T cos(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cos _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> cos(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T,N, cos, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> cos(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, cos, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Hyperbolic cosine\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_cosh($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_cosh($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cosh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T cosh(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cosh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> cosh(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T,N, cosh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> cosh(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, cosh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Population count\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"bitCount\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_countbits($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_countbits($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint countbits(uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Cross product\n")
SLANG_RAW("// TODO: SPIRV does not support integer vectors.\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cross _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,3> cross(vector<T,3> left, vector<T,3> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vector<T,3>(\n")
SLANG_RAW("        left.y * right.z - left.z * right.y,\n")
SLANG_RAW("        left.z * right.x - left.x * right.z,\n")
SLANG_RAW("        left.x * right.y - left.y * right.x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Cross _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, 3> cross(vector<T, 3> left, vector<T, 3> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return vector<T, 3>(\n")
SLANG_RAW("        left.y * right.z - left.z * right.y,\n")
SLANG_RAW("        left.z * right.x - left.x * right.z,\n")
SLANG_RAW("        left.x * right.y - left.y * right.x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Convert encoded color\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int4 D3DCOLORtoUBYTE4(float4 color)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let scaled = color.zyxw * 255.001999f;\n")
SLANG_RAW("    return int4(scaled);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Partial-difference derivatives\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(glsl, dFdx)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddx(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdx)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddx(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddx, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddx(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddx, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdxCoarse)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddx_coarse(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdxCoarse)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddx_coarse(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddx_coarse, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddx_coarse(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddx_coarse, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdxFine)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddx_fine(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdxFine)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddx_fine(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddx_fine, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddx_fine(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddx_fine, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdy)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddy(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdy)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddy(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddy, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddy(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddy, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdyCoarse)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddy_coarse(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdyCoarse)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddy_coarse(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddy_coarse, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddy_coarse(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddy_coarse, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdyFine)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ddy_fine(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_ARB_derivative_control)\n")
SLANG_RAW("__target_intrinsic(glsl, dFdyFine)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ddy_fine(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, ddy_fine, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ddy_fine(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, ddy_fine, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Radians to degrees\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Degrees _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T degrees(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T(180) / T.getPi());\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Degrees _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> degrees(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, degrees, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> degrees(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, degrees, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Matrix determinant\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Determinant _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T determinant(matrix<T,N,N> m);\n")
SLANG_RAW("\n")
SLANG_RAW("// Barrier for device memory\n")
SLANG_RAW("__target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__threadfence()\")\n")
SLANG_RAW("void DeviceMemoryBarrier();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n")
SLANG_RAW("__target_intrinsic(glsl, \"__syncthreads()\")\n")
SLANG_RAW("void DeviceMemoryBarrierWithGroupSync();\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector distance\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Distance _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T distance(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return length(x - y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector dot product\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T dot(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T result = T(0);\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result += x[i] * y[i];\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T dot(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T result = T(0);\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("        result += x[i] * y[i];\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Helper for computing distance terms for lighting (obsolete)\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType> vector<T,4> dst(vector<T,4> x, vector<T,4> y);\n")
SLANG_RAW("\n")
SLANG_RAW("// Given a RWByteAddressBuffer allow it to be interpretted as a RWStructuredBuffer\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_GetEquivalentStructuredBuffer
)
SLANG_RAW(")\n")
SLANG_RAW("RWStructuredBuffer<T> __getEquivalentStructuredBuffer<T>(RWByteAddressBuffer b);\n")
SLANG_RAW("\n")
SLANG_RAW("// Error message\n")
SLANG_RAW("\n")
SLANG_RAW("// void errorf( string format, ... );\n")
SLANG_RAW("\n")
SLANG_RAW("// Attribute evaluation\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: The matrix cases of these functions won't actuall work\n")
SLANG_RAW("// when compiled to GLSL, since they only support scalar/vector\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: Should these be constrains to `__BuiltinFloatingPointType`?\n")
SLANG_RAW("// TODO: SPIRV-direct does not support non-floating-point types.\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(glsl, interpolateAtCentroid)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InterpolateAtCentroid _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T EvaluateAttributeAtCentroid(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(glsl, interpolateAtCentroid)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InterpolateAtCentroid _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> EvaluateAttributeAtCentroid(vector<T,N> x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(glsl, interpolateAtCentroid)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> EvaluateAttributeAtCentroid(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, EvaluateAttributeAtCentroid, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtSample($0, int($1))\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InterpolateAtSample _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T EvaluateAttributeAtSample(T x, uint sampleindex);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtSample($0, int($1))\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InterpolateAtSample _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> EvaluateAttributeAtSample(vector<T,N> x, uint sampleindex);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtSample($0, int($1))\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> EvaluateAttributeAtSample(matrix<T,N,M> x, uint sampleindex)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,N,M> result;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        result[i] = EvaluateAttributeAtSample(x[i], sampleindex);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtOffset($0, vec2($1) / 16.0f)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"%foffset = OpConvertSToF _type(float2) resultId _1; %offsetdiv16 = 136 _type(float2) resultId %foffset const(float2, 16.0, 16.0); OpExtInst resultType resultId glsl450 78 _0 %offsetdiv16\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T EvaluateAttributeSnapped(T x, int2 offset);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtOffset($0, vec2($1) / 16.0f)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"%foffset = OpConvertSToF _type(float2) resultId _1; %offsetdiv16 = 136 _type(float2) resultId %foffset const(float2, 16.0, 16.0); OpExtInst resultType resultId glsl450 78 _0 %offsetdiv16\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> EvaluateAttributeSnapped(vector<T,N> x, int2 offset);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(glsl, \"interpolateAtOffset($0, vec2($1) / 16.0f)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> EvaluateAttributeSnapped(matrix<T,N,M> x, int2 offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,N,M> result;\n")
SLANG_RAW("    for(int i = 0; i < N; ++i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        result[i] = EvaluateAttributeSnapped(x[i], offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Base-e exponent\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_exp($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_exp($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Exp _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T exp(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Exp _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> exp(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, exp, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> exp(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, exp, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Base-2 exponent\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_exp2($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_exp2($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Exp2 _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T exp2(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Exp2 _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> exp2(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, exp2, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> exp2(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, exp2, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Convert 16-bit float stored in low bits of integer\n")
SLANG_RAW("__target_intrinsic(glsl, \"unpackHalf2x16($0).x\")\n")
SLANG_RAW("__glsl_version(420)\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__cuda_sm_version(6.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half2float(__ushort_as_half($0))\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float f16tof32(uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float, N> f16tof32(vector<uint, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(float, N, f16tof32, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Convert to 16-bit float stored in low bits of integer\n")
SLANG_RAW("__target_intrinsic(glsl, \"packHalf2x16(vec2($0,0.0))\")\n")
SLANG_RAW("__glsl_version(420)\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__cuda_sm_version(6.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half_as_ushort(__float2half($0))\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint f32tof16(float value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint, N> f32tof16(vector<float, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, f32tof16, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
SLANG_RAW("// The following is Slang specific and NOT part of standard HLSL\n")
SLANG_RAW("// It's not clear what happens with float16 time in HLSL -> can the float16 coerce to uint for example? If so that would\n")
SLANG_RAW("// give the wrong result\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"unpackHalf2x16($0).x\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half2float\")\n")
SLANG_RAW("__glsl_version(420)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float f16tof32(float16_t value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__half2float\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float, N> f16tof32(vector<float16_t, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(float, N, f16tof32, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Convert to float16_t\n")
SLANG_RAW("__target_intrinsic(glsl, \"packHalf2x16(vec2($0,0.0))\")\n")
SLANG_RAW("__glsl_version(420)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__float2half\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float16_t f32tof16_(float value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"__float2half\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<float16_t, N> f32tof16_(vector<float, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, f32tof16, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
SLANG_RAW("\n")
SLANG_RAW("// Flip surface normal to face forward, if needed\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> faceforward(vector<T,N> n, vector<T,N> i, vector<T,N> ng)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return dot(ng, i) < T(0.0f) ? n : -n;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Find first set bit starting at high bit and working down\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findMSB\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_firstbithigh($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_firstbithigh($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindSMsb _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int firstbithigh(int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findMSB\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindSMsb _0\")\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int, N> firstbithigh(vector<int, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(int, N, firstbithigh, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findMSB\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_firstbithigh($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_firstbithigh($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindUMsb _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint firstbithigh(uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findMSB\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindUMsb _0\")\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint,N> firstbithigh(vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, firstbithigh, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Find first set bit starting at low bit and working up\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findLSB\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_firstbitlow($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_firstbitlow($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindILsb _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int firstbitlow(int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findLSB\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindILsb _0\")\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int,N> firstbitlow(vector<int,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(int, N, firstbitlow, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findLSB\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_firstbitlow($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_firstbitlow($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindILsb _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint firstbitlow(uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl,\"findLSB\")\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FindILsb _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint,N> firstbitlow(vector<uint,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, firstbitlow, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Floor (HLSL SM 1.0)\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_floor($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_floor($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Floor _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T floor(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Floor _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> floor(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, floor, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> floor(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, floor, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Fused multiply-add for doubles\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("double fma(double a, double b, double c);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<double, N> fma(vector<double, N> a, vector<double, N> b, vector<double, N> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_TRINARY(double, N, fma, a, b, c);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<double, N, M> fma(matrix<double, N, M> a, matrix<double, N, M> b, matrix<double, N, M> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_TRINARY(double, N, M, fma, a, b, c);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Floating point remainder of x/y\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_fmod($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_fmod($0, $1)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T fmod(T x, T y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x - y * trunc(x/y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> fmod(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, fmod, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> fmod(matrix<T, N, M> x, matrix<T, N, M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, fmod, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Fractional part\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fract)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_frac($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_frac($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fract _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T frac(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fract)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fract _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> frac(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, frac, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> frac(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, frac, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Split float into mantissa and exponent\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Frexp _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T frexp(T x, out T exp);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Frexp _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> frexp(vector<T, N> x, out vector<T, N> exp)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, frexp, x, exp);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> frexp(matrix<T, N, M> x, out matrix<T, N, M> exp)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, frexp, x, exp);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Texture filter width\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T fwidth(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> fwidth(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, fwidth, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> fwidth(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, fwidth, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Get the value of a vertex attribute at a specific vertex.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// The `GetAttributeAtVertex()` function can be used in a fragment shader\n")
SLANG_RAW("/// to get the value of the given `attribute` at the vertex of the primitive\n")
SLANG_RAW("/// that corresponds to the given `vertexIndex`.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note that the `attribute` must have been a declared varying input to\n")
SLANG_RAW("/// the fragment shader with the `nointerpolation` modifier.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// This function can be applied to scalars, vectors, and matrices of\n")
SLANG_RAW("/// built-in scalar types.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note: these functions are not curently implemented for Vulkan/SPIR-V output.\n")
SLANG_RAW("///\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(GL_NV_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__glsl_version(450)\n")
SLANG_RAW("T GetAttributeAtVertex(T attribute, uint vertexIndex);\n")
SLANG_RAW("\n")
SLANG_RAW("/// Get the value of a vertex attribute at a specific vertex.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// The `GetAttributeAtVertex()` function can be used in a fragment shader\n")
SLANG_RAW("/// to get the value of the given `attribute` at the vertex of the primitive\n")
SLANG_RAW("/// that corresponds to the given `vertexIndex`.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note that the `attribute` must have been a declared varying input to\n")
SLANG_RAW("/// the fragment shader with the `nointerpolation` modifier.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// This function can be applied to scalars, vectors, and matrices of\n")
SLANG_RAW("/// built-in scalar types.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note: these functions are not curently implemented for Vulkan/SPIR-V output.\n")
SLANG_RAW("///\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(GL_NV_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__glsl_version(450)\n")
SLANG_RAW("vector<T,N> GetAttributeAtVertex(vector<T,N> attribute, uint vertexIndex);\n")
SLANG_RAW("\n")
SLANG_RAW("/// Get the value of a vertex attribute at a specific vertex.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// The `GetAttributeAtVertex()` function can be used in a fragment shader\n")
SLANG_RAW("/// to get the value of the given `attribute` at the vertex of the primitive\n")
SLANG_RAW("/// that corresponds to the given `vertexIndex`.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note that the `attribute` must have been a declared varying input to\n")
SLANG_RAW("/// the fragment shader with the `nointerpolation` modifier.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// This function can be applied to scalars, vectors, and matrices of\n")
SLANG_RAW("/// built-in scalar types.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note: these functions are not curently implemented for Vulkan/SPIR-V output.\n")
SLANG_RAW("///\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(GL_NV_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_fragment_shader_barycentric, \"$0[$1]\")\n")
SLANG_RAW("__glsl_version(450)\n")
SLANG_RAW("matrix<T,N,M> GetAttributeAtVertex(matrix<T,N,M> attribute, uint vertexIndex);\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Get number of samples in render target\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint GetRenderTargetSampleCount();\n")
SLANG_RAW("\n")
SLANG_RAW("// Get position of given sample\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float2 GetRenderTargetSamplePosition(int Index);\n")
SLANG_RAW("\n")
SLANG_RAW("// Group memory barrier\n")
SLANG_RAW("__target_intrinsic(glsl, \"groupMemoryBarrier\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__threadfence_block\")\n")
SLANG_RAW("void GroupMemoryBarrier();\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"groupMemoryBarrier(), barrier()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__syncthreads()\")\n")
SLANG_RAW("void GroupMemoryBarrierWithGroupSync();\n")
SLANG_RAW("\n")
SLANG_RAW("// Atomics\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicAdd($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicAdd($0, $1)\")\n")
SLANG_RAW("void InterlockedAdd(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicAdd($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicAdd((uint*)$0, $1)\")\n")
SLANG_RAW("void InterlockedAdd(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicAdd($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicAdd($0, $1))\")\n")
SLANG_RAW("void InterlockedAdd(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicAdd($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicAdd((uint*)$0, $1))\")\n")
SLANG_RAW("void InterlockedAdd(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicAnd($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicAnd($0, $1)\")\n")
SLANG_RAW("void InterlockedAnd(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicAnd($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicAnd((int*)$0, $1)\")\n")
SLANG_RAW("void InterlockedAnd(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicAnd($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicAnd($0, $1))\")\n")
SLANG_RAW("void InterlockedAnd(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicAnd($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicAnd((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedAnd(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($3 = $atomicCompSwap($A, $1, $2))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$3 = atomicCAS($0, $1, $2))\")\n")
SLANG_RAW("void InterlockedCompareExchange(__ref  int dest,  int compare_value,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($3 = $atomicCompSwap($A, $1, $2))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$3 = (uint)atomicCAS((int*)$0, $1, $2))\")\n")
SLANG_RAW("void InterlockedCompareExchange(__ref uint dest, uint compare_value, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicCompSwap($A, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicCAS($0, $1, $2)\")\n")
SLANG_RAW("void InterlockedCompareStore(__ref int dest,  int compare_value,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicCompSwap($A, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicCAS((int*)$0, $1, $2)\")\n")
SLANG_RAW("void InterlockedCompareStore(__ref uint dest, uint compare_value, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicExchange($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicExch($0, $1))\")\n")
SLANG_RAW("void InterlockedExchange(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicExchange($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicExch((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedExchange(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicMax($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicMax($0, $1)\")\n")
SLANG_RAW("void InterlockedMax(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicMax($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicMax((int*)$0, $1)\")\n")
SLANG_RAW("void InterlockedMax(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicMax($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicMax($0, $1))\")\n")
SLANG_RAW("void InterlockedMax(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicMax($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicMax((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedMax(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicMin($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicMin($0, $1)\")\n")
SLANG_RAW("void InterlockedMin(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicMin($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicMin((int*)$0, $1)\")\n")
SLANG_RAW("void InterlockedMin(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicMin($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicMin($0, $1))\")\n")
SLANG_RAW("void InterlockedMin(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicMin($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicMin((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedMin(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicOr($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicOr($0, $1)\")\n")
SLANG_RAW("void InterlockedOr(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicOr($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicOr((int*)$0, $1)\")\n")
SLANG_RAW("void InterlockedOr(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicOr($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicOr($0, $1))\")\n")
SLANG_RAW("void InterlockedOr(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicOr($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicOr((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedOr(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicXor($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicXor($0, $1)\")\n")
SLANG_RAW("void InterlockedXor(__ref  int dest,  int value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"$atomicXor($A, $1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"atomicXor((int*)$0, $1)\")\n")
SLANG_RAW("void InterlockedXor(__ref uint dest, uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicXor($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = atomicXor($0, $1))\")\n")
SLANG_RAW("void InterlockedXor(__ref  int dest,  int value, out  int original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"($2 = $atomicXor($A, $1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(*$2 = (uint)atomicXor((int*)$0, $1))\")\n")
SLANG_RAW("void InterlockedXor(__ref uint dest, uint value, out uint original_value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Is floating-point value finite?\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_isfinite($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_isfinite($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool isfinite(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return !(isinf(x) || isnan(x));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<bool, N> isfinite(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(bool, N, isfinite, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<bool, N, M> isfinite(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(bool, N, M, isfinite, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Is floating-point value infinite?\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_isinf($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_isinf($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool isinf(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<bool, N> isinf(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(bool, N, isinf, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<bool, N, M> isinf(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(bool, N, M, isinf, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Is floating-point value not-a-number?\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_isnan($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_isnan($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("bool isnan(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<bool, N> isnan(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(bool, N, isnan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<bool, N, M> isnan(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(bool, N, M, isnan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Construct float from mantissa and exponent\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Ldexp _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T ldexp(T x, T exp)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * exp2(exp);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Ldexp _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> ldexp(vector<T, N> x, vector<T, N> exp)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * exp2(exp);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> ldexp(matrix<T, N, M> x, matrix<T, N, M> exp)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, ldexp, x, exp);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector length\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Length _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T length(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return sqrt(dot(x, x));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Linear interpolation\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, mix)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FMix _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T lerp(T x, T y, T s)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T(1.0f) - s) + y * s;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, mix)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 FMix _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> lerp(vector<T, N> x, vector<T, N> y, vector<T, N> s)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T(1.0f) - s) + y * s;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> lerp(matrix<T,N,M> x, matrix<T,N,M> y, matrix<T,N,M> s)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_TRINARY(T, N, M, lerp, x, y, s);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Legacy lighting function (obsolete)\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float4 lit(float n_dot_l, float n_dot_h, float m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let ambient = 1.0f;\n")
SLANG_RAW("    let diffuse = max(n_dot_l, 0.0f);\n")
SLANG_RAW("    let specular = step(0.0f, n_dot_l) * max(pow(n_dot_h, m), 0.0f);\n")
SLANG_RAW("    return float4(ambient, diffuse, specular, 1.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Base-e logarithm\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_log($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_log($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Log _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T log(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Log _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> log(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, log, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> log(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, log, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Base-10 logarithm\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"(log( $0 ) * $S0( 0.43429448190325182765112891891661) )\" )\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_log10($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_log10($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"%baseElog = OpExtInst resultType resultId glsl450 Log _0; OpFMul resultType resultId _0 %baseElog const(_p,0.43429448190325182765112891891661)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T log10(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"(log( $0 ) * $S0(0.43429448190325182765112891891661) )\" )\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"%baseElog = OpExtInst resultType resultId glsl450 Log _0; OpVectorTimesScalar resultType resultId _0 %baseElog const(_p,0.43429448190325182765112891891661)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> log10(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, log10, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> log10(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, log10, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Base-2 logarithm\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_log2($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_log2($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Log2 _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T log2(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Log2 _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> log2(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, log2, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> log2(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, log2, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// multiply-add\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fma)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T mad(T mvalue, T avalue, T bvalue);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fma)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> mad(vector<T, N> mvalue, vector<T, N> avalue, vector<T, N> bvalue)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_TRINARY(T, N, mad, mvalue, avalue, bvalue);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> mad(matrix<T, N, M> mvalue, matrix<T, N, M> avalue, matrix<T, N, M> bvalue)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_TRINARY(T, N, M, mad, mvalue, avalue, bvalue);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fma)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_fma($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T mad(T mvalue, T avalue, T bvalue);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, fma)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Fma _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> mad(vector<T, N> mvalue, vector<T, N> avalue, vector<T, N> bvalue)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_TRINARY(T, N, mad, mvalue, avalue, bvalue);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> mad(matrix<T, N, M> mvalue, matrix<T, N, M> avalue, matrix<T, N, M> bvalue)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_TRINARY(T, N, M, mad, mvalue, avalue, bvalue);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// maximum\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_max($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_max($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMax, UMax, SMax) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T max(T x, T y);\n")
SLANG_RAW("// Note: a stdlib implementation of `max` (or `min`) will require splitting\n")
SLANG_RAW("// floating-point and integer cases apart, because the floating-point\n")
SLANG_RAW("// version needs to correctly handle the case where one of the inputs\n")
SLANG_RAW("// is not-a-number.\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMax, UMax, SMax) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> max(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, max, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> max(matrix<T, N, M> x, matrix<T, N, M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, max, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_max($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_max($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMax, UMax, SMax) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T max(T x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMax, UMax, SMax) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> max(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, max, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> max(matrix<T, N, M> x, matrix<T, N, M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, max, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// minimum\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_min($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_min($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMin, UMin, SMin) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T min(T x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMin, UMin, SMin) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> min(vector<T,N> x, vector<T,N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, min, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> min(matrix<T,N,M> x, matrix<T,N,M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, min, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_min($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_min($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMin, UMin, SMin) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T min(T x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fus(FMin, UMin, SMin) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> min(vector<T,N> x, vector<T,N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, min, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> min(matrix<T,N,M> x, matrix<T,N,M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, min, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// split into integer and fractional parts (both with same sign)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T modf(T x, out T ip);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> modf(vector<T,N> x, out vector<T,N> ip)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, modf, x, ip);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> modf(matrix<T,N,M> x, out matrix<T,N,M> ip)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, modf, x, ip);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// msad4 (whatever that is)\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint4 msad4(uint reference, uint2 source, uint4 accum)\n")
SLANG_RAW("{\n")
SLANG_RAW("    int4 bytesRef = (reference >> uint4(24, 16, 8, 0)) & 0xFF;\n")
SLANG_RAW("    int4 bytesX   = (source.x  >> uint4(24, 16, 8, 0)) & 0xFF;\n")
SLANG_RAW("    int4 bytesY   = (source.y  >> uint4(24, 16, 8, 0)) & 0xFF;\n")
SLANG_RAW("\n")
SLANG_RAW("    uint4 mask = bytesRef == 0 ? 0 : 0xFFFFFFFFu;\n")
SLANG_RAW("\n")
SLANG_RAW("    uint4 result = accum;\n")
SLANG_RAW("    result += mask.x & abs(bytesRef - int4(bytesX.x,           bytesY.y, bytesY.z, bytesY.w));\n")
SLANG_RAW("    result += mask.y & abs(bytesRef - int4(bytesX.x, bytesX.y,           bytesY.z, bytesY.w));\n")
SLANG_RAW("    result += mask.z & abs(bytesRef - int4(bytesX.x, bytesX.y, bytesX.z,           bytesY.w));\n")
SLANG_RAW("    result += mask.w & abs(bytesRef - int4(bytesX.x, bytesX.y, bytesX.z, bytesX.w));\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// General inner products\n")
SLANG_RAW("\n")
SLANG_RAW("// scalar-scalar\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_Mul
)
SLANG_RAW(")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T mul(T x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("// scalar-vector and vector-scalar\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_Mul
)
SLANG_RAW(")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> mul(vector<T, N> x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_Mul
)
SLANG_RAW(")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> mul(T x, vector<T, N> y);\n")
SLANG_RAW("\n")
SLANG_RAW("// scalar-matrix and matrix-scalar\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M :int>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_Mul
)
SLANG_RAW(")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> mul(matrix<T, N, M> x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M :int>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_Mul
)
SLANG_RAW(")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> mul(T x, matrix<T, N, M> y);\n")
SLANG_RAW("\n")
SLANG_RAW("// vector-vector (dot product)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"dot\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T mul(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return dot(x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T mul(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return dot(x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// vector-matrix\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, M> mul(vector<T, N> left, matrix<T, N, M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,M> result;\n")
SLANG_RAW("    for( int j = 0; j < M; ++j )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[i] * right[i][j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[j] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, M> mul(vector<T, N> left, matrix<T, N, M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,M> result;\n")
SLANG_RAW("    for( int j = 0; j < M; ++j )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[i] * right[i][j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[j] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, M> mul(vector<T, N> left, matrix<T, N, M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,M> result;\n")
SLANG_RAW("    for( int j = 0; j < M; ++j )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum |= left[i] & right[i][j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[j] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// matrix-vector\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> mul(matrix<T,N,M> left, vector<T,M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,N> result;\n")
SLANG_RAW("    for( int i = 0; i < N; ++i )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int j = 0; j < M; ++j )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[i][j] * right[j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[i] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> mul(matrix<T,N,M> left, vector<T,M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,N> result;\n")
SLANG_RAW("    for( int i = 0; i < N; ++i )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int j = 0; j < M; ++j )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[i][j] * right[j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[i] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> mul(matrix<T,N,M> left, vector<T,M> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T,N> result;\n")
SLANG_RAW("    for( int i = 0; i < N; ++i )\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int j = 0; j < M; ++j )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum |= left[i][j] & right[j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[i] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// matrix-matrix\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let R : int, let N : int, let C : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,R,C> mul(matrix<T,R,N> right, matrix<T,N,C> left)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,R,C> result;\n")
SLANG_RAW("    for( int r = 0; r < R; ++r)\n")
SLANG_RAW("    for( int c = 0; c < C; ++c)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[r][i] * right[i][c];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[r][c] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let R : int, let N : int, let C : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,R,C> mul(matrix<T,R,N> right, matrix<T,N,C> left)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,R,C> result;\n")
SLANG_RAW("    for( int r = 0; r < R; ++r)\n")
SLANG_RAW("    for( int c = 0; c < C; ++c)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left[r][i] * right[i][c];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[r][c] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let R : int, let N : int, let C : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"($1 * $0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,R,C> mul(matrix<T,R,N> right, matrix<T,N,C> left)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,R,C> result;\n")
SLANG_RAW("    for( int r = 0; r < R; ++r)\n")
SLANG_RAW("    for( int c = 0; c < C; ++c)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        for( int i = 0; i < N; ++i )\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum |= left[r][i] & right[i][c];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        result[r][c] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// noise (deprecated)\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("float noise(float x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return 0;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("__generic<let N : int> float noise(vector<float, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return 0;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("/// Indicate that an index may be non-uniform at execution time.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Shader Model 5.1 and 6.x introduce support for dynamic indexing\n")
SLANG_RAW("/// of arrays of resources, but place the restriction that *by default*\n")
SLANG_RAW("/// the implementation can assume that any value used as an index into\n")
SLANG_RAW("/// such arrays will be dynamically uniform across an entire `Draw` or `Dispatch`\n")
SLANG_RAW("/// (when using instancing, the value must be uniform across all instances;\n")
SLANG_RAW("/// it does not seem that the restriction extends to draws within a multi-draw).\n")
SLANG_RAW("///\n")
SLANG_RAW("/// In order to indicate to the implementation that it cannot make the\n")
SLANG_RAW("/// uniformity assumption, a shader programmer is required to pass the index\n")
SLANG_RAW("/// to the `NonUniformResourceIndex` function before using it as an index.\n")
SLANG_RAW("/// The function superficially acts like an identity function.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Note: a future version of Slang may take responsibility for inserting calls\n")
SLANG_RAW("/// to this function as necessary in output code, rather than make this\n")
SLANG_RAW("/// the user's responsibility, so that the default behavior of the language\n")
SLANG_RAW("/// is more semantically \"correct.\"\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, nonuniformEXT)\n")
SLANG_RAW("__glsl_extension(GL_EXT_nonuniform_qualifier)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint NonUniformResourceIndex(uint index)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return index;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, nonuniformEXT)\n")
SLANG_RAW("__glsl_extension(GL_EXT_nonuniform_qualifier)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int NonUniformResourceIndex(int index)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return index;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Normalize a vector\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Normalize _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> normalize(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x / length(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Raise to a power\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_pow($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_pow($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Pow _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T pow(T x, T y);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Pow _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> pow(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, pow, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> pow(matrix<T,N,M> x, matrix<T,N,M> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, pow, x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Output message\n")
SLANG_RAW("// TODO: add check to ensure format is const literal.\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0)\")\n")
SLANG_RAW("void printf(NativeString format);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1)\")\n")
SLANG_RAW("void printf<T0>(NativeString format, T0 arg0);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2)\")\n")
SLANG_RAW("void printf<T0, T1>(NativeString format, T0 arg0, T1 arg1);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3)\")\n")
SLANG_RAW("void printf<T0, T1, T2>(NativeString format, T0 arg0, T1 arg1, T2 arg2);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3, $4)\")\n")
SLANG_RAW("void printf<T0, T1, T2, T3>(NativeString format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3, $4, $5)\")\n")
SLANG_RAW("void printf<T0, T1, T2, T3, T4>(NativeString format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("void printf<T0, T1, T2, T3, T4, T5>(NativeString format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3, $4, $5, $6, $7)\")\n")
SLANG_RAW("void printf<T0, T1, T2, T3, T4, T5, T6>(NativeString format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cpp)\n")
SLANG_RAW("__target_intrinsic(cuda)\n")
SLANG_RAW("__glsl_extension(GL_EXT_debug_printf)\n")
SLANG_RAW("__target_intrinsic(glsl, \"debugPrintfEXT($0, $1, $2, $3, $4, $5, $6, $7, $8)\")\n")
SLANG_RAW("void printf<T0, T1, T2, T3, T4, T5, T6, T7>(NativeString format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);\n")
SLANG_RAW("\n")
SLANG_RAW("// Tessellation factor fixup routines\n")
SLANG_RAW("\n")
SLANG_RAW("void Process2DQuadTessFactorsAvg(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float2 InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void Process2DQuadTessFactorsMax(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float2 InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void Process2DQuadTessFactorsMin(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float2 InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessIsolineTessFactors(\n")
SLANG_RAW("    in  float RawDetailFactor,\n")
SLANG_RAW("    in  float RawDensityFactor,\n")
SLANG_RAW("    out float RoundedDetailFactor,\n")
SLANG_RAW("    out float RoundedDensityFactor);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessQuadTessFactorsAvg(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessQuadTessFactorsMax(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessQuadTessFactorsMin(\n")
SLANG_RAW("    in  float4 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float4 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float2 RoundedInsideTessFactors,\n")
SLANG_RAW("    out float2 UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessTriTessFactorsAvg(\n")
SLANG_RAW("    in  float3 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float3 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float RoundedInsideTessFactor,\n")
SLANG_RAW("    out float UnroundedInsideTessFactor);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessTriTessFactorsMax(\n")
SLANG_RAW("    in  float3 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float3 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float RoundedInsideTessFactor,\n")
SLANG_RAW("    out float UnroundedInsideTessFactor);\n")
SLANG_RAW("\n")
SLANG_RAW("void ProcessTriTessFactorsMin(\n")
SLANG_RAW("    in  float3 RawEdgeFactors,\n")
SLANG_RAW("    in  float InsideScale,\n")
SLANG_RAW("    out float3 RoundedEdgeTessFactors,\n")
SLANG_RAW("    out float RoundedInsideTessFactors,\n")
SLANG_RAW("    out float UnroundedInsideTessFactors);\n")
SLANG_RAW("\n")
SLANG_RAW("// Degrees to radians\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Radians _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T radians(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T.getPi() / T(180.0f));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Radians _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> radians(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T.getPi() / T(180.0f));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> radians(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x * (T.getPi() / T(180.0f));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Approximate reciprocal\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T rcp(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return T(1.0) / x;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> rcp(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, rcp, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> rcp(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, rcp, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Reflect incident vector across plane with given normal\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Reflect _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> reflect(vector<T,N> i, vector<T,N> n)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return i - T(2) * dot(n,i) * n;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Refract incident vector given surface normal and index of refraction\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Refract _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> refract(vector<T,N> i, vector<T,N> n, T eta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let dotNI = dot(n,i);\n")
SLANG_RAW("    let k = T(1) - eta*eta*(T(1) - dotNI * dotNI);\n")
SLANG_RAW("    if(k < T(0)) return vector<T,N>(T(0));\n")
SLANG_RAW("    return eta * i - (eta * dotNI + sqrt(k)) * n;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Reverse order of bits\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"bitfieldReverse\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_reversebits($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_reversebits($0)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("uint reversebits(uint value);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"bitfieldReverse\")\n")
SLANG_RAW("__generic<let N : int>\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<uint, N> reversebits(vector<uint, N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(uint, N, reversebits, value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Round-to-nearest\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_round($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_round($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Round _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T round(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Round _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> round(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, round, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> round(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, round, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Reciprocal of square root\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"inversesqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_rsqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_rsqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InverseSqrt _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T rsqrt(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return T(1.0) / sqrt(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"inversesqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 InverseSqrt _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> rsqrt(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, rsqrt, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> rsqrt(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, rsqrt, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Clamp value to [0,1] range\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T saturate(T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return clamp<T>(x, T(0), T(1));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> saturate(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return clamp<T,N>(x,\n")
SLANG_RAW("        vector<T,N>(T(0)),\n")
SLANG_RAW("        vector<T,N>(T(1)));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> saturate(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, saturate, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Extract sign of value\n")
SLANG_RAW("__generic<T : __BuiltinSignedArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"int(sign($0))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_sign($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_sign($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FSign, SSign) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("int sign(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinSignedArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl, \"ivec$N0(sign($0))\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 fi(FSign, SSign) _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<int, N> sign(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(int, N, sign, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinSignedArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<int, N, M> sign(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(int, N, M, sign, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Sine\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_sin($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_sin($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sin _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T sin(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sin _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> sin(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, sin, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> sin(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, sin, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Sine and cosine\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_sincos($0, $1, $2)\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void sincos(T x, out T s, out T c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void sincos(vector<T,N> x, out vector<T,N> s, out vector<T,N> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("void sincos(matrix<T,N,M> x, out matrix<T,N,M> s, out matrix<T,N,M> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Hyperbolic Sine\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_sinh($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_sinh($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sinh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T sinh(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sinh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> sinh(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, sinh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> sinh(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, sinh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Smooth step (Hermite interpolation)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 SmoothStep _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T smoothstep(T min, T max, T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let t = saturate((x - min) / (max - min));\n")
SLANG_RAW("    return t * t * (T(3.0f) - (t + t));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 SmoothStep _0 _1 _2\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> smoothstep(vector<T, N> min, vector<T, N> max, vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_TRINARY(T, N, smoothstep, min, max, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> smoothstep(matrix<T, N, M> min, matrix<T, N, M> max, matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_TRINARY(T, N, M, smoothstep, min, max, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Square root\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_sqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_sqrt($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sqrt _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T sqrt(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Sqrt _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> sqrt(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, sqrt, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> sqrt(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, sqrt, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Step function\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Step _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T step(T y, T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return x < y ? T(0.0f) : T(1.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Step _0 _1\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> step(vector<T,N> y, vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_BINARY(T, N, step, y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> step(matrix<T, N, M> y, matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_BINARY(T, N, M, step, y, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Tangent\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_tan($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_tan($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Tan _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T tan(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Tan _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> tan(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, tan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> tan(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, tan, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Hyperbolic tangent\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_tanh($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_tanh($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Tanh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T tanh(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Tanh _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T,N> tanh(vector<T,N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, tanh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T,N,M> tanh(matrix<T,N,M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, tanh, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Matrix transpose\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, M, N> transpose(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T,M,N> result;\n")
SLANG_RAW("    for(int r = 0; r < M; ++r)\n")
SLANG_RAW("        for(int c = 0; c < N; ++c)\n")
SLANG_RAW("            result[r][c] = x[c][r];\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, M, N> transpose(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T, M, N> result;\n")
SLANG_RAW("    for (int r = 0; r < M; ++r)\n")
SLANG_RAW("        for (int c = 0; c < N; ++c)\n")
SLANG_RAW("            result[r][c] = x[c][r];\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinLogicalType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, M, N> transpose(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T, M, N> result;\n")
SLANG_RAW("    for (int r = 0; r < M; ++r)\n")
SLANG_RAW("        for (int c = 0; c < N; ++c)\n")
SLANG_RAW("            result[r][c] = x[c][r];\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Truncate to integer\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"$P_trunc($0)\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"$P_trunc($0)\")\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Trunc _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T trunc(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(glsl)\n")
SLANG_RAW("__target_intrinsic(spirv_direct, \"OpExtInst resultType resultId glsl450 Trunc _0\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("vector<T, N> trunc(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    VECTOR_MAP_UNARY(T, N, trunc, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("matrix<T, N, M> trunc(matrix<T, N, M> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    MATRIX_MAP_UNARY(T, N, M, trunc, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Slang Specific 'Mask' Wave Intrinsics\n")
SLANG_RAW("\n")
SLANG_RAW("typedef uint WaveMask;\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot(true).x\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__activemask()\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBallot(true).x\")\n")
SLANG_RAW("WaveMask WaveGetConvergedMask();\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_WaveGetActiveMask
)
SLANG_RAW(")\n")
SLANG_RAW("WaveMask __WaveGetActiveMask();\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot(true).x\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBallot(true).x\")\n")
SLANG_RAW("WaveMask WaveGetActiveMask()\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __WaveGetActiveMask();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupElect()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(($0 & -$0) == (WarpMask(1) << _getLaneId()))\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveIsFirstLane()\")\n")
SLANG_RAW("bool WaveMaskIsFirstLane(WaveMask mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAll($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(__all_sync($0, $1) != 0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveAllTrue($1)\")\n")
SLANG_RAW("bool WaveMaskAllTrue(WaveMask mask, bool condition);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAny($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(__any_sync($0, $1) != 0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveAnyTrue($1)\")\n")
SLANG_RAW("bool WaveMaskAnyTrue(WaveMask mask, bool condition);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot($1).x\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__ballot_sync($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBallot($1)\")\n")
SLANG_RAW("WaveMask WaveMaskBallot(WaveMask mask, bool condition);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__target_intrinsic(cuda, \"__popc(__ballot_sync($0, $1))\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveCountBits($1)\")\n")
SLANG_RAW("uint WaveMaskCountBits(WaveMask mask, bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return _WaveCountBits(WaveActiveBallot(value));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\n")
SLANG_RAW("// before resuming execution. Guarantees memory ordering in shared memory among threads participating\n")
SLANG_RAW("// in the barrier.\n")
SLANG_RAW("//\n")
SLANG_RAW("// The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\n")
SLANG_RAW("//\n")
SLANG_RAW("// TODO(JS):\n")
SLANG_RAW("// For HLSL it's not clear what to do. There is no explicit mechanism to 'reconverge' threads. In the docs it describes\n")
SLANG_RAW("// behavior as\n")
SLANG_RAW("// \"These intrinsics are dependent on active lanes and therefore flow control. In the model of this document, implementations\n")
SLANG_RAW("// must enforce that the number of active lanes exactly corresponds to the programmer429496726642949671684294967193s view of flow control.\"\n")
SLANG_RAW("//\n")
SLANG_RAW("// It seems this can only mean the active threads are the \"threads the program flow would lead to\". This implies a lockstep\n")
SLANG_RAW("// \"straight SIMD\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(cuda, \"__syncwarp($0)\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBarrier()\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n")
SLANG_RAW("void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n")
SLANG_RAW("\n")
SLANG_RAW("// On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\n")
SLANG_RAW("// imply convergence. For subgroupBarrier we have from the docs..\n")
SLANG_RAW("// \"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\n")
SLANG_RAW("// are allowed to continue their execution\"\n")
SLANG_RAW("// TODO(JS):\n")
SLANG_RAW("// It's not entirely clear what to do here on HLSL.\n")
SLANG_RAW("// Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\n")
SLANG_RAW("//    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\n")
SLANG_RAW("//    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\n")
SLANG_RAW("// Which seems to imply at least some memory barriers like Shared might not be needed.\n")
SLANG_RAW("//\n")
SLANG_RAW("// The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\n")
SLANG_RAW("// also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\n")
SLANG_RAW("// aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\n")
SLANG_RAW("// model appears - divergence could perhaps potentially still happen.\n")
SLANG_RAW("__target_intrinsic(cuda, \"__syncwarp($0)\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBarrier()\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n")
SLANG_RAW("void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBarrier()\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n")
SLANG_RAW("void AllMemoryBarrierWithWaveSync();\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBarrier()\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__syncwarp()\")\n")
SLANG_RAW("void GroupMemoryBarrierWithWaveSync();\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\n")
SLANG_RAW("// It is provided as access to subgroupBroadcast which can only take a\n")
SLANG_RAW("// constexpr laneId.\n")
SLANG_RAW("// https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_shader_subgroup.txt\n")
SLANG_RAW("// Versions SPIR-V greater than 1.4 loosen this restriction, and allow 'dynamic uniform' index\n")
SLANG_RAW("// If that's the behavior required then client code should use WaveReadLaneAt which works this way.\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcast($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__shfl_sync($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("T WaveMaskBroadcastLaneAt(WaveMask mask, T value, constexpr int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcast($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("vector<T,N> WaveMaskBroadcastLaneAt(WaveMask mask, vector<T,N> value, constexpr int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskBroadcastLaneAt(WaveMask mask, matrix<T,N,M> value, constexpr int lane);\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO(JS): If it can be determines that the `laneId` is constExpr, then subgroupBroadcast\n")
SLANG_RAW("// could be used on GLSL. For now we just use subgroupShuffle\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__shfl_sync($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("T WaveMaskReadLaneAt(WaveMask mask, T value, int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("vector<T,N> WaveMaskReadLaneAt(WaveMask mask, vector<T,N> value, int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskReadLaneAt(WaveMask mask, matrix<T,N,M> value, int lane);\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE! WaveMaskShuffle is a NON STANDARD HLSL intrinsic! It will map to WaveReadLaneAt on HLSL\n")
SLANG_RAW("// which means it will only work on hardware which allows arbitrary laneIds which is not true\n")
SLANG_RAW("// in general because it breaks the HLSL standard, which requires it's 'dynamically uniform' across the Wave.\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__shfl_sync($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("T WaveMaskShuffle(WaveMask mask, T value, int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($1, $2)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("vector<T,N> WaveMaskShuffle(WaveMask mask, vector<T,N> value, int lane);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple($0, $1, $2)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt($1, $2)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskShuffle(WaveMask mask, matrix<T,N,M> value, int lane);\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallotExclusiveBitCount(subgroupBallot($1))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"__popc(__ballot_sync($0, $1)  & _getLaneLtMask())\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixCountBits($1)\")\n")
SLANG_RAW("uint WaveMaskPrefixCountBits(WaveMask mask, bool value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Across lane ops\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAnd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAnd($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitAnd($1)\")\n")
SLANG_RAW("T WaveMaskBitAnd(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAnd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAndMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitAnd($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskBitAnd(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAndMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitAnd($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskBitAnd(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupOr($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveOr($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitOr($1)\")\n")
SLANG_RAW("T WaveMaskBitOr(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupOr($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveOrMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitOr($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskBitOr(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveOrMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitOr($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskBitOr(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupXor($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveXor($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitXor($1)\")\n")
SLANG_RAW("T WaveMaskBitXor(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupXor($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveXorMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitXor($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskBitXor(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveXorMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBitXor($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskBitXor(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMax($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMax($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMax($1)\")\n")
SLANG_RAW("T WaveMaskMax(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMax($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMaxMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMax($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskMax(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMaxMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMax($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskMax(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMin($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMin($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMin($1)\")\n")
SLANG_RAW("T WaveMaskMin(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMin($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMinMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMin($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskMin(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMinMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveMin($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskMin(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMul($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveProduct($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveProduct($1)\")\n")
SLANG_RAW("T WaveMaskProduct(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMul($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveProductMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveProduct($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskProduct(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveProductMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveProduct($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskProduct(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAdd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveSum($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveSum($1)\")\n")
SLANG_RAW("T WaveMaskSum(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAdd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveSumMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveSum($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskSum(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveSumMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveSum($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskSum(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAllEqual($1)\")\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAllEqual($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveAllEqual($1)\")\n")
SLANG_RAW("bool WaveMaskAllEqual(WaveMask mask, T value);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAllEqual($1)\")\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAllEqualMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveAllEqual($1)\")\n")
SLANG_RAW("bool WaveMaskAllEqual(WaveMask mask, vector<T,N> value);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveAllEqualMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveAllEqual($1)\")\n")
SLANG_RAW("bool WaveMaskAllEqual(WaveMask mask, matrix<T,N,M> value);\n")
SLANG_RAW("\n")
SLANG_RAW("// Prefix\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveMul($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProduct($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixProduct($1)\")\n")
SLANG_RAW("T WaveMaskPrefixProduct(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveMul($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProductMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixProduct($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskPrefixProduct(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProductMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixProduct($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskPrefixProduct(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAdd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSum($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixSum($1)\")\n")
SLANG_RAW("T WaveMaskPrefixSum(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAdd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSumMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixSum($1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskPrefixSum(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSumMultiple($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WavePrefixSum($1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskPrefixSum(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcastFirst($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveReadFirst($0, $1)\")\n")
SLANG_RAW("T WaveMaskReadLaneFirst(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcastFirst($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveReadFirstMultiple($0, $1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskReadLaneFirst(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveReadFirstMultiple($0, $1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskReadLaneFirst(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("// WaveMask SM6.5 like intrinsics\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO(JS): On HLSL it only works for 32 bits or less\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMatch($1).x\")\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMatchScalar($0, $1).x\")\n")
SLANG_RAW("WaveMask WaveMaskMatch(WaveMask mask, T value);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMatch($1).x\")\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMatchMultiple($0, $1)\")\n")
SLANG_RAW("WaveMask WaveMaskMatch(WaveMask mask, vector<T,N> value);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMatch($1).x\")\n")
SLANG_RAW("__cuda_sm_version(7.0)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveMatchMultiple($0, $1)\")\n")
SLANG_RAW("WaveMask WaveMaskMatch(WaveMask mask, matrix<T,N,M> value);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitAnd($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("//__target_intrinsic(glsl, \"subgroupExclusiveAnd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAnd($0, $1)\")\n")
SLANG_RAW("T WaveMaskPrefixBitAnd(WaveMask mask, T expr);\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitAnd($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAnd($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAndMultiple($0, $1)\")\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("vector<T,N> WaveMaskPrefixBitAnd(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitAnd($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAndMultiple(_getMultiPrefixMask($0, $1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskPrefixBitAnd(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitOr($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("//__target_intrinsic(glsl, \"subgroupExclusiveOr($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOr($0, $1)\")\n")
SLANG_RAW("T WaveMaskPrefixBitOr(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitOr($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("//__target_intrinsic(glsl, \"subgroupExclusiveOr($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOrMultiple($0, $1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskPrefixBitOr(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitOr($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOrMultiple($0, $1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskPrefixBitOr(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitXor($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveXor($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXor($0, $1)\")\n")
SLANG_RAW("T WaveMaskPrefixBitXor(WaveMask mask, T expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitXor($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveXor($1)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXorMultiple($0, $1)\")\n")
SLANG_RAW("vector<T,N> WaveMaskPrefixBitXor(WaveMask mask, vector<T,N> expr);\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveMultiPrefixBitXor($1, uint4($0, 0, 0, 0))\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXorMultiple($0, $1)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMaskPrefixBitXor(WaveMask mask, matrix<T,N,M> expr);\n")
SLANG_RAW("\n")
SLANG_RAW("// Shader model 6.0 stuff\n")
SLANG_RAW("\n")
SLANG_RAW("// Information for GLSL wave/subgroup support\n")
SLANG_RAW("// https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_shader_subgroup.txt\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType> T QuadReadLaneAt(T sourceValue, uint quadLaneID);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int> vector<T,N> QuadReadLaneAt(vector<T,N> sourceValue, uint quadLaneID);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int> matrix<T,N,M> QuadReadLaneAt(matrix<T,N,M> sourceValue, uint quadLaneID);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType> T QuadReadAcrossX(T localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int> vector<T,N> QuadReadAcrossX(vector<T,N> localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int> matrix<T,N,M> QuadReadAcrossX(matrix<T,N,M> localValue);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType> T QuadReadAcrossY(T localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int> vector<T,N> QuadReadAcrossY(vector<T,N> localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int> matrix<T,N,M> QuadReadAcrossY(matrix<T,N,M> localValue);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType> T QuadReadAcrossDiagonal(T localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int> vector<T,N> QuadReadAcrossDiagonal(vector<T,N> localValue);\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int> matrix<T,N,M> QuadReadAcrossDiagonal(matrix<T,N,M> localValue);\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAnd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveBitAnd(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitAnd(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAnd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T, N> WaveActiveBitAnd(vector<T, N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitAnd(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveBitAnd(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitAnd(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupOr($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveBitOr(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitOr(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupOr($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveActiveBitOr(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitOr(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveBitOr(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitOr(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupXor($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveBitXor(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitXor(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupXor($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveActiveBitXor(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitXor(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinIntegerType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveBitXor(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBitXor(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMax($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveMax(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMax(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMax($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T, N> WaveActiveMax(vector<T, N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMax(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveMax(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMax(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMin($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveMin(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMin(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMin($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T, N> WaveActiveMin(vector<T, N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMin(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveMin(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMin(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMul($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveProduct(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupMul($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveActiveProduct(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveActiveProduct(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAdd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveActiveSum(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAdd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveActiveSum(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T,N,M> WaveActiveSum(matrix<T,N,M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAllEqual($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveActiveAllEqual(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskAllEqual(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAllEqual($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveActiveAllEqual(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskAllEqual(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveActiveAllEqual(matrix<T, N, M> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskAllEqual(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAll($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveActiveAllTrue(bool condition)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskAllTrue(WaveGetActiveMask(), condition);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_vote)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupAny($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveActiveAnyTrue(bool condition)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskAnyTrue(WaveGetActiveMask(), condition);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint4 WaveActiveBallot(bool condition)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBallot(WaveGetActiveMask(), condition);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint WaveActiveCountBits(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskCountBits(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"(gl_SubgroupSize)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"(warpSize)\")\n")
SLANG_RAW("uint WaveGetLaneCount();\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"(gl_SubgroupInvocationID)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_getLaneId()\")\n")
SLANG_RAW("uint WaveGetLaneIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_basic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupElect()\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool WaveIsFirstLane()\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskIsFirstLane(WaveGetActiveMask());\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// It's useful to have a wave uint4 version of countbits, because some wave functions return uint4.\n")
SLANG_RAW("// This implementation tries to limit the amount of work required by the actual lane count.\n")
SLANG_RAW("uint _WaveCountBits(uint4 value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Assume since WaveGetLaneCount should be known at compile time, the branches will hopefully boil away\n")
SLANG_RAW("    const uint waveLaneCount = WaveGetLaneCount();\n")
SLANG_RAW("    switch ((waveLaneCount - 1) / 32)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        default:\n")
SLANG_RAW("        case 0: return countbits(value.x);\n")
SLANG_RAW("        case 1: return countbits(value.x) + countbits(value.y);\n")
SLANG_RAW("        case 2: return countbits(value.x) + countbits(value.y) + countbits(value.z);\n")
SLANG_RAW("        case 3: return countbits(value.x) + countbits(value.y) + countbits(value.z) + countbits(value.w);\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Prefix\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveMul($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WavePrefixProduct(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveMul($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WavePrefixProduct(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WavePrefixProduct(matrix<T, N, M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixProduct(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAdd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WavePrefixSum(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAdd($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WavePrefixSum(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T,N,M> WavePrefixSum(matrix<T,N,M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixSum(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcastFirst($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveReadLaneFirst(T expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneFirst(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcastFirst($0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveReadLaneFirst(vector<T,N> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneFirst(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T,N,M> WaveReadLaneFirst(matrix<T,N,M> expr)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneFirst(WaveGetActiveMask(), expr);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE! WaveBroadcastLaneAt is *NOT* standard HLSL\n")
SLANG_RAW("// It is provided as access to subgroupBroadcast which can only take a\n")
SLANG_RAW("// constexpr laneId.\n")
SLANG_RAW("// https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_shader_subgroup.txt\n")
SLANG_RAW("// Versions SPIR-V greater than 1.4 loosen this restriction, and allow 'dynamic uniform' index\n")
SLANG_RAW("// If that's the behavior required then client code should use WaveReadLaneAt which works this way.\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcast($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("T WaveBroadcastLaneAt(T value, constexpr int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBroadcastLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBroadcast($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("vector<T,N> WaveBroadcastLaneAt(vector<T,N> value, constexpr int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBroadcastLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple(_getActiveMask(), $0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("matrix<T, N, M> WaveBroadcastLaneAt(matrix<T, N, M> value, constexpr int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskBroadcastLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO(JS): If it can be determines that the `laneId` is constExpr, then subgroupBroadcast\n")
SLANG_RAW("// could be used on GLSL. For now we just use subgroupShuffle\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("T WaveReadLaneAt(T value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("vector<T,N> WaveReadLaneAt(vector<T,N> value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(cuda, \"_waveShuffleMultiple(_getActiveMask(), $0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("matrix<T, N, M> WaveReadLaneAt(matrix<T, N, M> value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskReadLaneAt(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE! WaveShuffle is a NON STANDARD HLSL intrinsic! It will map to WaveReadLaneAt on HLSL\n")
SLANG_RAW("// which means it will only work on hardware which allows arbitrary laneIds which is not true\n")
SLANG_RAW("// in general because it breaks the HLSL standard, which requires it's 'dynamically uniform' across the Wave.\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("T WaveShuffle(T value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskShuffle(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_shuffle)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupShuffle($0, $1)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("vector<T,N> WaveShuffle(vector<T,N> value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskShuffle(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveReadLaneAt\")\n")
SLANG_RAW("matrix<T, N, M> WaveShuffle(matrix<T, N, M> value, int lane)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskShuffle(WaveGetActiveMask(), value, lane);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallotExclusiveBitCount(subgroupBallot($0))\")\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint WavePrefixCountBits(bool value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskPrefixCountBits(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot(true)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"make_uint4(__activemask(), 0, 0, 0)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBallot(true)\")\n")
SLANG_RAW("uint4 WaveGetConvergedMulti();\n")
SLANG_RAW("\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_ballot)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupBallot(true)\")\n")
SLANG_RAW("__target_intrinsic(hlsl, \"WaveActiveBallot(true)\")\n")
SLANG_RAW("uint4 WaveGetActiveMulti();\n")
SLANG_RAW("\n")
SLANG_RAW("// Shader model 6.5 stuff\n")
SLANG_RAW("// https://github.com/microsoft/DirectX-Specs/blob/master/d3d/HLSL_ShaderModel6_5.md\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint4 WaveMatch(T value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMatch(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint4 WaveMatch(vector<T,N> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMatch(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("uint4 WaveMatch(matrix<T,N,M> value)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return WaveMaskMatch(WaveGetActiveMask(), value);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_popc(__ballot_sync(($1).x, $0) & _getLaneLtMask())\")\n")
SLANG_RAW("uint WaveMultiPrefixCountBits(bool value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAnd($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAnd(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("T WaveMultiPrefixBitAnd(T expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveAnd($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAndMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("vector<T,N> WaveMultiPrefixBitAnd(vector<T,N> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixAndMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMultiPrefixBitAnd(matrix<T,N,M> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("//__target_intrinsic(glsl, \"subgroupExclusiveOr($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOr(, _getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("T WaveMultiPrefixBitOr(T expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("//__target_intrinsic(glsl, \"subgroupExclusiveOr($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOrMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("vector<T,N> WaveMultiPrefixBitOr(vector<T,N> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixOrMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMultiPrefixBitOr(matrix<T,N,M> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveXor($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXor(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("T WaveMultiPrefixBitXor(T expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__glsl_extension(GL_KHR_shader_subgroup_arithmetic)\n")
SLANG_RAW("__spirv_version(1.3)\n")
SLANG_RAW("__target_intrinsic(glsl, \"subgroupExclusiveXor($0)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXorMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("vector<T,N> WaveMultiPrefixBitXor(vector<T,N> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixXorMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMultiPrefixBitXor(matrix<T,N,M> expr, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProduct(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("T WaveMultiPrefixProduct(T value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProductMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("vector<T,N> WaveMultiPrefixProduct(vector<T,N> value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixProductMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMultiPrefixProduct(matrix<T,N,M> value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSum(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("T WaveMultiPrefixSum(T value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSumMultiple(_getMultiPrefixMask(($1).x), $0 )\")\n")
SLANG_RAW("vector<T,N> WaveMultiPrefixSum(vector<T,N> value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinArithmeticType, let N : int, let M : int>\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"_wavePrefixSumMultiple(_getMultiPrefixMask(($1).x), $0)\")\n")
SLANG_RAW("matrix<T,N,M> WaveMultiPrefixSum(matrix<T,N,M> value, uint4 mask);\n")
SLANG_RAW("\n")
SLANG_RAW("// `typedef`s to help with the fact that HLSL has been sorta-kinda case insensitive at various points\n")
SLANG_RAW("typedef Texture2D texture2D;\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")


// Buffer types

static const struct {
    char const*         name;
    SlangResourceAccess access;
} kBaseBufferAccessLevels[] = {
    { "",                   SLANG_RESOURCE_ACCESS_READ },
    { "RW",                 SLANG_RESOURCE_ACCESS_READ_WRITE },
    { "RasterizerOrdered",  SLANG_RESOURCE_ACCESS_RASTER_ORDERED },
};
static const int kBaseBufferAccessLevelCount = sizeof(kBaseBufferAccessLevels) / sizeof(kBaseBufferAccessLevels[0]);

for (int aa = 0; aa < kBaseBufferAccessLevelCount; ++aa)
{
    auto access = kBaseBufferAccessLevels[aa].access;
    bool isReadOnly = (access == SLANG_RESOURCE_ACCESS_READ);
    auto flavor = TextureFlavor::create(TextureFlavor::Shape::ShapeBuffer, access).flavor;
    sb << "__generic<T>\n";
    sb << "__magic_type(Texture," << int(flavor) << ")\n";
    sb << "__intrinsic_type(" << (kIROp_TextureType + (int(flavor) << kIROpMeta_OtherShift)) << ")\n";
    sb << "struct ";
    sb << kBaseBufferAccessLevels[aa].name;
    sb << "Buffer {\n";
    sb << "[__readNone]\n";
    sb << "void GetDimensions(out uint dim);\n";

    char const* glslLoadFuncName = (access == SLANG_RESOURCE_ACCESS_READ) ? "texelFetch" : "imageLoad";

    sb << "__glsl_extension(GL_EXT_samplerless_texture_functions)";
    sb << "__target_intrinsic(glsl, \"" << glslLoadFuncName << "($0, $1)$z\")\n";
    if (isReadOnly) sb << "[__readNone]\n";
    sb << "T Load(int location);\n";

    if (isReadOnly) sb << "[__readNone]\n";
    sb << "T Load(int location, out uint status);\n";

    sb << "__subscript(uint index) -> T {\n";

    if (isReadOnly) sb << "[__readNone]\n";
    sb << "__glsl_extension(GL_EXT_samplerless_texture_functions)";
    sb << "__target_intrinsic(glsl, \"" << glslLoadFuncName << "($0, int($1))$z\") get;\n";

    if (access != SLANG_RESOURCE_ACCESS_READ)
    {
        sb << "__target_intrinsic(glsl, \"imageStore($0, int($1), $V2)\") [nonmutating] set;\n";

        sb << "__intrinsic_op(" << int(kIROp_ImageSubscript) << ") ref;\n";
    }

    sb << "}\n";

    sb << "};\n";
}
SLANG_RAW("#line 5044 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// DirectX Raytracing (DXR) Support\n")
SLANG_RAW("//\n")
SLANG_RAW("// The following is based on the experimental DXR SDK v0.09.01.\n")
SLANG_RAW("//\n")
SLANG_RAW("// Numbering follows the sections in the \"D3D12 Raytracing Functional Spec\" v0.09 (2018-03-12)\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.1.1 - Ray Flags\n")
SLANG_RAW("\n")
SLANG_RAW("typedef uint RAY_FLAG;\n")
SLANG_RAW("\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_NONE                             = 0x00;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_FORCE_OPAQUE                     = 0x01;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_FORCE_NON_OPAQUE                 = 0x02;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH  = 0x04;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_SKIP_CLOSEST_HIT_SHADER          = 0x08;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_CULL_BACK_FACING_TRIANGLES       = 0x10;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_CULL_FRONT_FACING_TRIANGLES      = 0x20;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_CULL_OPAQUE                      = 0x40;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_CULL_NON_OPAQUE                  = 0x80;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_SKIP_TRIANGLES                   = 0x100;\n")
SLANG_RAW("static const RAY_FLAG RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES       = 0x200;\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.1.2 - Ray Description Structure\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, RayDesc)\n")
SLANG_RAW("__target_intrinsic(cuda, RayDesc)\n")
SLANG_RAW("struct RayDesc\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(hlsl, Origin)\n")
SLANG_RAW("    __target_intrinsic(cuda, Origin)\n")
SLANG_RAW("    float3 Origin;\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, TMin)\n")
SLANG_RAW("    __target_intrinsic(cuda, TMin)\n")
SLANG_RAW("    float  TMin;\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, Direction)\n")
SLANG_RAW("    __target_intrinsic(cuda, Direction)\n")
SLANG_RAW("    float3 Direction;\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, TMax)\n")
SLANG_RAW("    __target_intrinsic(cuda, TMax)\n")
SLANG_RAW("    float  TMax;\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.1.3 - Ray Acceleration Structure\n")
SLANG_RAW("\n")
SLANG_RAW("__builtin\n")
SLANG_RAW("__magic_type(RaytracingAccelerationStructureType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_RaytracingAccelerationStructureType
)
SLANG_RAW(")\n")
SLANG_RAW("struct RaytracingAccelerationStructure {};\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.1.4 - Subobject Definitions\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: We may decide to support these, but their reliance on C++ implicit\n")
SLANG_RAW("// constructor call syntax (`SomeType someVar(arg0, arg1);`) makes them\n")
SLANG_RAW("// annoying for the current Slang parsing strategy, and using global variables\n")
SLANG_RAW("// for this stuff comes across as a kludge rather than the best possible design.\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.1.5 - Intersection Attributes Structure\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, BuiltInTriangleIntersectionAttributes)\n")
SLANG_RAW("struct BuiltInTriangleIntersectionAttributes\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(hlsl, barycentrics)\n")
SLANG_RAW("    float2 barycentrics;\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.2 Shaders\n")
SLANG_RAW("\n")
SLANG_RAW("// Right now new shader stages need to be added directly to the compiler\n")
SLANG_RAW("// implementation, rather than being something that can be declared in the stdlib.\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3 - Intrinsics\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3.1\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("void CallShader<Payload>(uint shaderIndex, inout Payload payload);\n")
SLANG_RAW("\n")
SLANG_RAW("// `executeCallableNV` is the GLSL intrinsic that will be used to implement\n")
SLANG_RAW("// `CallShader()` for GLSL-based targets.\n")
SLANG_RAW("//\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"executeCallableNV\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"executeCallableEXT\")\n")
SLANG_RAW("void __executeCallable(uint shaderIndex, int payloadLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("// Next is the custom intrinsic that will compute the payload location\n")
SLANG_RAW("// for a type being used in a `CallShader()` call for GLSL-based targets.\n")
SLANG_RAW("//\n")
SLANG_RAW("__generic<Payload>\n")
SLANG_RAW("__target_intrinsic(__glslRayTracing, \"$XC\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[__AlwaysFoldIntoUseSiteAttribute]\n")
SLANG_RAW("int __callablePayloadLocation(__ref Payload payload);\n")
SLANG_RAW("\n")
SLANG_RAW("// Now we provide a hard-coded definition of `CallShader()` for GLSL-based\n")
SLANG_RAW("// targets, which maps the generic HLSL operation into the non-generic\n")
SLANG_RAW("// GLSL equivalent.\n")
SLANG_RAW("//\n")
SLANG_RAW("__generic<Payload>\n")
SLANG_RAW("__specialized_for_target(glsl)\n")
SLANG_RAW("void CallShader(uint shaderIndex, inout Payload payload)\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__vulkanCallablePayload]\n")
SLANG_RAW("    static Payload p;\n")
SLANG_RAW("\n")
SLANG_RAW("    p = payload;\n")
SLANG_RAW("    __executeCallable(shaderIndex, __callablePayloadLocation(p));\n")
SLANG_RAW("    payload = p;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3.2\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(cuda, \"traceOptiXRay\")\n")
SLANG_RAW("void TraceRay<payload_t>(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    RayDesc                         Ray,\n")
SLANG_RAW("    inout payload_t                 Payload);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"traceNV\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"traceRayEXT\")\n")
SLANG_RAW("void __traceRay(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    float3                          Origin,\n")
SLANG_RAW("    float                           TMin,\n")
SLANG_RAW("    float3                          Direction,\n")
SLANG_RAW("    float                           TMax,\n")
SLANG_RAW("    int                             PayloadLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: Slang's parsing logic currently puts modifiers on\n")
SLANG_RAW("// the `GenericDecl` rather than the inner decl when\n")
SLANG_RAW("// using our default syntax, which seems wrong. We need\n")
SLANG_RAW("// to fix this, but for now using the expanded `__generic`\n")
SLANG_RAW("// syntax works in a pinch.\n")
SLANG_RAW("//\n")
SLANG_RAW("__generic<Payload>\n")
SLANG_RAW("__target_intrinsic(__glslRayTracing, \"$XP\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[__AlwaysFoldIntoUseSiteAttribute]\n")
SLANG_RAW("int __rayPayloadLocation(__ref Payload payload);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<payload_t>\n")
SLANG_RAW("__specialized_for_target(glsl)\n")
SLANG_RAW("void TraceRay(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    RayDesc                         Ray,\n")
SLANG_RAW("    inout payload_t                 Payload)\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__vulkanRayPayload]\n")
SLANG_RAW("    static payload_t p;\n")
SLANG_RAW("\n")
SLANG_RAW("    p = Payload;\n")
SLANG_RAW("    __traceRay(\n")
SLANG_RAW("        AccelerationStructure,\n")
SLANG_RAW("        RayFlags,\n")
SLANG_RAW("        InstanceInclusionMask,\n")
SLANG_RAW("        RayContributionToHitGroupIndex,\n")
SLANG_RAW("        MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("        MissShaderIndex,\n")
SLANG_RAW("        Ray.Origin,\n")
SLANG_RAW("        Ray.TMin,\n")
SLANG_RAW("        Ray.Direction,\n")
SLANG_RAW("        Ray.TMax,\n")
SLANG_RAW("        __rayPayloadLocation(p));\n")
SLANG_RAW("    Payload = p;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE!\n")
SLANG_RAW("// The name of the following functions may change when DXR supports\n")
SLANG_RAW("// a feature similar to the `GL_NV_ray_tracing_motion_blur` extension\n")
SLANG_RAW("//\n")
SLANG_RAW("// https://github.com/KhronosGroup/GLSL/blob/master/extensions/nv/GLSL_NV_ray_tracing_motion_blur.txt\n")
SLANG_RAW("\n")
SLANG_RAW("void TraceMotionRay<payload_t>(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    RayDesc                         Ray,\n")
SLANG_RAW("    float                           CurrentTime,\n")
SLANG_RAW("    inout payload_t                 Payload);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"traceRayMotionNV\")\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("void __traceMotionRay(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    float3                          Origin,\n")
SLANG_RAW("    float                           TMin,\n")
SLANG_RAW("    float3                          Direction,\n")
SLANG_RAW("    float                           TMax,\n")
SLANG_RAW("    float                           CurrentTime,\n")
SLANG_RAW("    int                             PayloadLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<payload_t>\n")
SLANG_RAW("__specialized_for_target(glsl)\n")
SLANG_RAW("void TraceMotionRay(\n")
SLANG_RAW("    RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("    uint                            RayFlags,\n")
SLANG_RAW("    uint                            InstanceInclusionMask,\n")
SLANG_RAW("    uint                            RayContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("    uint                            MissShaderIndex,\n")
SLANG_RAW("    RayDesc                         Ray,\n")
SLANG_RAW("    float                           CurrentTime,\n")
SLANG_RAW("    inout payload_t                 Payload)\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__vulkanRayPayload]\n")
SLANG_RAW("    static payload_t p;\n")
SLANG_RAW("\n")
SLANG_RAW("    p = Payload;\n")
SLANG_RAW("    __traceMotionRay(\n")
SLANG_RAW("        AccelerationStructure,\n")
SLANG_RAW("        RayFlags,\n")
SLANG_RAW("        InstanceInclusionMask,\n")
SLANG_RAW("        RayContributionToHitGroupIndex,\n")
SLANG_RAW("        MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("        MissShaderIndex,\n")
SLANG_RAW("        Ray.Origin,\n")
SLANG_RAW("        Ray.TMin,\n")
SLANG_RAW("        Ray.Direction,\n")
SLANG_RAW("        Ray.TMax,\n")
SLANG_RAW("        CurrentTime,\n")
SLANG_RAW("        __rayPayloadLocation(p));\n")
SLANG_RAW("    Payload = p;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3.3\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("bool ReportHit<A>(float tHit, uint hitKind, A attributes);\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"reportIntersectionNV\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"reportIntersectionEXT\")\n")
SLANG_RAW("bool __reportIntersection(float tHit, uint hitKind);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<A>\n")
SLANG_RAW("__specialized_for_target(glsl)\n")
SLANG_RAW("bool ReportHit(float tHit, uint hitKind, A attributes)\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__vulkanHitAttributes]\n")
SLANG_RAW("    static A a;\n")
SLANG_RAW("\n")
SLANG_RAW("    a = attributes;\n")
SLANG_RAW("    return __reportIntersection(tHit, hitKind);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3.4\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, ignoreIntersectionNV)\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"ignoreIntersectionEXT;\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixIgnoreIntersection\")\n")
SLANG_RAW("void IgnoreHit();\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.3.5\n")
SLANG_RAW("__target_intrinsic(hlsl)\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, terminateRayNV)\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"terminateRayEXT;\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixTerminateRay\")\n")
SLANG_RAW("void AcceptHitAndEndSearch();\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.4 - System Values and Special Semantics\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: Many of these functions need to be restricted so that\n")
SLANG_RAW("// they can only be accessed from specific stages.\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.4.1 - Ray Dispatch System Values\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_LaunchIDNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_LaunchIDEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetLaunchIndex\")\n")
SLANG_RAW("uint3 DispatchRaysIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_LaunchSizeNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_LaunchSizeEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetLaunchDimensions\")\n")
SLANG_RAW("uint3 DispatchRaysDimensions();\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.4.2 - Ray System Values\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_WorldRayOriginNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_WorldRayOriginEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetWorldRayOrigin\")\n")
SLANG_RAW("float3 WorldRayOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_WorldRayDirectionNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_WorldRayDirectionEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetWorldRayDirection\")\n")
SLANG_RAW("float3 WorldRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_RayTminNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_RayTminEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetRayTmin\")\n")
SLANG_RAW("float RayTMin();\n")
SLANG_RAW("\n")
SLANG_RAW("// Note: The `RayTCurrent()` intrinsic should translate to\n")
SLANG_RAW("// either `gl_HitTNV` (for hit shaders) or `gl_RayTmaxNV`\n")
SLANG_RAW("// (for intersection shaders). Right now we are handling this\n")
SLANG_RAW("// during code emission, for simplicity.\n")
SLANG_RAW("//\n")
SLANG_RAW("// TODO: Once the compiler supports a more refined concept\n")
SLANG_RAW("// of profiles/capabilities and overloading based on them,\n")
SLANG_RAW("// we should simply provide two overloads here, specialized\n")
SLANG_RAW("// to the appropriate Vulkan stages.\n")
SLANG_RAW("//\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_RayTmaxNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_RayTmaxEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetRayTmax\")\n")
SLANG_RAW("float RayTCurrent();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_IncomingRayFlagsNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_IncomingRayFlagsEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetRayFlags\")\n")
SLANG_RAW("uint RayFlags();\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.4.3 - Primitive/Object Space System Values\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(__glslRayTracing, \"(gl_InstanceID)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetInstanceIndex\")\n")
SLANG_RAW("uint InstanceIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_InstanceCustomIndexNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_InstanceCustomIndexEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetInstanceId\")\n")
SLANG_RAW("uint InstanceID();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(__glslRayTracing, \"(gl_PrimitiveID)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetPrimitiveIndex\")\n")
SLANG_RAW("uint PrimitiveIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_ObjectRayOriginNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_ObjectRayOriginEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetObjectRayOrigin\")\n")
SLANG_RAW("float3 ObjectRayOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_ObjectRayDirectionNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_ObjectRayDirectionEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetObjectRayDirection\")\n")
SLANG_RAW("float3 ObjectRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("// TODO: optix has an optixGetObjectToWorldTransformMatrix function that returns 12\n")
SLANG_RAW("// floats by reference.\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"transpose(gl_ObjectToWorldNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"transpose(gl_ObjectToWorldEXT)\")\n")
SLANG_RAW("float3x4 ObjectToWorld3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"transpose(gl_WorldToObjectNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"transpose(gl_WorldToObjectEXT)\")\n")
SLANG_RAW("float3x4 WorldToObject3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_ObjectToWorldNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_ObjectToWorld3x4EXT)\")\n")
SLANG_RAW("float4x3 ObjectToWorld4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_WorldToObjectNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_WorldToObject3x4EXT)\")\n")
SLANG_RAW("float4x3 WorldToObject4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("// NOTE!\n")
SLANG_RAW("// The name of the following functions may change when DXR supports\n")
SLANG_RAW("// a feature similar to the `GL_NV_ray_tracing_motion_blur` extension\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(glsl, \"(gl_CurrentRayTimeNV)\")\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("__glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("float RayCurrentTime();\n")
SLANG_RAW("\n")
SLANG_RAW("// Note: The provisional DXR spec included these unadorned\n")
SLANG_RAW("// `ObjectToWorld()` and `WorldToObject()` functions, so\n")
SLANG_RAW("// we will forward them to the new names as a convience\n")
SLANG_RAW("// for users who are porting their code.\n")
SLANG_RAW("//\n")
SLANG_RAW("// TODO: Should we provide a deprecation warning on these\n")
SLANG_RAW("// declarations, so that users can know they aren't coding\n")
SLANG_RAW("// against the final spec?\n")
SLANG_RAW("//\n")
SLANG_RAW("float3x4 ObjectToWorld() { return ObjectToWorld3x4(); }\n")
SLANG_RAW("float3x4 WorldToObject() { return WorldToObject3x4(); }\n")
SLANG_RAW("\n")
SLANG_RAW("// 10.4.4 - Hit Specific System values\n")
SLANG_RAW("__target_intrinsic(GL_NV_ray_tracing, \"(gl_HitKindNV)\")\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_HitKindEXT)\")\n")
SLANG_RAW("__target_intrinsic(cuda, \"optixGetHitKind\")\n")
SLANG_RAW("uint HitKind();\n")
SLANG_RAW("\n")
SLANG_RAW("// Pre-defined hit kinds (not documented explicitly)\n")
SLANG_RAW("static const uint HIT_KIND_TRIANGLE_FRONT_FACE  = 254;\n")
SLANG_RAW("static const uint HIT_KIND_TRIANGLE_BACK_FACE   = 255;\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Shader Model 6.4\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// Treats `left` and `right` as 4-component vectors of `UInt8` and computes `dot(left, right) + acc`\n")
SLANG_RAW("uint dot4add_u8packed(uint left, uint right, uint acc);\n")
SLANG_RAW("\n")
SLANG_RAW("// Treats `left` and `right` as 4-component vectors of `Int8` and computes `dot(left, right) + acc`\n")
SLANG_RAW("int dot4add_i8packed(uint left, uint right, int acc);\n")
SLANG_RAW("\n")
SLANG_RAW("// Computes `dot(left, right) + acc`.\n")
SLANG_RAW("//\n")
SLANG_RAW("// May not produce infinities or NaNs for intermediate results that overflow the range of `half`\n")
SLANG_RAW("float dot2add(float2 left, float2 right, float acc);\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Shader Model 6.5\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Mesh Shaders\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// Set the number of output vertices and primitives for a mesh shader invocation.\n")
SLANG_RAW("__target_intrinsic(glsl, \"SetMeshOutputsEXT\")\n")
SLANG_RAW("__glsl_extension(GL_EXT_mesh_shader)\n")
SLANG_RAW("__glsl_version(450)\n")
SLANG_RAW("void SetMeshOutputCounts(uint vertexCount, uint primitiveCount);\n")
SLANG_RAW("\n")
SLANG_RAW("// Specify the number of downstream mesh shader thread groups to invoke from an amplification shader,\n")
SLANG_RAW("// and provide the values for per-mesh payload parameters.\n")
SLANG_RAW("//\n")
SLANG_RAW("void DispatchMesh<P>(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ, P meshPayload);\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// \"Sampler feedback\" types `FeedbackTexture2D` and `FeedbackTexture2DArray`.\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// https://microsoft.github.io/DirectX-Specs/d3d/SamplerFeedback.html\n")
SLANG_RAW("\n")
SLANG_RAW("// The docs describe these as 'types' but their syntax makes them seem enum like, and enum is a simpler way to implement them\n")
SLANG_RAW("// But slang enums are always 'enum class like', so I use an empty struct type here\n")
SLANG_RAW("\n")
SLANG_RAW("[sealed]\n")
SLANG_RAW("[builtin]\n")
SLANG_RAW("interface __BuiltinSamplerFeedbackType {};\n")
SLANG_RAW("\n")
SLANG_RAW("[sealed]\n")
SLANG_RAW("__magic_type(FeedbackType, ")
SLANG_SPLICE(int(FeedbackType::Kind::MinMip)
)
SLANG_RAW(")\n")
SLANG_RAW("__target_intrinsic(hlsl, SAMPLER_FEEDBACK_MIN_MIP)\n")
SLANG_RAW("struct SAMPLER_FEEDBACK_MIN_MIP : __BuiltinSamplerFeedbackType {};\n")
SLANG_RAW("\n")
SLANG_RAW("[sealed]\n")
SLANG_RAW("__magic_type(FeedbackType, ")
SLANG_SPLICE(int(FeedbackType::Kind::MipRegionUsed)
)
SLANG_RAW(")\n")
SLANG_RAW("__target_intrinsic(hlsl, SAMPLER_FEEDBACK_MIP_REGION_USED)\n")
SLANG_RAW("struct SAMPLER_FEEDBACK_MIP_REGION_USED : __BuiltinSamplerFeedbackType {};\n")
SLANG_RAW("\n")
SLANG_RAW("// All of these objects are write-only resources that point to a special kind of unordered access view meant for sampler feedback.\n")
SLANG_RAW("\n")
SLANG_RAW("// Calculate the flavor constants\n")

static const int feedbackTexture2DFlavor = int(TextureFlavor::create(TextureFlavor::Shape::Shape2D, SLANG_RESOURCE_ACCESS_WRITE, SLANG_TEXTURE_FEEDBACK_FLAG).flavor);
static const int feedbackTexture2DArrayFlavor = int(TextureFlavor::create(TextureFlavor::Shape::Shape2D, SLANG_RESOURCE_ACCESS_WRITE, SLANG_TEXTURE_FEEDBACK_FLAG | SLANG_TEXTURE_ARRAY_FLAG).flavor);
SLANG_RAW("#line 5525 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(Texture, ")
SLANG_SPLICE(feedbackTexture2DFlavor
)
SLANG_RAW(")\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureType + (feedbackTexture2DFlavor << kIROpMeta_OtherShift)
)
SLANG_RAW(")\n")
SLANG_RAW("struct FeedbackTexture2D<T : __BuiltinSamplerFeedbackType>\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(out uint width, out uint height);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(uint mipLevel, out uint width, out uint height, out uint numberOfLevels);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(out float width,out float height);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(uint mipLevel, out float width,out float height, out float numberOfLevels);\n")
SLANG_RAW("\n")
SLANG_RAW("    // With Clamp\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedback($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedback($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedback<S>(Texture2D<S> tex, SamplerState samp, float2 location, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackBias<S>(Texture2D<S> tex, SamplerState samp, float2 location, float bias, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackGrad<S>(Texture2D<S> tex, SamplerState samp, float2 location, float2 ddx, float2 ddy, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Level\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackLevel($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackLevel($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackLevel<S>(Texture2D<S> tex, SamplerState samp, float2 location, float lod);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Without Clamp\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedback($1, $2, $3)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedback($1, $2, $3)\")\n")
SLANG_RAW("    void WriteSamplerFeedback<S>(Texture2D<S> tex, SamplerState samp, float2 location);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackBias<S>(Texture2D<S> tex, SamplerState samp, float2 location, float bias);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackGrad<S>(Texture2D<S> tex, SamplerState samp, float2 location, float2 ddx, float2 ddy);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(Texture, ")
SLANG_SPLICE(feedbackTexture2DArrayFlavor
)
SLANG_RAW(")\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureType + (feedbackTexture2DArrayFlavor << kIROpMeta_OtherShift)
)
SLANG_RAW(")\n")
SLANG_RAW("struct FeedbackTexture2DArray<T : __BuiltinSamplerFeedbackType>\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(out uint width,out uint height, out uint elements);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(uint mipLevel, out uint width,out uint height, out uint elements, out uint numberOfLevels);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(out float width,out float height, out float elements);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic\n")
SLANG_RAW("    void GetDimensions(uint mipLevel, out float width,out float height, out float elements, out float numberOfLevels);\n")
SLANG_RAW("\n")
SLANG_RAW("    // With Clamp\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedback($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedback($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedback<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackBias<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float bias, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackGrad<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float3 ddx, float3 ddy, float clamp);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Level\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackLevel($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackLevel($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackLevel<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float lod);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Without Clamp\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedback($1, $2, $3)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedback($1, $2, $3)\")\n")
SLANG_RAW("    void WriteSamplerFeedback<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackBias($1, $2, $3, $4)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackBias<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float bias);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"($0).WriteSamplerFeedbackGrad($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    void WriteSamplerFeedbackGrad<S>(Texture2DArray<S> texArray, SamplerState samp, float3 location, float3 ddx, float3 ddy);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// DXR 1.1 and `TraceRayInline` support\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("// Get the index of the geometry that was hit in an intersection, any-hit, or closest-hit shader\n")
SLANG_RAW("__target_intrinsic(GL_EXT_ray_tracing, \"(gl_GeometryIndexEXT)\")\n")
SLANG_RAW("uint GeometryIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("// Status of whether a (closest) hit has been committed in a `RayQuery`.\n")
SLANG_RAW("typedef uint COMMITTED_STATUS;\n")
SLANG_RAW("\n")
SLANG_RAW("// No hit committed.\n")
SLANG_RAW("static const COMMITTED_STATUS COMMITTED_NOTHING = 0;\n")
SLANG_RAW("\n")
SLANG_RAW("// Closest hit is a triangle.\n")
SLANG_RAW("//\n")
SLANG_RAW("// This could be an opaque triangle hit found by the fixed-function\n")
SLANG_RAW("// traversal and intersection implementation, or a non-opaque\n")
SLANG_RAW("// triangle hit committed by user code with `RayQuery.CommitNonOpaqueTriangleHit`\n")
SLANG_RAW("//\n")
SLANG_RAW("static const COMMITTED_STATUS COMMITTED_TRIANGLE_HIT = 1;\n")
SLANG_RAW("\n")
SLANG_RAW("// Closest hit is a procedural primitive.\n")
SLANG_RAW("//\n")
SLANG_RAW("// A procedural hit primitive is committed using `RayQuery.CommitProceduralPrimitiveHit`.\n")
SLANG_RAW("static const COMMITTED_STATUS COMMITTED_PROCEDURAL_PRIMITIVE_HIT = 2;\n")
SLANG_RAW("\n")
SLANG_RAW("// Type of candidate hit that a `RayQuery` is pausing at.\n")
SLANG_RAW("//\n")
SLANG_RAW("// A `RayQuery` can automatically commit hits with opaque triangles,\n")
SLANG_RAW("// but yields to user code for other hits to allow them to be\n")
SLANG_RAW("// dismissed or committed.\n")
SLANG_RAW("//\n")
SLANG_RAW("typedef uint CANDIDATE_TYPE;\n")
SLANG_RAW("\n")
SLANG_RAW("// Candidate hit is a non-opaque triangle.\n")
SLANG_RAW("static const CANDIDATE_TYPE CANDIDATE_NON_OPAQUE_TRIANGLE = 0;\n")
SLANG_RAW("\n")
SLANG_RAW("// Candidate hit is a procedural primitive.\n")
SLANG_RAW("static const CANDIDATE_TYPE CANDIDATE_PROCEDURAL_PRIMITIVE = 1;\n")
SLANG_RAW("\n")
SLANG_RAW("// Handle to state of an in-progress ray-tracing query.\n")
SLANG_RAW("//\n")
SLANG_RAW("// The ray query is effectively a coroutine that user shader\n")
SLANG_RAW("// code can resume to continue tracing the ray, and which yields\n")
SLANG_RAW("// back to the user code at interesting events along the ray.\n")
SLANG_RAW("//\n")
SLANG_RAW("__target_intrinsic(hlsl, RayQuery)\n")
SLANG_RAW("__target_intrinsic(glsl, rayQueryEXT)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("__glsl_version(460)\n")
SLANG_RAW("struct RayQuery <let rayFlagsGeneric : RAY_FLAG = RAY_FLAG_NONE>\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Initialize the query object in a \"fresh\" state.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_DefaultConstruct
)
SLANG_RAW(")\n")
SLANG_RAW("    __init();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Initialize a ray-tracing query.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // This method may be called on a \"fresh\" ray query, or\n")
SLANG_RAW("    // on one that is already tracing a ray. In the latter\n")
SLANG_RAW("    // case any state related to the ray previously being\n")
SLANG_RAW("    // traced is overwritten.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // The `rayFlags` here will be bitwise ORed with\n")
SLANG_RAW("    // the `rayFlags` passed as a generic argument to\n")
SLANG_RAW("    // `RayQuery` to get the effective ray flags, which\n")
SLANG_RAW("    // must obey any API-imposed restrictions.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    void TraceRayInline(\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        RAY_FLAG                        rayFlags,\n")
SLANG_RAW("        uint                            instanceInclusionMask,\n")
SLANG_RAW("        RayDesc                         ray);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryInitializeEXT($0, $1, $2, $3, $4, $5, $6, $7)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    void __rayQueryInitializeEXT(\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        RAY_FLAG                        rayFlags,\n")
SLANG_RAW("        uint                            instanceInclusionMask,\n")
SLANG_RAW("        float3                          origin,\n")
SLANG_RAW("        float                           tMin,\n")
SLANG_RAW("        float3                          direction,\n")
SLANG_RAW("        float                           tMax);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void TraceRayInline(\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        RAY_FLAG                        rayFlags,\n")
SLANG_RAW("        uint                            instanceInclusionMask,\n")
SLANG_RAW("        RayDesc                         ray)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __rayQueryInitializeEXT(\n")
SLANG_RAW("            accelerationStructure,\n")
SLANG_RAW("            rayFlags | rayFlagsGeneric,\n")
SLANG_RAW("            instanceInclusionMask,\n")
SLANG_RAW("            ray.Origin,\n")
SLANG_RAW("            ray.TMin,\n")
SLANG_RAW("            ray.Direction,\n")
SLANG_RAW("            ray.TMax);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Resume the ray query coroutine.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // If the coroutine suspends because of encountering\n")
SLANG_RAW("    // a candidate hit that cannot be resolved with fixed-funciton\n")
SLANG_RAW("    // logic, this function returns `true`, and the `Candidate*()`\n")
SLANG_RAW("    // functions should be used by application code to resolve\n")
SLANG_RAW("    // the candidate hit (by either committing or ignoring it).\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // If the coroutine terminates because traversal is\n")
SLANG_RAW("    // complete (or has been aborted), this function returns\n")
SLANG_RAW("    // `false`, and application code should use the `Committed*()`\n")
SLANG_RAW("    // functions to appropriately handle the closest hit (it any)\n")
SLANG_RAW("    // that was found.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryProceedEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    bool Proceed();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Causes the ray query to terminate.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // This function cases the ray query to act as if\n")
SLANG_RAW("    // traversal has terminated, so that subsequent\n")
SLANG_RAW("    // `Proceed()` calls will return `false`.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryTerminateEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    void Abort();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Get the type of candidate hit being considered.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    // The ray query coroutine will suspend when it encounters\n")
SLANG_RAW("    // a hit that cannot be resolved with fixed-function logic\n")
SLANG_RAW("    // (either a non-opaque triangle or a procedural primitive).\n")
SLANG_RAW("    // In either of those cases, `CandidateType()` will return\n")
SLANG_RAW("    // the kind of candidate hit that must be resolved by\n")
SLANG_RAW("    // user code.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionTypeEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    CANDIDATE_TYPE CandidateType();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of a candidate hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"transpose(rayQueryGetIntersectionObjectToWorldEXT($0, false))\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3x4 CandidateObjectToWorld3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectToWorldEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float4x3 CandidateObjectToWorld4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"transpose(rayQueryGetIntersectionWorldToObjectEXT($0, false))\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3x4 CandidateWorldToObject3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionWorldToObjectEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float4x3 CandidateWorldToObject4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceIdEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CandidateInstanceIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceCustomIndexEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CandidateInstanceID();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionGeometryIndexEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CandidateGeometryIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionPrimitiveIndexEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CandidatePrimitiveIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CandidateInstanceContributionToHitGroupIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of the ray being traced\n")
SLANG_RAW("    // in the object space of a candidate hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectRayOriginEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 CandidateObjectRayOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectRayDirectionEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 CandidateObjectRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of a candidate procedural primitive hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionCandidateAABBOpaqueEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    bool CandidateProceduralPrimitiveNonOpaque();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of a candidate non-opaque triangle hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionFrontFaceEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    bool CandidateTriangleFrontFace();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionBarycentricsEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float2 CandidateTriangleBarycentrics();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionTEXT($0, false)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float CandidateTriangleRayT();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Commit the current non-opaque triangle hit.\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryConfirmIntersectionEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    void CommitNonOpaqueTriangleHit();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Commit the current procedural primitive hit, with hit time `t`.\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryGenerateIntersectionEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    void CommitProceduralPrimitiveHit(float t);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Get the status of the committed (closest) hit, if any.\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionTypeEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    COMMITTED_STATUS CommittedStatus();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of the committed hit.\n")
SLANG_RAW("    //\n")
SLANG_RAW("    __target_intrinsic(glsl, \"transpose(rayQueryGetIntersectionObjectToWorldEXT($0, true))\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3x4 CommittedObjectToWorld3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectToWorldEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float4x3 CommittedObjectToWorld4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"transpose(rayQueryGetIntersectionWorldToObjectEXT($0, true))\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3x4 CommittedWorldToObject3x4();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionWorldToObjectEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float4x3 CommittedWorldToObject4x3();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionTEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float CommittedRayT();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceIdEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CommittedInstanceIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceCustomIndexEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CommittedInstanceID();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionGeometryIndexEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CommittedGeometryIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionPrimitiveIndexEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CommittedPrimitiveIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint CommittedInstanceContributionToHitGroupIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of the ray being traced\n")
SLANG_RAW("    // in the object space of a committed hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectRayOriginEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 CommittedObjectRayOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionObjectRayDirectionEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 CommittedObjectRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of a committed triangle hit.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionFrontFaceEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    bool CommittedTriangleFrontFace();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"rayQueryGetIntersectionBarycentricsEXT($0, true)\")\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float2 CommittedTriangleBarycentrics();\n")
SLANG_RAW("\n")
SLANG_RAW("    // Access properties of the ray being traced.\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryGetRayFlagsEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    uint RayFlags();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryGetWorldRayOriginEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 WorldRayOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryGetWorldRayDirectionEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float3 WorldRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, rayQueryGetRayTMinEXT)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_query)\n")
SLANG_RAW("    __glsl_version(460)\n")
SLANG_RAW("    float RayTMin();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("//\n")
SLANG_RAW("// Vulkan/SPIR-V specific features\n")
SLANG_RAW("//\n")
SLANG_RAW("\n")
SLANG_RAW("struct VkSubpassInput<T>\n")
SLANG_RAW("{\n")
SLANG_RAW("    T SubpassLoad();\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("struct VkSubpassInputMS<T>\n")
SLANG_RAW("{\n")
SLANG_RAW("    T SubpassLoad(int sampleIndex);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Shader Execution Reordering (SER)\n")
SLANG_RAW("///\n")
SLANG_RAW("/// NOTE! This API is currently experimental and may change in the future as SER is made available\n")
SLANG_RAW("/// in different APIs and downstream compilers.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// Based on the NVAPI on D3D12 only currently.\n")
SLANG_RAW("///\n")
SLANG_RAW("/// White paper on SER on NVAPI https://developer.nvidia.com/sites/default/files/akamai/gameworks/ser-whitepaper.pdf\n")
SLANG_RAW("///\n")
SLANG_RAW("/// The NVAPI headers (R520) required for this functionality to work can be found here...\n")
SLANG_RAW("///\n")
SLANG_RAW("/// https://developer.nvidia.com/rtx/path-tracing/nvapi/get-started\n")
SLANG_RAW("///\n")
SLANG_RAW("/// For VK the specification is currently in this PR\n")
SLANG_RAW("///\n")
SLANG_RAW("/// https://github.com/KhronosGroup/GLSL/pull/196/files\n")
SLANG_RAW("\n")
SLANG_RAW("/// Internal helper functions\n")
SLANG_RAW("\n")
SLANG_RAW("// This is a bit of a hack for GLSL HitObjectAttributes\n")
SLANG_RAW("// It relies on [ForceInline] removing the surrounding function and just inserting the *contained* `t` as a global\n")
SLANG_RAW("// The __ref should indicate the desire for the returned value to not be a copy of t, but *t*.\n")
SLANG_RAW("// In practive __ref doesn't have this effect in practice.\n")
SLANG_RAW("// \n")
SLANG_RAW("// We need this to be able access the payload outside of a function (which is all that TraceRay for example needs)\n")
SLANG_RAW("// We access the HitObjectAttributes via this function for the desired type, and it acts *as if* it's just an access\n")
SLANG_RAW("// to the global t.\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("Ref<T> __hitObjectAttributes<T>()\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__vulkanHitObjectAttributes]   \n")
SLANG_RAW("    static T t;\n")
SLANG_RAW("    return t;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Next is the custom intrinsic that will compute the hitObjectAttributes location\n")
SLANG_RAW("// for GLSL-based targets.\n")
SLANG_RAW("//\n")
SLANG_RAW("__generic<Attributes>\n")
SLANG_RAW("__target_intrinsic(__glslRayTracing, \"$XH\")\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[__AlwaysFoldIntoUseSiteAttribute]\n")
SLANG_RAW("int __hitObjectAttributesLocation(__ref Attributes attributes);\n")
SLANG_RAW("\n")
SLANG_RAW("    /// Immutable data type representing a ray hit or a miss. Can be used to invoke hit or miss shading,\n")
SLANG_RAW("    /// or as a key in ReorderThread. Created by one of several methods described below. HitObject\n")
SLANG_RAW("    /// and its related functions are available in raytracing shader types only.\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("__target_intrinsic(hlsl, NvHitObject)\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__target_intrinsic(glsl, hitObjectNV)\n")
SLANG_RAW("struct HitObject\n")
SLANG_RAW("{\n")
SLANG_RAW("        /// Executes ray traversal (including anyhit and intersection shaders) like TraceRay, but returns the\n")
SLANG_RAW("        /// resulting hit information as a HitObject and does not trigger closesthit or miss shaders.\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    static HitObject TraceRay<payload_t>(\n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("        uint RayFlags,\n")
SLANG_RAW("        uint InstanceInclusionMask,\n")
SLANG_RAW("        uint RayContributionToHitGroupIndex,\n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("        uint MissShaderIndex,\n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        inout payload_t Payload)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __hlslTraceRay(\n")
SLANG_RAW("            AccelerationStructure, \n")
SLANG_RAW("            RayFlags, \n")
SLANG_RAW("            InstanceInclusionMask, \n")
SLANG_RAW("            RayContributionToHitGroupIndex, \n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("            MissShaderIndex, \n")
SLANG_RAW("            Ray, \n")
SLANG_RAW("            Payload,\n")
SLANG_RAW("            hitObj);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject TraceRay<payload_t>( \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint RayFlags, \n")
SLANG_RAW("        uint InstanceInclusionMask, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        inout payload_t Payload)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        [__vulkanRayPayload]\n")
SLANG_RAW("        static payload_t p;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the payload\n")
SLANG_RAW("        p = Payload;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslTraceRay(\n")
SLANG_RAW("            hitObj,\n")
SLANG_RAW("            AccelerationStructure,\n")
SLANG_RAW("            RayFlags,                                           // Assumes D3D/VK have some RayFlags values\n")
SLANG_RAW("            InstanceInclusionMask,                              // cullMask\n")
SLANG_RAW("            RayContributionToHitGroupIndex,                     // sbtRecordOffset\n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex,   // sbtRecordStride\n")
SLANG_RAW("            MissShaderIndex,\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            __rayPayloadLocation(p));\n")
SLANG_RAW("        \n")
SLANG_RAW("        // Write the payload out\n")
SLANG_RAW("        Payload = p;\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Executes motion ray traversal (including anyhit and intersection shaders) like TraceRay, but returns the\n")
SLANG_RAW("        /// resulting hit information as a HitObject and does not trigger closesthit or miss shaders.\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject TraceMotionRay<payload_t>( \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint RayFlags, \n")
SLANG_RAW("        uint InstanceInclusionMask, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        float CurrentTime,\n")
SLANG_RAW("        inout payload_t Payload)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        [__vulkanRayPayload]\n")
SLANG_RAW("        static payload_t p;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the payload\n")
SLANG_RAW("        p = Payload;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslTraceMotionRay(\n")
SLANG_RAW("            hitObj,\n")
SLANG_RAW("            AccelerationStructure,\n")
SLANG_RAW("            RayFlags,                                           // Assumes D3D/VK have some RayFlags values\n")
SLANG_RAW("            InstanceInclusionMask,                              // cullMask\n")
SLANG_RAW("            RayContributionToHitGroupIndex,                     // sbtRecordOffset\n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex,   // sbtRecordStride\n")
SLANG_RAW("            MissShaderIndex,\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            CurrentTime,\n")
SLANG_RAW("            __rayPayloadLocation(p));\n")
SLANG_RAW("        \n")
SLANG_RAW("        // Write the payload out\n")
SLANG_RAW("        Payload = p;\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Creates a HitObject representing a hit based on values explicitly passed as arguments, without\n")
SLANG_RAW("        /// tracing a ray. The primitive specified by AccelerationStructure, InstanceIndex, GeometryIndex,\n")
SLANG_RAW("        /// and PrimitiveIndex must exist. The shader table index is computed using the formula used with\n")
SLANG_RAW("        /// TraceRay. The computed index must reference a valid hit group record in the shader table. The\n")
SLANG_RAW("        /// Attributes parameter must either be an attribute struct, such as\n")
SLANG_RAW("        /// BuiltInTriangleIntersectionAttributes, or another HitObject to copy the attributes from.\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    static HitObject MakeHit<attr_t>(\n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("        uint InstanceIndex,\n")
SLANG_RAW("        uint GeometryIndex,\n")
SLANG_RAW("        uint PrimitiveIndex,\n")
SLANG_RAW("        uint HitKind,\n")
SLANG_RAW("        uint RayContributionToHitGroupIndex,\n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __hlslMakeHit(\n")
SLANG_RAW("            AccelerationStructure, \n")
SLANG_RAW("            InstanceIndex,\n")
SLANG_RAW("            GeometryIndex,\n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            HitKind,\n")
SLANG_RAW("            RayContributionToHitGroupIndex,\n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex,\n")
SLANG_RAW("            Ray,\n")
SLANG_RAW("            attributes,\n")
SLANG_RAW("            hitObj);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeHit<attr_t>( \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the attributes\n")
SLANG_RAW("        __ref attr_t attr = __hitObjectAttributes<attr_t>();\n")
SLANG_RAW("\n")
SLANG_RAW("        attr = attributes;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslMakeHit(hitObj,\n")
SLANG_RAW("            AccelerationStructure,\n")
SLANG_RAW("            InstanceIndex,\n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            GeometryIndex,\n")
SLANG_RAW("            HitKind,\n")
SLANG_RAW("            RayContributionToHitGroupIndex,                         /// sbtRecordOffset?\n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex,       /// sbtRecordStride?\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            __hitObjectAttributesLocation(__hitObjectAttributes<attr_t>()));\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// See MakeHit but handles Motion \n")
SLANG_RAW("        /// Currently only supported on VK\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeMotionHit<attr_t>( \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        float CurrentTime,\n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the attributes\n")
SLANG_RAW("        __ref attr_t attr = __hitObjectAttributes<attr_t>();\n")
SLANG_RAW("\n")
SLANG_RAW("        attr = attributes;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslMakeMotionHit(hitObj,\n")
SLANG_RAW("            AccelerationStructure,\n")
SLANG_RAW("            InstanceIndex,\n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            GeometryIndex,\n")
SLANG_RAW("            HitKind,\n")
SLANG_RAW("            RayContributionToHitGroupIndex,                         /// sbtRecordOffset?\n")
SLANG_RAW("            MultiplierForGeometryContributionToHitGroupIndex,       /// sbtRecordStride?\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            CurrentTime,\n")
SLANG_RAW("            __hitObjectAttributesLocation(__hitObjectAttributes<attr_t>()));\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Creates a HitObject representing a hit based on values explicitly passed as arguments, without\n")
SLANG_RAW("        /// tracing a ray. The primitive specified by AccelerationStructure, InstanceIndex, GeometryIndex,\n")
SLANG_RAW("        /// and PrimitiveIndex must exist. The shader table index is explicitly provided as an argument\n")
SLANG_RAW("        /// instead of being computed from the indexing formula used in TraceRay. The provided index must\n")
SLANG_RAW("        /// reference a valid hit group record in the shader table. The Attributes parameter must either be an\n")
SLANG_RAW("        /// attribute struct, such as BuiltInTriangleIntersectionAttributes, or another HitObject to copy the\n")
SLANG_RAW("        /// attributes from.\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    static HitObject MakeHit<attr_t>(\n")
SLANG_RAW("        uint HitGroupRecordIndex,\n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("        uint InstanceIndex,\n")
SLANG_RAW("        uint GeometryIndex,\n")
SLANG_RAW("        uint PrimitiveIndex,\n")
SLANG_RAW("        uint HitKind,\n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __hlslMakeHitWithRecordIndex(\n")
SLANG_RAW("            HitGroupRecordIndex, \n")
SLANG_RAW("            AccelerationStructure, \n")
SLANG_RAW("            InstanceIndex,\n")
SLANG_RAW("            GeometryIndex,\n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            HitKind,\n")
SLANG_RAW("            Ray,\n")
SLANG_RAW("            attributes,\n")
SLANG_RAW("            hitObj);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeHit<attr_t>( \n")
SLANG_RAW("        uint HitGroupRecordIndex, \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the attributes\n")
SLANG_RAW("        __ref attr_t attr = __hitObjectAttributes<attr_t>();\n")
SLANG_RAW("        attr = attributes;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslMakeHitWithIndex(hitObj,\n")
SLANG_RAW("            AccelerationStructure, \n")
SLANG_RAW("            InstanceIndex,              ///? Same as instanceid ?\n")
SLANG_RAW("            GeometryIndex, \n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            HitKind,                    /// Assuming HitKinds are compatible\n")
SLANG_RAW("            HitGroupRecordIndex,        /// sbtRecordIndex\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            __hitObjectAttributesLocation(__hitObjectAttributes<attr_t>()));\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// See MakeHit but handles Motion \n")
SLANG_RAW("        /// Currently only supported on VK\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeMotionHit<attr_t>( \n")
SLANG_RAW("        uint HitGroupRecordIndex, \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        float CurrentTime,\n")
SLANG_RAW("        attr_t attributes)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the attributes\n")
SLANG_RAW("        __ref attr_t attr = __hitObjectAttributes<attr_t>();\n")
SLANG_RAW("        attr = attributes;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslMakeMotionHitWithIndex(hitObj,\n")
SLANG_RAW("            AccelerationStructure, \n")
SLANG_RAW("            InstanceIndex,              ///? Same as instanceid ?\n")
SLANG_RAW("            GeometryIndex, \n")
SLANG_RAW("            PrimitiveIndex,\n")
SLANG_RAW("            HitKind,                    /// Assuming HitKinds are compatible\n")
SLANG_RAW("            HitGroupRecordIndex,        /// sbtRecordIndex\n")
SLANG_RAW("            Ray.Origin,\n")
SLANG_RAW("            Ray.TMin,\n")
SLANG_RAW("            Ray.Direction, \n")
SLANG_RAW("            Ray.TMax,\n")
SLANG_RAW("            CurrentTime,\n")
SLANG_RAW("            __hitObjectAttributesLocation(__hitObjectAttributes<attr_t>()));\n")
SLANG_RAW("\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Creates a HitObject representing a miss based on values explicitly passed as arguments, without\n")
SLANG_RAW("        /// tracing a ray. The provided shader table index must reference a valid miss record in the shader\n")
SLANG_RAW("        /// table.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvMakeMiss\")\n")
SLANG_RAW("    static HitObject MakeMiss( \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray);\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeMiss( \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __glslMakeMiss(hitObj, MissShaderIndex, Ray.Origin, Ray.TMin, Ray.Direction, Ray.TMax);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// See MakeMiss but handles Motion \n")
SLANG_RAW("        /// Currently only supported on VK\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeMotionMiss( \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray,\n")
SLANG_RAW("        float CurrentTime)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __glslMakeMotionMiss(hitObj, MissShaderIndex, Ray.Origin, Ray.TMin, Ray.Direction, Ray.TMax, CurrentTime);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Creates a HitObject representing 429496726642949671684294967196NOP429496726642949671684294967197 (no operation) which is neither a hit nor a miss. Invoking a\n")
SLANG_RAW("        /// NOP hit object using HitObject::Invoke has no effect. Reordering by hit objects using\n")
SLANG_RAW("        /// ReorderThread will group NOP hit objects together. This can be useful in some reordering\n")
SLANG_RAW("        /// scenarios where future control flow for some threads is known to process neither a hit nor a\n")
SLANG_RAW("        /// miss.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvMakeNop\")\n")
SLANG_RAW("    static HitObject MakeNop();\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static HitObject MakeNop()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        HitObject hitObj;\n")
SLANG_RAW("        __glslMakeNop(hitObj);\n")
SLANG_RAW("        return hitObj;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Invokes closesthit or miss shading for the specified hit object. In case of a NOP HitObject, no\n")
SLANG_RAW("        /// shader is invoked.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvInvokeHitObject\")\n")
SLANG_RAW("    static void Invoke<payload_t>(\n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("        HitObject HitOrMiss,\n")
SLANG_RAW("        inout payload_t Payload);\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    static void Invoke<payload_t>(\n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure,\n")
SLANG_RAW("        HitObject HitOrMiss, \n")
SLANG_RAW("        inout payload_t Payload)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__vulkanRayPayload]\n")
SLANG_RAW("        static payload_t p;\n")
SLANG_RAW("\n")
SLANG_RAW("        // Save the payload\n")
SLANG_RAW("        p = Payload;\n")
SLANG_RAW("\n")
SLANG_RAW("        __glslInvoke(HitOrMiss, __rayPayloadLocation(p));\n")
SLANG_RAW("\n")
SLANG_RAW("        // Write payload result\n")
SLANG_RAW("        Payload = p;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns true if the HitObject encodes a miss, otherwise returns false.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectIsMissNV($0)\")\n")
SLANG_RAW("    bool IsMiss();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns true if the HitObject encodes a hit, otherwise returns false.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectIsHitNV($0)\")\n")
SLANG_RAW("    bool IsHit();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns true if the HitObject encodes a nop, otherwise returns false.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectIsEmptyNV($0)\")\n")
SLANG_RAW("    bool IsNop();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Queries ray properties from HitObject. Valid if the hit object represents a hit or a miss.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    RayDesc GetRayDesc();\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    RayDesc GetRayDesc()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        RayDesc ray = { __glslGetRayWorldOrigin(), __glslGetTMin(), __glslGetRayDirection(), __glslGetTMax() };\n")
SLANG_RAW("        return ray;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Queries shader table index from HitObject. Valid if the hit object represents a hit or a miss.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetShaderBindingTableRecordIndexNV($0)\")\n")
SLANG_RAW("    uint GetShaderTableIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the instance index of a hit. Valid if the hit object represents a hit.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetInstanceCustomIndexNV($0)\")\n")
SLANG_RAW("    uint GetInstanceIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the instance ID of a hit. Valid if the hit object represents a hit.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetInstanceIdNV($0)\")\n")
SLANG_RAW("    uint GetInstanceID();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the geometry index of a hit. Valid if the hit object represents a hit.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetGeometryIndexNV($0)\")\n")
SLANG_RAW("    uint GetGeometryIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the primitive index of a hit. Valid if the hit object represents a hit.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetPrimitiveIndexNV($0)\")\n")
SLANG_RAW("    uint GetPrimitiveIndex();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the hit kind. Valid if the hit object represents a hit.\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetHitKindNV($0)\")\n")
SLANG_RAW("    uint GetHitKind();\n")
SLANG_RAW("\n")
SLANG_RAW("        /// Returns the attributes of a hit. Valid if the hit object represents a hit or a miss.\n")
SLANG_RAW("    __specialized_for_target(hlsl)\n")
SLANG_RAW("    attr_t GetAttributes<attr_t>()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        attr_t v;\n")
SLANG_RAW("        __hlslGetAttributesFromHitObject(v);\n")
SLANG_RAW("        return v;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    attr_t GetAttributes<attr_t>()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        // Work out the location\n")
SLANG_RAW("        int attributeLocation = __hitObjectAttributesLocation(__hitObjectAttributes<attr_t>());\n")
SLANG_RAW("\n")
SLANG_RAW("        // Load the attributes from the location\n")
SLANG_RAW("        __glslGetAttributes(attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("        // Return the attributes\n")
SLANG_RAW("        return __hitObjectAttributes<attr_t>();\n")
SLANG_RAW("    }\n")
SLANG_RAW("        /// Loads a root constant from the local root table referenced by the hit object. Valid if the hit object\n")
SLANG_RAW("        /// represents a hit or a miss. RootConstantOffsetInBytes must be a multiple of 4.\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    uint LoadLocalRootTableConstant(uint RootConstantOffsetInBytes);\n")
SLANG_RAW("\n")
SLANG_RAW("    /// \n")
SLANG_RAW("    /// !!!! Internal NVAPI HLSL impl. Not part of interface! !!!!!!!!!!!!\n")
SLANG_RAW("    /// \n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvGetAttributesFromHitObject($0, $1)\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    void __hlslGetAttributesFromHitObject<T>(out T t);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvMakeHitWithRecordIndex\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    static void __hlslMakeHitWithRecordIndex<attr_t>(uint HitGroupRecordIndex, \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        attr_t attributes, \n")
SLANG_RAW("        out HitObject hitObj);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvMakeHit\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    static void __hlslMakeHit<attr_t>(RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint InstanceIndex, \n")
SLANG_RAW("        uint GeometryIndex, \n")
SLANG_RAW("        uint PrimitiveIndex, \n")
SLANG_RAW("        uint HitKind, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        attr_t attributes, \n")
SLANG_RAW("        out HitObject hitObj);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(hlsl, \"NvTraceRayHitObject\")\n")
SLANG_RAW("    [__requiresNVAPI]\n")
SLANG_RAW("    static void __hlslTraceRay<payload_t>( \n")
SLANG_RAW("        RaytracingAccelerationStructure AccelerationStructure, \n")
SLANG_RAW("        uint RayFlags, \n")
SLANG_RAW("        uint InstanceInclusionMask, \n")
SLANG_RAW("        uint RayContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MultiplierForGeometryContributionToHitGroupIndex, \n")
SLANG_RAW("        uint MissShaderIndex, \n")
SLANG_RAW("        RayDesc Ray, \n")
SLANG_RAW("        inout payload_t Payload,\n")
SLANG_RAW("        out HitObject hitObj);\n")
SLANG_RAW("\n")
SLANG_RAW("    /// \n")
SLANG_RAW("    /// !!!! Internal GLSL GL_NV_shader_invocation_reorder impl. Not part of interface! !!!!!!!!!!!!\n")
SLANG_RAW("    /// \n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordMissNV\")\n")
SLANG_RAW("    static void __glslMakeMiss(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        uint MissShaderIndex,\n")
SLANG_RAW("        float3 Origin,\n")
SLANG_RAW("        float TMin,\n")
SLANG_RAW("        float3 Direction,\n")
SLANG_RAW("        float TMax);\n")
SLANG_RAW("\n")
SLANG_RAW("    // \"void hitObjectRecordMissNV(hitObjectNV, uint, vec3, float, vec3, float);\"\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordMissNV\")\n")
SLANG_RAW("    static void __glslMakeMotionMiss(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        uint MissShaderIndex,\n")
SLANG_RAW("        float3 Origin,\n")
SLANG_RAW("        float TMin,\n")
SLANG_RAW("        float3 Direction,\n")
SLANG_RAW("        float TMax, \n")
SLANG_RAW("        float CurrentTime);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordEmptyNV($0)\")\n")
SLANG_RAW("    static void __glslMakeNop(HitObject hitObj);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetObjectRayDirectionNV($0)\")\n")
SLANG_RAW("    float3 __glslGetRayDirection();\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetWorldRayOriginNV($0)\")\n")
SLANG_RAW("    float3 __glslGetRayWorldOrigin();\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetRayTMaxNV($0)\")\n")
SLANG_RAW("    float __glslGetTMax();\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetRayTMinNV($0)\")\n")
SLANG_RAW("    float __glslGetTMin();\n")
SLANG_RAW("\n")
SLANG_RAW("    // \"void hitObjectRecordHitWithIndexNV(hitObjectNV, accelerationStructureEXT,int,int,int,uint,uint,vec3,float,vec3,float,int);\"\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordHitWithIndexNV\")\n")
SLANG_RAW("    static void __glslMakeHitWithIndex(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        int instanceid,\n")
SLANG_RAW("        int primitiveid,\n")
SLANG_RAW("        int geometryindex,\n")
SLANG_RAW("        uint hitKind,\n")
SLANG_RAW("        uint sbtRecordIndex,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        int attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("    //  \"void hitObjectRecordHitWithIndexMotionNV(hitObjectNV, accelerationStructureEXT,int,int,int,uint,uint,vec3,float,vec3,float,float,int);\"\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordHitWithIndexMotionNV\")\n")
SLANG_RAW("    static void __glslMakeMotionHitWithIndex(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        int instanceid,\n")
SLANG_RAW("        int primitiveid,\n")
SLANG_RAW("        int geometryindex,\n")
SLANG_RAW("        uint hitKind,\n")
SLANG_RAW("        uint sbtRecordIndex,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        float CurrentTime,\n")
SLANG_RAW("        int attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("    // \"void hitObjectRecordHitNV(hitObjectNV,accelerationStructureEXT,int,int,int,uint,uint,uint,vec3,float,vec3,float,int);\"\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordHitNV\")\n")
SLANG_RAW("    static void __glslMakeHit(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        int instanceid,\n")
SLANG_RAW("        int primitiveid,\n")
SLANG_RAW("        int geometryindex,\n")
SLANG_RAW("        uint hitKind,\n")
SLANG_RAW("        uint sbtRecordOffset,\n")
SLANG_RAW("        uint sbtRecordStride,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        int attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("        // \"void hitObjectRecordHitMotionNV(hitObjectNV,accelerationStructureEXT,int,int,int,uint,uint,uint,vec3,float,vec3,float,float,int);\"\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectRecordHitMotionNV\")\n")
SLANG_RAW("    static void __glslMakeMotionHit(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        int instanceid,\n")
SLANG_RAW("        int primitiveid,\n")
SLANG_RAW("        int geometryindex,\n")
SLANG_RAW("        uint hitKind,\n")
SLANG_RAW("        uint sbtRecordOffset,\n")
SLANG_RAW("        uint sbtRecordStride,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        float CurrentTime,\n")
SLANG_RAW("        int attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("    \n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectGetAttributesNV($0, $1)\")\n")
SLANG_RAW("    void __glslGetAttributes(int attributeLocation);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectTraceRayNV\")\n")
SLANG_RAW("    static void __glslTraceRay(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        uint rayFlags,\n")
SLANG_RAW("        uint cullMask,\n")
SLANG_RAW("        uint sbtRecordOffset,\n")
SLANG_RAW("        uint sbtRecordStride,\n")
SLANG_RAW("        uint missIndex,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        int payload);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __glsl_extension(GL_NV_ray_tracing_motion_blur)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectTraceRayMotionNV\")\n")
SLANG_RAW("    static void __glslTraceMotionRay(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        RaytracingAccelerationStructure accelerationStructure,\n")
SLANG_RAW("        uint rayFlags,\n")
SLANG_RAW("        uint cullMask,\n")
SLANG_RAW("        uint sbtRecordOffset,\n")
SLANG_RAW("        uint sbtRecordStride,\n")
SLANG_RAW("        uint missIndex,\n")
SLANG_RAW("        float3 origin,\n")
SLANG_RAW("        float Tmin,\n")
SLANG_RAW("        float3 direction,\n")
SLANG_RAW("        float Tmax,\n")
SLANG_RAW("        float currentTime,\n")
SLANG_RAW("        int payload);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("    __glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"hitObjectExecuteShaderNV\")\n")
SLANG_RAW("    static void __glslInvoke(\n")
SLANG_RAW("        HitObject hitObj,\n")
SLANG_RAW("        int payload);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("    /// Reorders threads based on a coherence hint value. NumCoherenceHintBits indicates how many of\n")
SLANG_RAW("    /// the least significant bits of CoherenceHint should be considered during reordering (max: 16).\n")
SLANG_RAW("    /// Applications should set this to the lowest value required to represent all possible values in\n")
SLANG_RAW("    /// CoherenceHint. For best performance, all threads should provide the same value for\n")
SLANG_RAW("    /// NumCoherenceHintBits.\n")
SLANG_RAW("    /// Where possible, reordering will also attempt to retain locality in the thread429496726642949671684294967193s launch indices\n")
SLANG_RAW("    /// (DispatchRaysIndex in DXR).\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvReorderThread\")\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__target_intrinsic(glsl, \"reorderThreadNV\")\n")
SLANG_RAW("void ReorderThread( uint CoherenceHint, uint NumCoherenceHintBitsFromLSB );\n")
SLANG_RAW("\n")
SLANG_RAW("    /// Reorders threads based on a hit object, optionally extended by a coherence hint value. Coherence\n")
SLANG_RAW("    /// hints behave as described in the generic variant of ReorderThread. The maximum number of\n")
SLANG_RAW("    /// coherence hint bits in this variant of ReorderThread is 8. If no coherence hint is desired, set\n")
SLANG_RAW("    /// NumCoherenceHitBits to zero.\n")
SLANG_RAW("    /// Reordering will consider information in the HitObject and coherence hint with the following\n")
SLANG_RAW("    /// priority:\n")
SLANG_RAW("    ///\n")
SLANG_RAW("    /// 1. Shader ID stored in the HitObject\n")
SLANG_RAW("    /// 2. Coherence hint, with the most significant hint bit having highest priority\n")
SLANG_RAW("    /// 3. Spatial information stored in the HitObject\n")
SLANG_RAW("    ///\n")
SLANG_RAW("    /// That is, ReorderThread will first attempt to group threads whose HitObject references the\n")
SLANG_RAW("    /// same shader ID. (Miss shaders and NOP HitObjects are grouped separately). Within each of these\n")
SLANG_RAW("    /// groups, it will attempt to order threads by the value of their coherence hints. And within ranges\n")
SLANG_RAW("    /// of equal coherence hints, it will attempt to maximize locality in 3D space of the ray hit (if any).\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvReorderThread\")\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__glsl_extension(GL_EXT_ray_tracing)\n")
SLANG_RAW("__target_intrinsic(glsl, \"reorderThreadNV\")\n")
SLANG_RAW("void ReorderThread( HitObject HitOrMiss, uint CoherenceHint, uint NumCoherenceHintBitsFromLSB );\n")
SLANG_RAW("\n")
SLANG_RAW("    /// Is equivalent to\n")
SLANG_RAW("    /// ```\n")
SLANG_RAW("    /// void ReorderThread( HitObject HitOrMiss, uint CoherenceHint, uint NumCoherenceHintBitsFromLSB );\n")
SLANG_RAW("    /// ```\n")
SLANG_RAW("    /// With CoherenceHint and NumCoherenceHintBitsFromLSB as 0, meaning they are ignored.\n")
SLANG_RAW("[__requiresNVAPI]\n")
SLANG_RAW("__target_intrinsic(hlsl, \"NvReorderThread\")\n")
SLANG_RAW("__glsl_extension(GL_NV_shader_invocation_reorder)\n")
SLANG_RAW("__target_intrinsic(glsl, \"reorderThreadNV\")\n")
SLANG_RAW("void ReorderThread( HitObject HitOrMiss );\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("///\n")
SLANG_RAW("/// DebugBreak support \n")
SLANG_RAW("///\n")
SLANG_RAW("/// There doesn't appear to be an equivalent for debugBreak for HLSL\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(hlsl, \"/* debugBreak() not currently supported for HLSL */\")\n")
SLANG_RAW("__target_intrinsic(cuda,\"__brkpt()\")\n")
SLANG_RAW("__target_intrinsic(cpp, \"SLANG_BREAKPOINT(0)\")\n")
SLANG_RAW("void debugBreak();\n")
SLANG_RAW("\n")
SLANG_RAW("__specialized_for_target(glsl)\n")
SLANG_RAW("[[vk::spirv_instruction(1, \"NonSemantic.DebugBreak\")]]\n")
SLANG_RAW("void debugBreak();\n")
