SLANG_RAW("// Slang HLSL compatibility library\n")
SLANG_RAW("\n")
SLANG_RAW("typedef uint UINT;\n")
SLANG_RAW("\n")
SLANG_RAW("// Access float2/float3 as a float3\n")
SLANG_RAW("[ForceInline] float3 __asFloat3(float2 v) { return float3(v, 0); }\n")
SLANG_RAW("[ForceInline] float3 __asFloat3(float3 v) { return v; }\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferGetDimensions
)
SLANG_RAW(")\n")
SLANG_RAW("uint2 __structuredBufferGetDimensions(AppendStructuredBuffer<T> buffer);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferGetDimensions
)
SLANG_RAW(")\n")
SLANG_RAW("uint2 __structuredBufferGetDimensions(ConsumeStructuredBuffer<T> buffer);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferGetDimensions
)
SLANG_RAW(")\n")
SLANG_RAW("uint2 __structuredBufferGetDimensions<T>(StructuredBuffer<T> buffer);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferGetDimensions
)
SLANG_RAW(")\n")
SLANG_RAW("uint2 __structuredBufferGetDimensions<T>(RWStructuredBuffer<T> buffer);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferGetDimensions
)
SLANG_RAW(")\n")
SLANG_RAW("uint2 __structuredBufferGetDimensions<T>(RasterizerOrderedStructuredBuffer<T> buffer);\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(HLSLAppendStructuredBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLAppendStructuredBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct AppendStructuredBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_StructuredBufferAppend
)
SLANG_RAW(")\n")
SLANG_RAW("    void Append(T value);\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    void GetDimensions(\n")
SLANG_RAW("        out uint numStructs,\n")
SLANG_RAW("        out uint stride)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        let result = __structuredBufferGetDimensions(this);\n")
SLANG_RAW("        numStructs = result.x;\n")
SLANG_RAW("        stride = result.y;\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(HLSLByteAddressBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_HLSLByteAddressBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct ByteAddressBuffer\n")
SLANG_RAW("{\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    __target_intrinsic(cpp)\n")
SLANG_RAW("    __target_intrinsic(cuda)\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    void GetDimensions(out uint dim);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    __specialized_for_target(spirv)\n")
SLANG_RAW("    __specialized_for_target(glsl)\n")
SLANG_RAW("    void GetDimensions(out uint dim)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dim = __structuredBufferGetDimensions(__getEquivalentStructuredBuffer<uint>(this)).x*4;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    uint Load(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<uint>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint Load(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    uint2 Load2(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<uint2>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint2 Load2(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    uint3 Load3(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<uint3>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint3 Load3(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    uint4 Load4(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<uint4>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint4 Load4(int location, out uint status);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Load<T>(int location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __byteAddressBufferLoad<T>(this, location);\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// Texture\n")
SLANG_RAW("[sealed]\n")
SLANG_RAW("[builtin]\n")
SLANG_RAW("interface __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor;\n")
SLANG_RAW("    static const int dimensions;\n")
SLANG_RAW("    static const int planeDimensions;\n")
SLANG_RAW("}\n")
SLANG_RAW("__magic_type(TextureShape1DType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureShape1DType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __Shape1D : __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor = ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int dimensions = 1;\n")
SLANG_RAW("    static const int planeDimensions = 1;\n")
SLANG_RAW("}\n")
SLANG_RAW("__magic_type(TextureShape2DType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureShape2DType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __Shape2D : __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor = ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int dimensions = 2;\n")
SLANG_RAW("    static const int planeDimensions = 2;\n")
SLANG_RAW("}\n")
SLANG_RAW("__magic_type(TextureShape3DType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureShape3DType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __Shape3D : __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor = ")
SLANG_SPLICE(SLANG_TEXTURE_3D
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int dimensions = 3;\n")
SLANG_RAW("    static const int planeDimensions = 3;\n")
SLANG_RAW("}\n")
SLANG_RAW("__magic_type(TextureShapeCubeType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureShapeCubeType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __ShapeCube : __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor = ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int dimensions = 3;\n")
SLANG_RAW("    static const int planeDimensions = 2;\n")
SLANG_RAW("}\n")
SLANG_RAW("__magic_type(TextureShapeBufferType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureShapeBufferType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __ShapeBuffer : __ITextureShape\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int flavor = ")
SLANG_SPLICE(SLANG_TEXTURE_BUFFER
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int dimensions = 1;\n")
SLANG_RAW("    static const int planeDimensions = 1;\n")
SLANG_RAW("}\n")
SLANG_RAW("__intrinsic_op(vectorReshape)\n")
SLANG_RAW("vector<T,N> __vectorReshape<let N : int, T, let M : int>(vector<T,M> vin);\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(makeVector)\n")
SLANG_RAW("__generic<T, let N:int>\n")
SLANG_RAW("vector<T,N+1> __makeVector(vector<T,N> vec, T scalar);\n")
SLANG_RAW("\n")
SLANG_RAW("static const int __kTextureAccessNone = 0;\n")
SLANG_RAW("static const int __kTextureAccessRW = 1;\n")
SLANG_RAW("static const int __kTextureAccessRasterizerOrdered = 2;\n")
SLANG_RAW("static const int __kTextureAccessFeedback = 3;\n")
SLANG_RAW("\n")
SLANG_RAW("__magic_type(TextureType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TextureType
)
SLANG_RAW(")\n")
SLANG_RAW("struct __TextureImpl<T, Shape: __ITextureShape, let isArray:int, let isMS:int, let sampleCount:int, let access:int, let isShadow:int, let isCombined:int, let format:int>\n")
SLANG_RAW("{\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Combined texture sampler specific functions\n")
SLANG_RAW("__generic<T, Shape: __ITextureShape, let isArray:int, let isMS:int, let sampleCount:int, let isShadow:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,Shape,isArray,isMS,sampleCount,0,isShadow,1,format>\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int access = 0;\n")
SLANG_RAW("\n")
SLANG_RAW("    typealias TextureCoord = vector<float, Shape.dimensions>;\n")
SLANG_RAW("    typealias ImageType = __TextureImpl<T,Shape,isArray,isMS,sampleCount,0,isShadow,0,format>;\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureQueryLod($0, $1).x\")\n")
SLANG_RAW("    float CalculateLevelOfDetail(TextureCoord location);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureQueryLod($0, $1).y\")\n")
SLANG_RAW("    float CalculateLevelOfDetailUnclamped(TextureCoord location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Sample(vector<float, Shape.dimensions+isArray> location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".Sample\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctexture($0, $1)$z\";\n")
SLANG_RAW("            case cuda:\n")
SLANG_RAW("                if (isArray != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLayered<$T0>($0, ($1).x, int(($1).y))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLayered<$T0>($0, ($1).x, ($1).y, int(($1).z))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLayered<$T0>($0, ($1).x, ($1).y, ($1).z, int(($1).w))\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1D<$T0>($0, ($1))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2D<$T0>($0, ($1).x, ($1).y)\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_3D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex3D<$T0>($0, ($1).x, ($1).y, ($1).z)\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemap<$T0>($0, ($1).x, ($1).y, ($1).z)\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleImplicitLod $this $location None;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Sample(vector<float, Shape.dimensions+isArray> location, vector<int, Shape.planeDimensions> offset, float clamp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".Sample\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctexture($0, $1)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability MinLod;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleImplicitLod $this $location None|ConstOffset|MinLod $offset $clamp;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    T Sample(vector<float, Shape.dimensions+isArray> location, vector<int, Shape.planeDimensions> offset, float clamp, out uint status)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        status = 0;\n")
SLANG_RAW("        return Sample(location, offset, clamp);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleBias(vector<float, Shape.dimensions+isArray> location, float bias)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".SampleBias\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctexture($0, $1, $2)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleImplicitLod $this $location None|Bias $bias;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleBias(vector<float, Shape.dimensions+isArray> location, float bias, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleBias\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureOffset($0, $1, $2, $3)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                %sampled : __sampledType(T) = OpImageSampleImplicitLod $this $location None|Bias|ConstOffset $bias $offset;\n")
SLANG_RAW("                __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"texture($0, $1)\")\n")
SLANG_RAW("    float __glsl_texture(vector<float, Shape.dimensions+isArray+1> value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureOffset($0, $1, $2)\")\n")
SLANG_RAW("    float __glsl_texture_offset(vector<float, Shape.dimensions+isArray+1> value, constexpr vector<int, Shape.planeDimensions> offset);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureLod($0, $1, 0)\")\n")
SLANG_RAW("    float __glsl_texture_level_zero(vector<float, Shape.dimensions+isArray+1> value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureLodOffset($0, $1, 0, $2)\")\n")
SLANG_RAW("    float __glsl_texture_offset_level_zero(vector<float, Shape.dimensions+isArray+1> value, constexpr vector<int, Shape.planeDimensions> offset);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    float SampleCmp(vector<float, Shape.dimensions+isArray> location, float compareValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __glsl_texture(__makeVector(location, compareValue));\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmp\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    float SampleCmpLevelZero(vector<float, Shape.dimensions+isArray> location, float compareValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __glsl_texture_level_zero(__makeVector(location, compareValue));\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmpLevelZero\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone] \n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    float SampleCmp(vector<float, Shape.dimensions+isArray> location, float compareValue, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __glsl_texture_offset(__makeVector(location, compareValue), offset);\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmp\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    float SampleCmpLevelZero(vector<float, Shape.dimensions+isArray> location, float compareValue, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __glsl_texture_offset_level_zero(__makeVector(location, compareValue), offset);\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmpLevelZero\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGrad($0, $1, $2, $3)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod $this $location None|Grad $gradX $gradY;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGradOffset($0, $1, $2, $3, $4)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod $this $location None|Grad|ConstOffset $gradX $gradY $offset;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_ARB_sparse_texture_clamp)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY, constexpr vector<int, Shape.planeDimensions> offset, float lodClamp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGradOffsetClampARB($0, $1, $2, $3, $4, $5)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability MinLod;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod $this $location None|Grad|ConstOffset|MinLod $gradX $gradY $offset $lodClamp;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleLevel(vector<float, Shape.dimensions+isArray> location, float level)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".SampleLevel\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctextureLod($0, $1, $2)$z\";\n")
SLANG_RAW("            case cuda:\n")
SLANG_RAW("                if (isArray != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLayeredLod<$T0>($0, ($1).x, int(($1).y), ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLayeredLod<$T0>($0, ($1).x, ($1).y, int(($1).z), ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLayeredLod<$T0>($0, ($1).x, ($1).y, ($1).z, int(($1).w), ($2))\";\n")
SLANG_RAW("                    default:\n")
SLANG_RAW("                        __intrinsic_asm \"<invalid intrinsic>\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLod<$T0>($0, ($1), ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLod<$T0>($0, ($1).x, ($1).y, ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_3D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex3DLod<$T0>($0, ($1).x, ($1).y, ($1).z, ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLod<$T0>($0, ($1).x, ($1).y, ($1).z, ($2))\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod $this $location None|Lod $level;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleLevel(vector<float, Shape.dimensions+isArray> location, float level, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".SampleLevel\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctextureLodOffset($0, $1, $2, $3)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod $this $location None|Lod|ConstOffset $level $offset;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Non-combined texture types specific functions\n")
SLANG_RAW("__generic<T, Shape: __ITextureShape, let isArray:int, let isMS:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,Shape,isArray,isMS,sampleCount,access,isShadow,0,format>\n")
SLANG_RAW("{\n")
SLANG_RAW("    typealias TextureCoord = vector<float, Shape.dimensions>;\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureQueryLod($p, $2).x\")\n")
SLANG_RAW("    float CalculateLevelOfDetail(SamplerState s, TextureCoord location);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureQueryLod($p, $2).y\")\n")
SLANG_RAW("    float CalculateLevelOfDetailUnclamped(SamplerState s, TextureCoord location);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Sample(SamplerState s, vector<float, Shape.dimensions+isArray> location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".Sample\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctexture($p, $2)$z\";\n")
SLANG_RAW("            case cuda:\n")
SLANG_RAW("                if (isArray != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLayered<$T0>($0, ($2).x, int(($2).y))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLayered<$T0>($0, ($2).x, ($2).y, int(($2).z))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLayered<$T0>($0, ($2).x, ($2).y, ($2).z, int(($2).w))\";\n")
SLANG_RAW("                    default:\n")
SLANG_RAW("                        __intrinsic_asm \"<invalid intrinsic>\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1D<$T0>($0, ($2))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2D<$T0>($0, ($2).x, ($2).y)\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_3D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex3D<$T0>($0, ($2).x, ($2).y, ($2).z)\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemap<$T0>($0, ($2).x, ($2).y, ($2).z)\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleImplicitLod %sampledImage $location None;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Sample(SamplerState s, vector<float, Shape.dimensions+isArray> location, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".Sample\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctextureOffset($p, $2, $3)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                %sampled : __sampledType(T) = OpImageSampleImplicitLod %sampledImage $location None|ConstOffset $offset;\n")
SLANG_RAW("                __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T Sample(SamplerState s, vector<float, Shape.dimensions+isArray> location, constexpr vector<int, Shape.planeDimensions> offset, float clamp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".Sample\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability MinLod;\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleImplicitLod %sampledImage $location None|ConstOffset|MinLod $offset $clamp;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    T Sample(SamplerState s, vector<float, Shape.dimensions+isArray> location, constexpr vector<int, Shape.planeDimensions> offset, float clamp, out uint status)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        status = 0;\n")
SLANG_RAW("        return Sample(s, location, offset, clamp);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleBias(SamplerState s, vector<float, Shape.dimensions+isArray> location, float bias)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleBias\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctexture($p, $2, $3)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                %sampled : __sampledType(T) = OpImageSampleImplicitLod %sampledImage $location None|Bias $bias;\n")
SLANG_RAW("                __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleBias(SamplerState s, vector<float, Shape.dimensions+isArray> location, float bias, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleBias\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureOffset($p, $2, $3, $4)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                %sampled : __sampledType(T) = OpImageSampleImplicitLod %sampledImage $location None|Bias|ConstOffset $bias $offset;\n")
SLANG_RAW("                __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(glsl, \"texture($p, $2)\")\n")
SLANG_RAW("    float __glsl_texture(SamplerComparisonState s, vector<float, Shape.dimensions+isArray+1> value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureOffset($p, $2, $3)\")\n")
SLANG_RAW("    float __glsl_texture_offset(SamplerComparisonState s, vector<float, Shape.dimensions+isArray+1> value, constexpr vector<int, Shape.planeDimensions> offset);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureLod($p, $2, 0)\")\n")
SLANG_RAW("    float __glsl_texture_level_zero(SamplerComparisonState s, vector<float, Shape.dimensions+isArray+1> value);\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_texture_shadow_lod)\n")
SLANG_RAW("    __target_intrinsic(glsl, \"textureLodOffset($p, $2, 0, $3)\")\n")
SLANG_RAW("    float __glsl_texture_offset_level_zero(SamplerComparisonState s, vector<float, Shape.dimensions+isArray+1> value, constexpr vector<int, Shape.planeDimensions> offset);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone] [ForceInline]\n")
SLANG_RAW("    float SampleCmp(SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, float compareValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            return __glsl_texture(s, __makeVector(location,compareValue));\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmp\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone] [ForceInline]\n")
SLANG_RAW("    float SampleCmpLevelZero(SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, float compareValue)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            return __glsl_texture_level_zero(s, __makeVector(location,compareValue));\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmpLevelZero\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone] [ForceInline]\n")
SLANG_RAW("    float SampleCmp(SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, float compareValue, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            return __glsl_texture_offset(s, __makeVector(location,compareValue), offset);\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmpLevelZero\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone] [ForceInline]\n")
SLANG_RAW("    float SampleCmpLevelZero(SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, float compareValue, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            return __glsl_texture_offset_level_zero(s, __makeVector(location,compareValue), offset);\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleCmpLevelZero\";\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(SamplerState s, vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGrad($p, $2, $3, $4)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod %sampledImage $location None|Grad $gradX $gradY;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(SamplerState s, vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGradOffset($p, $2, $3, $4, $5)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod %sampledImage $location None|Grad|ConstOffset $gradX $gradY $offset;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_ARB_sparse_texture_clamp)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleGrad(SamplerState s, vector<float, Shape.dimensions+isArray> location, vector<float, Shape.planeDimensions> gradX, vector<float, Shape.planeDimensions> gradY, constexpr vector<int, Shape.planeDimensions> offset, float lodClamp)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".SampleGrad\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctextureGradOffsetClampARB($p, $2, $3, $4, $5, $6)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    OpCapability MinLod;\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod %sampledImage $location None|Grad|ConstOffset|MinLod $gradX $gradY $offset $lodClamp;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleLevel(SamplerState s, vector<float, Shape.dimensions+isArray> location, float level)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".SampleLevel\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctextureLod($p, $2, $3)$z\";\n")
SLANG_RAW("            case cuda:\n")
SLANG_RAW("                if (isArray != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLayeredLod<$T0>($0, ($2).x, int(($2).y), ($3))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLayeredLod<$T0>($0, ($2).x, ($2).y, int(($2).z), ($3))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLayeredLod<$T0>($0, ($2).x, ($2).y, ($2).z, int(($2).w), ($3))\";\n")
SLANG_RAW("                    default:\n")
SLANG_RAW("                        __intrinsic_asm \"<invalid intrinsic>\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    switch(Shape.flavor)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_1D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex1DLod<$T0>($0, ($2), ($3))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_2D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex2DLod<$T0>($0, ($2).x, ($2).y, ($3))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_3D
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"tex3DLod<$T0>($0, ($2).x, ($2).y, ($2).z, ($3))\";\n")
SLANG_RAW("                    case ")
SLANG_SPLICE(SLANG_TEXTURE_CUBE
)
SLANG_RAW(":\n")
SLANG_RAW("                        __intrinsic_asm \"texCubemapLod<$T0>($0, ($2).x, ($2).y, ($2).z, ($3))\";\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                }\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("            return spirv_asm\n")
SLANG_RAW("            {\n")
SLANG_RAW("                %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                %sampled : __sampledType(T) = OpImageSampleExplicitLod %sampledImage $location None|Lod $level;\n")
SLANG_RAW("                __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("\n")
SLANG_RAW("            };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T SampleLevel(SamplerState s, vector<float, Shape.dimensions+isArray> location, float level, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("                __intrinsic_asm \".SampleLevel\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctextureLodOffset($p, $2, $3, $4)$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampledImageType = OpTypeSampledImage $$This;\n")
SLANG_RAW("                    %sampledImage : %sampledImageType = OpSampledImage $this $s;\n")
SLANG_RAW("                    %sampled : __sampledType(T) = OpImageSampleExplicitLod %sampledImage $location None|Lod|ConstOffset $level $offset;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Texture.GetDimensions\n")

struct TextureShapeInfo
{
    int flavor;
    const char* shapeTypeName;
    List<const char*> params;
};
const TextureShapeInfo kTextureShapes[] = {
    {SLANG_TEXTURE_1D, "__Shape1D", {"width"}},
    {SLANG_TEXTURE_2D, "__Shape2D", {"width", "height"}},
    {SLANG_TEXTURE_3D, "__Shape3D", {"width", "height", "depth"}},
    {SLANG_TEXTURE_CUBE, "__ShapeCube", {"width", "height"}},
};
const char* kGetDimensionResultTypes[] = {"float", "uint"};
for (int shapeIndex = 0; shapeIndex < 4; shapeIndex++)
for (int isArray = 0; isArray <= 1; isArray++)
for (int isMS = 0; isMS <= 1; isMS++) {
    if (isMS)
    {
        if (shapeIndex != 1)
            continue;
    }
    if (isArray)
    {
        if (shapeIndex == 2)
            continue;
    }
    auto shape = kTextureShapes[shapeIndex];
    TextureTypeInfo textureTypeInfo(kBaseTextureShapes[shapeIndex], isArray, isMS, 0, kBaseTextureAccessLevels[0], sb, path);
SLANG_RAW("#line 894 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, let sampleCount:int, let access:int, let isShadow:int, let isCombined:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,")
SLANG_SPLICE(shape.shapeTypeName
)
SLANG_RAW(",")
SLANG_SPLICE(isArray
)
SLANG_RAW(",")
SLANG_SPLICE(isMS
)
SLANG_RAW(",sampleCount,access,isShadow,isCombined,format>\n")
SLANG_RAW("{\n")

    textureTypeInfo.writeGetDimensionFunctions();
    
SLANG_RAW("#line 901 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

}
SLANG_RAW("#line 906 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Texture.GetSamplePosition(int s);\n")
SLANG_RAW("__generic<T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let isCombined:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,Shape,isArray,1,sampleCount,access,isShadow,isCombined,format>\n")
SLANG_RAW("{\n")
SLANG_RAW("    float2 GetSamplePosition(int s);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_MakeArray
)
SLANG_RAW(")\n")
SLANG_RAW("Array<T,4> __makeArray<T>(T v0, T v1, T v2, T v3);\n")
SLANG_RAW("\n")
SLANG_RAW("// Gather for scalar textures.\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gather(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerState s, vector<float, Shape.dimensions+isArray> location, int component)\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGather($p, $2, $3)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageGather %sampledImage $location $component;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gather_offset(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerState s, vector<float, Shape.dimensions+isArray> location, int component, vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGatherOffset($p, $2, $3, $4)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageGather %sampledImage $location $component ConstOffset $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gather_offsets(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerState s, vector<float, Shape.dimensions+isArray> location, int component,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset1,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset2,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset3,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset4)\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGatherOffsets($p, $2, $3, $T4[]($4, $5, $6, $7))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        let offsets = __makeArray(offset1,offset2,offset3,offset4);\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability ImageGatherExtended;\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageGather %sampledImage $location $component ConstOffsets $offsets;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gatherCmp(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, int componentIndex, TElement compareValue)\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGather($p, $2, $4)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageDrefGather %sampledImage $location $compareValue;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gatherCmp_offset(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, int componentIndex, TElement compareValue, vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGatherOffset($p, $2, $4, $5)\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageDrefGather %sampledImage $location $compareValue ConstOffset $offset;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<TElement, T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let access:int, let isShadow:int, let format:int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("vector<TElement,4> __glsl_gatherCmp_offsets(__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 0, format> texture, SamplerComparisonState s, vector<float, Shape.dimensions+isArray> location, int componentIndex, TElement compareValue,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset1,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset2,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset3,\n")
SLANG_RAW("    vector<int, Shape.planeDimensions> offset4\n")
SLANG_RAW("    )\n")
SLANG_RAW("{\n")
SLANG_RAW("    //typealias SampledImageType = __TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format>;\n")
SLANG_RAW("    __target_switch\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case glsl:\n")
SLANG_RAW("        __intrinsic_asm \"textureGatherOffsets($p, $2, $4, $T5[]($5, $6, $7, $8))\";\n")
SLANG_RAW("    case spirv:\n")
SLANG_RAW("        let offsets = __makeArray(offset1,offset2,offset3,offset4);\n")
SLANG_RAW("        return spirv_asm {\n")
SLANG_RAW("            OpCapability ImageGatherExtended;\n")
SLANG_RAW("            %sampledImage : $$__TextureImpl<T, Shape, isArray, 0, sampleCount, access, isShadow, 1, format> = OpSampledImage $texture $s;\n")
SLANG_RAW("            result:$$vector<TElement,4> = OpImageDrefGather %sampledImage $location $compareValue ConstOffsets $offsets;\n")
SLANG_RAW("        };\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

for (int isScalarTexture = 0; isScalarTexture <= 1; isScalarTexture++) {
    if (isScalarTexture == 0)
    {
        sb << "__generic<T:__BuiltinArithmeticType, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let isShadow:int, let format:int>\n";
        sb << "extension __TextureImpl<T,Shape,isArray,0,sampleCount,0,isShadow,0,format>\n";
    }
    else
    {
        sb << "__generic<T:__BuiltinArithmeticType, let N:int, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let isShadow:int, let format:int>\n";
        sb << "extension __TextureImpl<vector<T,N>,Shape,isArray,0,sampleCount,0,isShadow,0,format>\n";
    }
SLANG_RAW("#line 1041 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("{ // begin extension for gather\n")

    // Gather component
    for (int isCmp = 0; isCmp <= 1; ++isCmp) {
        const char* cmp = isCmp ? "Cmp" : "";
        const char* cmpParam = isCmp? "T compareValue, " : "";
        const char* compareArg = isCmp ? "compareValue, " : "";
        const char* samplerStateType = isCmp ? "SamplerComparisonState" : "SamplerState";
        const char* componentNames[] = {"", "Red", "Green", "Blue", "Alpha"};
        for (auto componentId = 0;  componentId < 4; componentId++) {
            auto component = componentNames[componentId];
            auto componentIndex = componentId == 0 ? 0 : componentId - 1;
    
SLANG_RAW("#line 1054 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    vector<T,4> Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("(")
SLANG_SPLICE(samplerStateType
)
SLANG_RAW(" s, vector<float, Shape.dimensions+isArray> location, ")
SLANG_SPLICE(cmpParam
)
SLANG_RAW(")\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case hlsl: __intrinsic_asm \".Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("\";\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return __glsl_gather")
SLANG_SPLICE(cmp
)
SLANG_RAW("<T>(this, s, location, ")
SLANG_SPLICE(componentIndex
)
SLANG_RAW(", ")
SLANG_SPLICE(compareArg
)
SLANG_RAW(");\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    vector<T,4> Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("(")
SLANG_SPLICE(samplerStateType
)
SLANG_RAW(" s, vector<float, Shape.dimensions+isArray> location, ")
SLANG_SPLICE(cmpParam
)
SLANG_RAW(" vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case hlsl: __intrinsic_asm \".Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("\";\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return __glsl_gather")
SLANG_SPLICE(cmp
)
SLANG_RAW("_offset<T>(this, s, location, ")
SLANG_SPLICE(componentIndex
)
SLANG_RAW(", ")
SLANG_SPLICE(compareArg
)
SLANG_RAW(" offset);\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    vector<T,4> Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("(")
SLANG_SPLICE(samplerStateType
)
SLANG_RAW(" s, vector<float, Shape.dimensions+isArray> location, ")
SLANG_SPLICE(cmpParam
)
SLANG_RAW("\n")
SLANG_RAW("        vector<int, Shape.planeDimensions> offset1,\n")
SLANG_RAW("        vector<int, Shape.planeDimensions> offset2,\n")
SLANG_RAW("        vector<int, Shape.planeDimensions> offset3,\n")
SLANG_RAW("        vector<int, Shape.planeDimensions> offset4)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case hlsl: __intrinsic_asm \".Gather")
SLANG_SPLICE(cmp
)
SLANG_SPLICE(component
)
SLANG_RAW("\";\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            return __glsl_gather")
SLANG_SPLICE(cmp
)
SLANG_RAW("_offsets<T>(this, s, location, ")
SLANG_SPLICE(componentIndex
)
SLANG_RAW(", ")
SLANG_SPLICE(compareArg
)
SLANG_RAW(" offset1,offset2,offset3,offset4);\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")

    } // for (component)
    } // for (isCmp)
    
SLANG_RAW("#line 1095 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("} // end extension for gather\n")
SLANG_RAW("\n")

} // for (isScalarTexture)
SLANG_RAW("#line 1100 \"hlsl.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// Load/Subscript for readonly, no MS textures\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let isShadow:int, let isCombined:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,Shape,isArray,0,sampleCount,0,isShadow,isCombined,format>\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int isMS = 0;\n")
SLANG_RAW("    static const int access = ")
SLANG_SPLICE(kStdlibResourceAccessReadOnly
)
SLANG_RAW(";\n")
SLANG_RAW("    typealias ImageType = __TextureImpl<T,Shape,isArray,0,sampleCount,0,isShadow,0,format>;\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    T __glsl_load(vector<int, Shape.dimensions+isArray> location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __intrinsic_asm \"$ctexelFetch($0, ($1), 0)$z\";\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    T Load(vector<int, Shape.dimensions+isArray+1> location)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("        case cpp:\n")
SLANG_RAW("        case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".Load\";\n")
SLANG_RAW("        case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctexelFetch($0, ($1).$w1b, ($1).$w1e)$z\";\n")
SLANG_RAW("        case spirv:\n")
SLANG_RAW("            const int lodLoc = Shape.dimensions+isArray;\n")
SLANG_RAW("            let coord = __vectorReshape<Shape.dimensions+isArray>(location);\n")
SLANG_RAW("            let lod = location[lodLoc];\n")
SLANG_RAW("            if (isCombined != 0)\n")
SLANG_RAW("            {\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %image:$$ImageType = OpImage $this;\n")
SLANG_RAW("                    %sampled:__sampledType(T) = OpImageFetch %image $coord Lod $lod;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("            else\n")
SLANG_RAW("            {\n")
SLANG_RAW("                return spirv_asm\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    %sampled:__sampledType(T) = OpImageFetch $this $coord Lod $lod;\n")
SLANG_RAW("                    __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                };\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    T Load(vector<int, Shape.dimensions+isArray+1> location, constexpr vector<int, Shape.planeDimensions> offset)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".Load\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("            __intrinsic_asm \"$ctexelFetchOffset($0, ($1).$w1b, ($1).$w1e, ($2))$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                const int lodLoc = Shape.dimensions+isArray;\n")
SLANG_RAW("                let coord = __vectorReshape<Shape.dimensions+isArray>(location);\n")
SLANG_RAW("                let lod = location[lodLoc];\n")
SLANG_RAW("                if (isCombined != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    return spirv_asm\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        %image:$$ImageType = OpImage $this;\n")
SLANG_RAW("                        %sampled:__sampledType(T) = OpImageFetch %image $coord Lod|ConstOffset $lod $offset;\n")
SLANG_RAW("                        __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                    };\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    return spirv_asm\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        %sampled:__sampledType(T) = OpImageFetch $this $coord Lod|ConstOffset $lod $offset;\n")
SLANG_RAW("                        __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                    };\n")
SLANG_RAW("                }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    __target_intrinsic(hlsl)\n")
SLANG_RAW("    T Load(vector<int, Shape.dimensions+isArray+1> location, constexpr vector<int, Shape.planeDimensions> offset, out uint status)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        status = 0;\n")
SLANG_RAW("        return Load(location, offset);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(vector<uint, Shape.dimensions+isArray> location) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("        [__readNone]\n")
SLANG_RAW("        [ForceInline]\n")
SLANG_RAW("        get\n")
SLANG_RAW("        {\n")
SLANG_RAW("            __target_switch\n")
SLANG_RAW("            {\n")
SLANG_RAW("                case cpp:\n")
SLANG_RAW("                case hlsl:\n")
SLANG_RAW("                    __intrinsic_asm \".operator[]\";\n")
SLANG_RAW("                case glsl:\n")
SLANG_RAW("                    return __glsl_load(location);\n")
SLANG_RAW("                case spirv:\n")
SLANG_RAW("                    if (isCombined != 0)\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        return spirv_asm\n")
SLANG_RAW("                        {\n")
SLANG_RAW("                            %image:$$ImageType = OpImage $this;\n")
SLANG_RAW("                            %sampled:__sampledType(T) = OpImageFetch %image $location;\n")
SLANG_RAW("                            __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                        };\n")
SLANG_RAW("                    }\n")
SLANG_RAW("                    else\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        return spirv_asm\n")
SLANG_RAW("                        {\n")
SLANG_RAW("                            %sampled:__sampledType(T) = OpImageFetch $this $location;\n")
SLANG_RAW("                            __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                        };\n")
SLANG_RAW("                    }\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Texture Load/Subscript for readonly, MS textures\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, Shape: __ITextureShape, let isArray:int, let sampleCount:int, let isShadow:int, let isCombined:int, let format:int>\n")
SLANG_RAW("extension __TextureImpl<T,Shape,isArray,1,sampleCount,0,isShadow,isCombined,format>\n")
SLANG_RAW("{\n")
SLANG_RAW("    static const int access = ")
SLANG_SPLICE(kStdlibResourceAccessReadOnly
)
SLANG_RAW(";\n")
SLANG_RAW("    static const int isMS = 1;\n")
SLANG_RAW("    typealias ImageType = __TextureImpl<T,Shape,isArray,1,sampleCount,0,isShadow,0,format>;\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    T Load(vector<int, Shape.dimensions+isArray> location, int sampleIndex)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        __target_switch\n")
SLANG_RAW("        {\n")
SLANG_RAW("            case cpp:\n")
SLANG_RAW("            case hlsl:\n")
SLANG_RAW("            __intrinsic_asm \".Load\";\n")
SLANG_RAW("            case glsl:\n")
SLANG_RAW("                __intrinsic_asm \"$ctexelFetch($0, $1, ($2))$z\";\n")
SLANG_RAW("            case spirv:\n")
SLANG_RAW("                if (isCombined != 0)\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    return spirv_asm\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        %image:$$ImageType = OpImage $this;\n")
SLANG_RAW("                        %sampled:__sampledType(T) = OpImageFetch %image $location Sample $sampleIndex;\n")
SLANG_RAW("                        __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                    };\n")
SLANG_RAW("                }\n")
SLANG_RAW("                else\n")
SLANG_RAW("                {\n")
SLANG_RAW("                    return spirv_asm\n")
SLANG_RAW("                    {\n")
SLANG_RAW("                        %sampled:__sampledType(T) = OpImageFetch $this $location Sample $sampleIndex;\n")
SLANG_RAW("                        __truncate $$T result __sampledType(T) %sampled;\n")
SLANG_RAW("                    };\n")
SLANG_RAW("                }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __glsl_extension(GL_EXT_samplerless_texture_functions)\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    T Load